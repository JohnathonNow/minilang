<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__gir_8c" kind="file" language="C++">
    <compoundname>ml_gir.c</compoundname>
    <includes refid="ml__gir_8h" local="yes">ml_gir.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes local="no">girffi.h</includes>
    <includes local="no">stdio.h</includes>
    <includes refid="ml__stream_8h" local="yes">ml_stream.h</includes>
    <includes local="no">gio/gio.h</includes>
    <includes refid="ml__array_8h" local="yes">ml_array.h</includes>
    <includes local="yes">ml_gir_init.c</includes>
    <incdepgraph>
      <node id="14">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>ml_array.h</label>
        <link refid="ml__array_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_gir.c</label>
        <link refid="ml__gir_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ml_gir.h</label>
        <link refid="ml__gir_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>ml_stream.h</label>
        <link refid="ml__stream_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="20">
        <label>gc/gc.h</label>
      </node>
      <node id="23">
        <label>gio/gio.h</label>
      </node>
      <node id="18">
        <label>girepository.h</label>
      </node>
      <node id="21">
        <label>girffi.h</label>
      </node>
      <node id="17">
        <label>limits.h</label>
      </node>
      <node id="16">
        <label>ml_config.h</label>
      </node>
      <node id="25">
        <label>ml_gir_init.c</label>
      </node>
      <node id="7">
        <label>setjmp.h</label>
      </node>
      <node id="12">
        <label>stdarg.h</label>
      </node>
      <node id="15">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structptrset__t" prot="public">ptrset_t</innerclass>
    <innerclass refid="structtypelib__t" prot="public">typelib_t</innerclass>
    <innerclass refid="structtypelib__iter__t" prot="public">typelib_iter_t</innerclass>
    <innerclass refid="structbaseinfo__t" prot="public">baseinfo_t</innerclass>
    <innerclass refid="structobject__t" prot="public">object_t</innerclass>
    <innerclass refid="structobject__instance__t" prot="public">object_instance_t</innerclass>
    <innerclass refid="structstruct__t" prot="public">struct_t</innerclass>
    <innerclass refid="structstruct__instance__t" prot="public">struct_instance_t</innerclass>
    <innerclass refid="structunion__t" prot="public">union_t</innerclass>
    <innerclass refid="structunion__instance__t" prot="public">union_instance_t</innerclass>
    <innerclass refid="structfield__ref__t" prot="public">field_ref_t</innerclass>
    <innerclass refid="structenum__t" prot="public">enum_t</innerclass>
    <innerclass refid="structenum__value__t" prot="public">enum_value_t</innerclass>
    <innerclass refid="structml__gir__callback__t" prot="public">ml_gir_callback_t</innerclass>
    <innerclass refid="structhashtable__to__map__t" prot="public">hashtable_to_map_t</innerclass>
    <innerclass refid="structgir__closure__info__t" prot="public">gir_closure_info_t</innerclass>
    <innerclass refid="structobject__property__t" prot="public">object_property_t</innerclass>
    <innerclass refid="structml__gir__type__t" prot="public">ml_gir_type_t</innerclass>
    <innerclass refid="structml__gio__callback__t" prot="public">ml_gio_callback_t</innerclass>
    <innerclass refid="structml__gir__value__t" prot="public">ml_gir_value_t</innerclass>
    <innerclass refid="uniongi__inst__t" prot="public">gi_inst_t</innerclass>
    <innerclass refid="structcallback__t" prot="public">callback_t</innerclass>
    <innerclass refid="structcallback__instance__t" prot="public">callback_instance_t</innerclass>
    <innerclass refid="structarg__info__t" prot="public">arg_info_t</innerclass>
    <innerclass refid="structptr__to__value__t" prot="public">ptr_to_value_t</innerclass>
    <innerclass refid="structgir__function__t" prot="public">gir_function_t</innerclass>
    <innerclass refid="structghash__to__map__t" prot="public">ghash_to_map_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__gir_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;gir&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="7" column="10" bodyfile="src/ml_gir.c" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__gir_8c_1abbb3690854b80d9c1e1b99b4622877d4" prot="public" static="no">
        <name>PTRSET_INIT</name>
        <initializer>{NULL, 0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="14" column="9" bodyfile="src/ml_gir.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__gir_8c_1a3fef062247ebe9835479e206c5092a4e" prot="public" static="no">
        <name>PTRSET_INITIAL_SIZE</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="15" column="9" bodyfile="src/ml_gir.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__gir_8c_1ab301427ab71950e66d3539a6ce6a3d9e" prot="public" static="no">
        <name>FIELD_REF</name>
        <param><defname>UNAME</defname></param>
        <param><defname>LNAME</defname></param>
        <param><defname>GTYPE</defname></param>
        <param><defname>GETTER</defname></param>
        <param><defname>SETTER</defname></param>
        <initializer>static <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *field_ref_ ## LNAME ## _deref(<ref refid="structfield__ref__t" kindref="compound">field_ref_t</ref> *Ref) { \
	GTYPE Value = *(GTYPE *)Ref-&gt;Address; \
	return GETTER; \
} \
\
static void field_ref_ ## LNAME ## _assign(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *Caller, <ref refid="structfield__ref__t" kindref="compound">field_ref_t</ref> *Ref, <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *Value) { \
	GTYPE *Address = (GTYPE *)Ref-&gt;Address; \
	*Address = SETTER; \
	ML_RETURN(Value); \
} \
\
ML_TYPE(GirFieldRef ## UNAME ## T, (GirFieldRefT), &quot;field-ref-&quot; #LNAME, \
/*@gir::fieldref-LNAME
*/ \
	.deref = (void *)field_ref_ ## LNAME ## _deref, \
	.assign = (void *)field_ref_ ## LNAME ## _assign \
);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="331" column="9" bodyfile="src/ml_gir.c" bodystart="330" bodyend="346"/>
      </memberdef>
      <memberdef kind="define" id="ml__gir_8c_1aa4a2182893a2b25de47c246c52667816" prot="public" static="no">
        <name>VALUE_CONVERTOR</name>
        <param><defname>GTYPE</defname></param>
        <param><defname>MLTYPE</defname></param>
        <initializer>static <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *GTYPE ## _to_array(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *Value, void *Ptr) { \
	*(g ## GTYPE *)Ptr = ml_ ## MLTYPE ## _value(Value); \
	return NULL; \
} \
\
static <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *GTYPE ## _to_glist(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *Value, void **Ptr) { \
	*Ptr = (void *)(uintptr_t)ml_ ## MLTYPE ## _value(Value); \
	return NULL; \
} \
\
static <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *GTYPE ## _to_value(void *Ptr, void *Aux) { \
	return ml_ ## MLTYPE((g ## GTYPE)(uintptr_t)Ptr); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1688" column="9" bodyfile="src/ml_gir.c" bodystart="1687" bodyend="1700"/>
      </memberdef>
      <memberdef kind="define" id="ml__gir_8c_1a04393d127f885dcfbf5f45134b7c12d7" prot="public" static="no">
        <name>BASIC_CASES_SIZE</name>
        <param><defname>NUM</defname></param>
        <initializer>	case GI_TYPE_TAG_BOOLEAN: \
	case GI_TYPE_TAG_INT8: \
	case GI_TYPE_TAG_UINT8: \
	case GI_TYPE_TAG_INT16: \
	case GI_TYPE_TAG_UINT16: \
	case GI_TYPE_TAG_INT32: \
	case GI_TYPE_TAG_UINT32: \
	case GI_TYPE_TAG_INT64: \
	case GI_TYPE_TAG_UINT64: \
	case GI_TYPE_TAG_FLOAT: \
	case GI_TYPE_TAG_DOUBLE: \
	case GI_TYPE_TAG_GTYPE: \
	case GI_TYPE_TAG_UTF8: \
	case GI_TYPE_TAG_FILENAME: \
	case GI_TYPE_TAG_UNICHAR: (NUM++); break;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="2150" column="9" bodyfile="src/ml_gir.c" bodystart="2149" bodyend="2164"/>
      </memberdef>
      <memberdef kind="define" id="ml__gir_8c_1a88b8d0ce161919a89fe06061fcc32dad" prot="public" static="no">
        <name>BASIC_CASES_INST</name>
        <param><defname>DEST</defname></param>
        <initializer>	case GI_TYPE_TAG_BOOLEAN: (DEST++)-&gt;Opcode = GIB_BOOLEAN; break; \
	case GI_TYPE_TAG_INT8: (DEST++)-&gt;Opcode = GIB_INT8; break; \
	case GI_TYPE_TAG_UINT8: (DEST++)-&gt;Opcode = GIB_UINT8; break; \
	case GI_TYPE_TAG_INT16: (DEST++)-&gt;Opcode = GIB_INT16; break; \
	case GI_TYPE_TAG_UINT16: (DEST++)-&gt;Opcode = GIB_UINT16; break; \
	case GI_TYPE_TAG_INT32: (DEST++)-&gt;Opcode = GIB_INT32; break; \
	case GI_TYPE_TAG_UINT32: (DEST++)-&gt;Opcode = GIB_UINT32; break; \
	case GI_TYPE_TAG_INT64: (DEST++)-&gt;Opcode = GIB_INT64; break; \
	case GI_TYPE_TAG_UINT64: (DEST++)-&gt;Opcode = GIB_UINT64; break; \
	case GI_TYPE_TAG_FLOAT: (DEST++)-&gt;Opcode = GIB_FLOAT; break; \
	case GI_TYPE_TAG_DOUBLE: (DEST++)-&gt;Opcode = GIB_DOUBLE; break; \
	case GI_TYPE_TAG_GTYPE: (DEST++)-&gt;Opcode = GIB_GTYPE; break; \
	case GI_TYPE_TAG_UTF8: (DEST++)-&gt;Opcode = GIB_STRING; break; \
	case GI_TYPE_TAG_FILENAME: (DEST++)-&gt;Opcode = GIB_STRING; break; \
	case GI_TYPE_TAG_UNICHAR: (DEST++)-&gt;Opcode = GIB_UINT32; break;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="2167" column="9" bodyfile="src/ml_gir.c" bodystart="2166" bodyend="2181"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebc" prot="public" static="no" strong="no">
        <type></type>
        <name>gi_opcode_t</name>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebcab29d1afe2b0c84114034396825f65365" prot="public">
          <name>GIB_DONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca205e618804951dcc2d912b8a971c8217" prot="public">
          <name>GIB_BOOLEAN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca344a50e44b7cc6de263c472d4789ebdf" prot="public">
          <name>GIB_INT8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca55d138c7b54c8868483523e05d6062eb" prot="public">
          <name>GIB_UINT8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebcab528a8bc3f21d9ebad8760398bd494c7" prot="public">
          <name>GIB_INT16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca264e91d11882e12f26094c226dad7e01" prot="public">
          <name>GIB_UINT16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebcaa15f13d7759e557cd5fe41c90594da46" prot="public">
          <name>GIB_INT32</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebcae079b07ca9c95164480f68b73e7ce800" prot="public">
          <name>GIB_UINT32</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebcaba2be828dddd13e4212159834dbe658c" prot="public">
          <name>GIB_INT64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca67e8a419f480f91a7c83d39bc6511323" prot="public">
          <name>GIB_UINT64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca0088677a83bcee5461689cec5546fc83" prot="public">
          <name>GIB_FLOAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebcace3ed9a2e6ac63d8cc50d586c3bd4eea" prot="public">
          <name>GIB_DOUBLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca1f6a18a27b9ee132ccf62ac3c4ac0b15" prot="public">
          <name>GIB_STRING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca196d8ed6319dd7317a70576cc30bef09" prot="public">
          <name>GIB_GTYPE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca42499c8d5c9887a874845292260cb666" prot="public">
          <name>GIB_ARRAY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebcac18c4ca01bd7f25a6bfbfa6173bc19da" prot="public">
          <name>GIB_CALLBACK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca9e3a4b831ebfe4372422cc1d92cf78dd" prot="public">
          <name>GIB_STRUCT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca8e7a5d4a13adc531dd5a9db53638892b" prot="public">
          <name>GIB_UNION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebcaaa08e57e083724d29e68b3a768756b12" prot="public">
          <name>GIB_ENUM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca6065f5306487c641ea768fd994d6f8f1" prot="public">
          <name>GIB_OBJECT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca396798ed0be0223d1a1ed8e1848c2616" prot="public">
          <name>GIB_SELF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca878ab9e9d71440a9d20e5b615452be0a" prot="public">
          <name>GIB_VALUE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebcafce1df3cc4b467ebd462b28f6259de58" prot="public">
          <name>GIB_LIST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebcab84c517acb1754dcc0267e2c7f5d5e12" prot="public">
          <name>GIB_SLIST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca91601caed1cac4c243ede3c47906f224" prot="public">
          <name>GIB_HASH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca58ded98f62a846f71dc3ebc24848f488" prot="public">
          <name>GIB_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebcaa337abc2b1b3276c2865c5dcdd27f40b" prot="public">
          <name>GIB_ARRAY_ZERO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebcafd2cc99a33d5427ff673b9d9bb417fa3" prot="public">
          <name>GIB_ARRAY_FIXED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca138b3bf623815940cc92f063a982dae1" prot="public">
          <name>GIB_ARRAY_LENGTH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca94d2103e2e142e86c96ab153292778fc" prot="public">
          <name>GIB_SKIP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca0b2e855dd6018d90b2cc912bd6fca7cc" prot="public">
          <name>GIB_OUTPUT_VALUE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca194f84a749ec73eb1b2be7e6642ffa1a" prot="public">
          <name>GIB_OUTPUT_ARRAY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebca5a947860a8ce73036da175b35962b7c0" prot="public">
          <name>GIB_OUTPUT_ARRAY_LENGTH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebcaa5bc0c0726b0eb2604366bc11ab38aaf" prot="public">
          <name>GIB_OUTPUT_STRUCT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="ml__gir_8c_1ad49c2330a92e27978b8f96c670000ebcadec6e4ea2f324e235d8a84bc9501a3e0" prot="public">
          <name>GIB_FREE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1646" column="1" bodyfile="src/ml_gir.c" bodystart="1646" bodyend="1685"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ml__gir_8c_1ab183c714aaec00257a76965dd4402ff9" prot="public" static="no">
        <type>struct field_ref_t</type>
        <definition>typedef struct field_ref_t field_ref_t</definition>
        <argsstring></argsstring>
        <name>field_ref_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="325" column="13"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__gir_8c_1a2c5e62d67d1b8f69a8452b48e3101601" prot="public" static="no">
        <type>struct enum_t</type>
        <definition>typedef struct enum_t enum_t</definition>
        <argsstring></argsstring>
        <name>enum_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="482" column="21" bodyfile="src/ml_gir.c" bodystart="482" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__gir_8c_1a5b35c70d5fa2f0cb1da1f104681c5325" prot="public" static="no">
        <type>struct enum_value_t</type>
        <definition>typedef struct enum_value_t enum_value_t</definition>
        <argsstring></argsstring>
        <name>enum_value_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="483" column="27" bodyfile="src/ml_gir.c" bodystart="483" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__gir_8c_1a951c1496ecf4ecd5a3a93a05b8015db6" prot="public" static="no">
        <type>struct ml_gio_callback_t</type>
        <definition>typedef struct ml_gio_callback_t ml_gio_callback_t</definition>
        <argsstring></argsstring>
        <name>ml_gio_callback_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1549" column="32" bodyfile="src/ml_gir.c" bodystart="1549" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__gir_8c_1a2d1f94a1db71efc6b6068b6d588b2c5c" prot="public" static="no">
        <type>struct ml_gir_value_t</type>
        <definition>typedef struct ml_gir_value_t ml_gir_value_t</definition>
        <argsstring></argsstring>
        <name>ml_gir_value_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1616" column="29" bodyfile="src/ml_gir.c" bodystart="1616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__gir_8c_1aa43e27659e68aa32c633d5997e40eeb5" prot="public" static="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *(*</type>
        <definition>typedef ml_value_t *(* ptr_to_value_fn) (void *)</definition>
        <argsstring>)(void *)</argsstring>
        <name>ptr_to_value_fn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="2494" column="9" bodyfile="src/ml_gir.c" bodystart="2494" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ml__gir_8c_1afa74116a6aab711f5d92d871399ebcc0" prot="public" static="yes" mutable="no">
        <type><ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref> *</type>
        <definition>object_instance_t* ObjectInstanceNil</definition>
        <argsstring></argsstring>
        <name>ObjectInstanceNil</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="163" column="26" bodyfile="src/ml_gir.c" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__gir_8c_1a41873917390e552cd4e690a927827f43" prot="public" static="yes" mutable="no">
        <type>GQuark</type>
        <definition>GQuark MLQuark</definition>
        <argsstring></argsstring>
        <name>MLQuark</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="174" column="15" bodyfile="src/ml_gir.c" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__gir_8c_1ac5cbdaf539fc169d5891d983da0c8759" prot="public" static="yes" mutable="no">
        <type>GType</type>
        <definition>GType MLType</definition>
        <argsstring></argsstring>
        <name>MLType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="175" column="14" bodyfile="src/ml_gir.c" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__gir_8c_1a50580855280f1202c3d528d06b469396" prot="public" static="yes" mutable="no">
        <type>GIBaseInfo *</type>
        <definition>static GIBaseInfo * GValueInfo</definition>
        <argsstring></argsstring>
        <name>GValueInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="621" column="19" bodyfile="src/ml_gir.c" bodystart="621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__gir_8c_1a0d6ebd14afad3fd14aa104185651d129" prot="public" static="yes" mutable="no">
        <type>GIBaseInfo *</type>
        <definition>GIBaseInfo* DestroyNotifyInfo</definition>
        <argsstring></argsstring>
        <name>DestroyNotifyInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="822" column="19" bodyfile="src/ml_gir.c" bodystart="822" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__gir_8c_1aca34fa3dc34657a6e7e81f012f498f52" prot="public" static="yes" mutable="no">
        <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref></type>
        <definition>stringmap_t TypeMap[1]</definition>
        <argsstring>[1]</argsstring>
        <name>TypeMap</name>
        <initializer>= {STRINGMAP_INIT}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="927" column="20" bodyfile="src/ml_gir.c" bodystart="927" bodyend="927"/>
      </memberdef>
      <memberdef kind="variable" id="ml__gir_8c_1aa916a3285c27109915eb0ba4e5c08c3e" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__gio__callback__t" kindref="compound">ml_gio_callback_t</ref></type>
        <definition>ml_gio_callback_t GioCallbacks[1]</definition>
        <argsstring>[1]</argsstring>
        <name>GioCallbacks</name>
        <initializer>= {{GioCallbacks, GioCallbacks, NULL}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1556" column="26" bodyfile="src/ml_gir.c" bodystart="1556" bodyend="1556"/>
      </memberdef>
      <memberdef kind="variable" id="ml__gir_8c_1abeecfa205de65a522b9eda3a611d5d97" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__gio__callback__t" kindref="compound">ml_gio_callback_t</ref> *</type>
        <definition>ml_gio_callback_t* GioCallbackCache</definition>
        <argsstring></argsstring>
        <name>GioCallbackCache</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1557" column="26" bodyfile="src/ml_gir.c" bodystart="1557" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__gir_8c_1a8fc9f97129bd7bc32b2776387256c168" prot="public" static="yes" mutable="no">
        <type>GMainLoop *</type>
        <definition>GMainLoop* MainLoop</definition>
        <argsstring></argsstring>
        <name>MainLoop</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1622" column="18" bodyfile="src/ml_gir.c" bodystart="1622" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__gir_8c_1a9dfcb5e35f21480da87176251db08cd4" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* GIBInstNames[]</definition>
        <argsstring>[]</argsstring>
        <name>GIBInstNames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="3671" column="19" bodyfile="src/ml_gir.c" bodystart="3671" bodyend="3708"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__gir_8c_1ab69a975755ab14110b2520c0f1c489d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ptrset_insert</definition>
        <argsstring>(ptrset_t *Set, void *Ptr)</argsstring>
        <name>ptrset_insert</name>
        <param>
          <type><ref refid="structptrset__t" kindref="compound">ptrset_t</ref> *</type>
          <declname>Set</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="17" column="13" bodyfile="src/ml_gir.c" bodystart="17" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a5272f18b90666fd4f7039851075586c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ptrset_remove</definition>
        <argsstring>(ptrset_t *Set, void *Ptr)</argsstring>
        <name>ptrset_remove</name>
        <param>
          <type><ref refid="structptrset__t" kindref="compound">ptrset_t</ref> *</type>
          <declname>Set</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="42" column="13" bodyfile="src/ml_gir.c" bodystart="42" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a5072d878e913cf808c9e976844db7b20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(GirTypelibT,(MLSequenceT), &quot;typelib&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>GirTypelibT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;typelib&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="56" column="1" declfile="src/ml_gir.c" declline="56" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ac0cfbdb2f2d3b940b79562a7a1e6bb89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GITypelib *</type>
        <definition>GITypelib * ml_gir_get_typelib</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_gir_get_typelib</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="60" column="11" bodyfile="src/ml_gir.c" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a5cec099607e88367f8828ee03efe6952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ml_gir_get_namespace</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_gir_get_namespace</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="64" column="12" bodyfile="src/ml_gir.c" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ad647781cd4cc7a2a60dbe1ecb73716d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(GirBaseInfoT,(MLTypeT), &quot;base-info&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>GirBaseInfoT</type>
        </param>
        <param>
          <type>(MLTypeT)</type>
        </param>
        <param>
          <type>&quot;base-info&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="81" column="1" declfile="src/ml_gir.c" declline="81" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ad57d432fdde4305f9f9a4cb1fd32e62c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;name&quot;, GirBaseInfoT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;name&quot;</type>
        </param>
        <param>
          <type>GirBaseInfoT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="83" column="1" bodyfile="src/ml_gir.c" bodystart="83" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a78ecf91a6dad105e85a62d8afad6614d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * baseinfo_to_value</definition>
        <argsstring>(GIBaseInfo *Info)</argsstring>
        <name>baseinfo_to_value</name>
        <param>
          <type>GIBaseInfo *</type>
          <declname>Info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1125" column="19" bodyfile="src/ml_gir.c" bodystart="1125" bodyend="1188" declfile="src/ml_gir.c" declline="89" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a9325e4f6601c3230bcd7ef39eeb68ac3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void _ml_to_value</definition>
        <argsstring>(ml_value_t *Source, GValue *Dest)</argsstring>
        <name>_ml_to_value</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Source</declname>
        </param>
        <param>
          <type>GValue *</type>
          <declname>Dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1320" column="13" bodyfile="src/ml_gir.c" bodystart="1320" bodyend="1351" declfile="src/ml_gir.c" declline="90" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ad7fb2b18eca48af62a917385ad925fb4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * _value_to_ml</definition>
        <argsstring>(const GValue *Value, GIBaseInfo *Info)</argsstring>
        <name>_value_to_ml</name>
        <param>
          <type>const GValue *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>GIBaseInfo *</type>
          <declname>Info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1219" column="19" bodyfile="src/ml_gir.c" bodystart="1219" bodyend="1318" declfile="src/ml_gir.c" declline="91" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a985b55503d31552f66b88559d56c29fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void typelib_iter_value</definition>
        <argsstring>(ml_state_t *Caller, typelib_iter_t *Iter)</argsstring>
        <name>typelib_iter_value</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structtypelib__iter__t" kindref="compound">typelib_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="93" column="13" bodyfile="src/ml_gir.c" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a56f343a0dbbd2c69f549e390be014c5a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void typelib_iter_next</definition>
        <argsstring>(ml_state_t *Caller, typelib_iter_t *Iter)</argsstring>
        <name>typelib_iter_next</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structtypelib__iter__t" kindref="compound">typelib_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="98" column="13" bodyfile="src/ml_gir.c" bodystart="98" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a5d7711ff5348f5dc2e1ec7aee1bd66af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void typelib_iter_key</definition>
        <argsstring>(ml_state_t *Caller, typelib_iter_t *Iter)</argsstring>
        <name>typelib_iter_key</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structtypelib__iter__t" kindref="compound">typelib_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="104" column="13" bodyfile="src/ml_gir.c" bodystart="104" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a559fe203e565dfab34a66548b14dfbae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(TypelibIterT,(), &quot;typelib-iter&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>TypelibIterT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;typelib-iter&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="108" column="1" declfile="src/ml_gir.c" declline="108" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a2976138dbd61b8af54e6499ce759bcd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_gir_typelib</definition>
        <argsstring>(const char *Name, const char *Version)</argsstring>
        <name>ml_gir_typelib</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Version</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="111" column="12" bodyfile="src/ml_gir.c" bodystart="111" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1af670fe72c0496c0e63493dc8a27a714f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(GirTypelibT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>GirTypelibT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="121" column="1" bodyfile="src/ml_gir.c" bodystart="121" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a5db83114547750c1c441922001891a2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(GirTypelibT, MLStringT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>GirTypelibT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="125" column="1" bodyfile="src/ml_gir.c" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a97391d075bef352ec39dadb3d63a4f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(GirObjectT,(GirBaseInfoT), &quot;object-type&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>GirObjectT</type>
        </param>
        <param>
          <type>(GirBaseInfoT)</type>
        </param>
        <param>
          <type>&quot;object-type&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="157" column="1" declfile="src/ml_gir.c" declline="157" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ad759bb81d7b133079916e55e5d1e2830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(GirObjectInstanceT,(), &quot;object-instance&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>GirObjectInstanceT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;object-instance&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="160" column="1" declfile="src/ml_gir.c" declline="160" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1aa0a143674e23928e2974bddedfcb71f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>static ml_type_t * object_info_lookup</definition>
        <argsstring>(GIObjectInfo *Info)</argsstring>
        <name>object_info_lookup</name>
        <param>
          <type>GIObjectInfo *</type>
          <declname>Info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="956" column="18" bodyfile="src/ml_gir.c" bodystart="956" bodyend="976" declfile="src/ml_gir.c" declline="165" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a5b10ed440e51cd347d418156503dc463" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>static ml_type_t * interface_info_lookup</definition>
        <argsstring>(GIInterfaceInfo *Info)</argsstring>
        <name>interface_info_lookup</name>
        <param>
          <type>GIInterfaceInfo *</type>
          <declname>Info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="978" column="18" bodyfile="src/ml_gir.c" bodystart="978" bodyend="997" declfile="src/ml_gir.c" declline="166" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1af35ea6983a8ee11d512490211ca818a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>static ml_type_t * struct_info_lookup</definition>
        <argsstring>(GIStructInfo *Info)</argsstring>
        <name>struct_info_lookup</name>
        <param>
          <type>GIStructInfo *</type>
          <declname>Info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="999" column="18" bodyfile="src/ml_gir.c" bodystart="999" bodyend="1035" declfile="src/ml_gir.c" declline="167" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a61fc0683fb6e5614bb361a8fcc7cbcbc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>static ml_type_t * enum_info_lookup</definition>
        <argsstring>(GIEnumInfo *Info)</argsstring>
        <name>enum_info_lookup</name>
        <param>
          <type>GIEnumInfo *</type>
          <declname>Info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1080" column="18" bodyfile="src/ml_gir.c" bodystart="1080" bodyend="1109" declfile="src/ml_gir.c" declline="168" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a9b361a166f3a5c48a1477c66083454b4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void instance_finalize</definition>
        <argsstring>(object_instance_t *Instance, void *Data)</argsstring>
        <name>instance_finalize</name>
        <param>
          <type><ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref> *</type>
          <declname>Instance</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="170" column="13" bodyfile="src/ml_gir.c" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a764df573b71d4f2cdecb99efe4c12a61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_gir_instance_get</definition>
        <argsstring>(void *Handle, GIBaseInfo *Fallback)</argsstring>
        <name>ml_gir_instance_get</name>
        <param>
          <type>void *</type>
          <declname>Handle</declname>
        </param>
        <param>
          <type>GIBaseInfo *</type>
          <declname>Fallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="177" column="12" bodyfile="src/ml_gir.c" bodystart="177" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1aaf1043302ff2c4dcc7cfd7ef77d4154d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, GirObjectInstanceT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>GirObjectInstanceT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="223" column="1" bodyfile="src/ml_gir.c" bodystart="223" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a4c54c48418b5d8ab633c51f5198907d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(GirStructT,(GirBaseInfoT), &quot;struct-type&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>GirStructT</type>
        </param>
        <param>
          <type>(GirBaseInfoT)</type>
        </param>
        <param>
          <type>&quot;struct-type&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="246" column="1" declfile="src/ml_gir.c" declline="246" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a98071565b6b7208ac24a94d9b869390a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(GirStructInstanceT,(), &quot;struct-instance&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>GirStructInstanceT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;struct-instance&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="249" column="1" declfile="src/ml_gir.c" declline="249" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a65975dd1cb2428f877d8081a9dcc2750" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_gir_struct_instance</definition>
        <argsstring>(ml_value_t *Struct, void *Value)</argsstring>
        <name>ml_gir_struct_instance</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="252" column="12" bodyfile="src/ml_gir.c" bodystart="252" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ab86b4eba3a54d819fd0a8453a43797d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * ml_gir_struct_instance_value</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_gir_struct_instance_value</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="259" column="6" bodyfile="src/ml_gir.c" bodystart="259" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ae0d7e6280ea943c22957d8e1c04b16bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * struct_instance</definition>
        <argsstring>(struct_t *Struct, int Count, ml_value_t **Args)</argsstring>
        <name>struct_instance</name>
        <param>
          <type><ref refid="structstruct__t" kindref="compound">struct_t</ref> *</type>
          <declname>Struct</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="263" column="19" bodyfile="src/ml_gir.c" bodystart="263" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a32cd77b6880be664c3b9304cbf65dddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, GirStructInstanceT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>GirStructInstanceT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="270" column="1" bodyfile="src/ml_gir.c" bodystart="270" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a97efed788637058ea71a22270ece485e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(GirUnionT,(GirBaseInfoT), &quot;union-type&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>GirUnionT</type>
        </param>
        <param>
          <type>(GirBaseInfoT)</type>
        </param>
        <param>
          <type>&quot;union-type&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="289" column="1" declfile="src/ml_gir.c" declline="289" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a9450916e258f87481dcc31134f628c5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(GirUnionInstanceT,(), &quot;union-instance&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>GirUnionInstanceT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;union-instance&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="292" column="1" declfile="src/ml_gir.c" declline="292" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1af2b781d5c6d46de60d240adb1bac927c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_gir_union_instance</definition>
        <argsstring>(ml_value_t *Union, void *Value)</argsstring>
        <name>ml_gir_union_instance</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Union</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="295" column="12" bodyfile="src/ml_gir.c" bodystart="295" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a8c1533aa28735d8d00b7dc685ec6cc67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * ml_gir_union_instance_value</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_gir_union_instance_value</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="302" column="6" bodyfile="src/ml_gir.c" bodystart="302" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ab0d95fb498af10aefcc43b816606b5a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * union_instance</definition>
        <argsstring>(union_t *Union, int Count, ml_value_t **Args)</argsstring>
        <name>union_instance</name>
        <param>
          <type><ref refid="structunion__t" kindref="compound">union_t</ref> *</type>
          <declname>Union</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="306" column="19" bodyfile="src/ml_gir.c" bodystart="306" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1aa2c96b032d6bbd1ba911e9576814950e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, GirUnionInstanceT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>GirUnionInstanceT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="313" column="1" bodyfile="src/ml_gir.c" bodystart="313" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a92698cd85012e80a3daeb8146d456114" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(GirFieldRefT,(), &quot;field-ref&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>GirFieldRefT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;field-ref&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="327" column="1" declfile="src/ml_gir.c" declline="327" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a3aed56584d1fa54334d662e725f81f6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FIELD_REF</definition>
        <argsstring>(Boolean, boolean, gboolean, ml_boolean(Value), ml_boolean_value(Value))</argsstring>
        <name>FIELD_REF</name>
        <param>
          <type>Boolean</type>
        </param>
        <param>
          <type>boolean</type>
        </param>
        <param>
          <type>gboolean</type>
        </param>
        <param>
          <type>ml_boolean(Value)</type>
        </param>
        <param>
          <type>ml_boolean_value(Value)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="348" column="1" declfile="src/ml_gir.c" declline="348" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a1da49f347dcf01445e16bc3ddf4ab141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FIELD_REF</definition>
        <argsstring>(Int8, int8, gint8, ml_integer(Value), ml_integer_value(Value))</argsstring>
        <name>FIELD_REF</name>
        <param>
          <type>Int8</type>
        </param>
        <param>
          <type>int8</type>
        </param>
        <param>
          <type>gint8</type>
        </param>
        <param>
          <type>ml_integer(Value)</type>
        </param>
        <param>
          <type>ml_integer_value(Value)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="349" column="1" declfile="src/ml_gir.c" declline="349" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a8a5928ccd512e207d657b3b4abbf99df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FIELD_REF</definition>
        <argsstring>(UInt8, uint8, guint8, ml_integer(Value), ml_integer_value(Value))</argsstring>
        <name>FIELD_REF</name>
        <param>
          <type>UInt8</type>
        </param>
        <param>
          <type>uint8</type>
        </param>
        <param>
          <type>guint8</type>
        </param>
        <param>
          <type>ml_integer(Value)</type>
        </param>
        <param>
          <type>ml_integer_value(Value)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="350" column="1" declfile="src/ml_gir.c" declline="350" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a0638c3df448a1a42853b8a5a57d3f931" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FIELD_REF</definition>
        <argsstring>(Int16, int16, gint16, ml_integer(Value), ml_integer_value(Value))</argsstring>
        <name>FIELD_REF</name>
        <param>
          <type>Int16</type>
        </param>
        <param>
          <type>int16</type>
        </param>
        <param>
          <type>gint16</type>
        </param>
        <param>
          <type>ml_integer(Value)</type>
        </param>
        <param>
          <type>ml_integer_value(Value)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="351" column="1" declfile="src/ml_gir.c" declline="351" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ab3f69ffdd85a1ca36b52058fdf2aba1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FIELD_REF</definition>
        <argsstring>(UInt16, uint16, guint16, ml_integer(Value), ml_integer_value(Value))</argsstring>
        <name>FIELD_REF</name>
        <param>
          <type>UInt16</type>
        </param>
        <param>
          <type>uint16</type>
        </param>
        <param>
          <type>guint16</type>
        </param>
        <param>
          <type>ml_integer(Value)</type>
        </param>
        <param>
          <type>ml_integer_value(Value)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="352" column="1" declfile="src/ml_gir.c" declline="352" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ac0becceab68e3d5bcafec2abba5fad3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FIELD_REF</definition>
        <argsstring>(Int32, int32, gint32, ml_integer(Value), ml_integer_value(Value))</argsstring>
        <name>FIELD_REF</name>
        <param>
          <type>Int32</type>
        </param>
        <param>
          <type>int32</type>
        </param>
        <param>
          <type>gint32</type>
        </param>
        <param>
          <type>ml_integer(Value)</type>
        </param>
        <param>
          <type>ml_integer_value(Value)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="353" column="1" declfile="src/ml_gir.c" declline="353" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1af0b433f8835495672a62f1c76adfe69b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FIELD_REF</definition>
        <argsstring>(UInt32, uint32, guint32, ml_integer(Value), ml_integer_value(Value))</argsstring>
        <name>FIELD_REF</name>
        <param>
          <type>UInt32</type>
        </param>
        <param>
          <type>uint32</type>
        </param>
        <param>
          <type>guint32</type>
        </param>
        <param>
          <type>ml_integer(Value)</type>
        </param>
        <param>
          <type>ml_integer_value(Value)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="354" column="1" declfile="src/ml_gir.c" declline="354" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a607f5cb4dda22e9ca4789e165fd1ae02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FIELD_REF</definition>
        <argsstring>(Int64, int64, gint64, ml_integer(Value), ml_integer_value(Value))</argsstring>
        <name>FIELD_REF</name>
        <param>
          <type>Int64</type>
        </param>
        <param>
          <type>int64</type>
        </param>
        <param>
          <type>gint64</type>
        </param>
        <param>
          <type>ml_integer(Value)</type>
        </param>
        <param>
          <type>ml_integer_value(Value)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="355" column="1" declfile="src/ml_gir.c" declline="355" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ace81e9380dbc27b02b8d2f9954f47736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FIELD_REF</definition>
        <argsstring>(UInt64, uint64, guint64, ml_integer(Value), ml_integer_value(Value))</argsstring>
        <name>FIELD_REF</name>
        <param>
          <type>UInt64</type>
        </param>
        <param>
          <type>uint64</type>
        </param>
        <param>
          <type>guint64</type>
        </param>
        <param>
          <type>ml_integer(Value)</type>
        </param>
        <param>
          <type>ml_integer_value(Value)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="356" column="1" declfile="src/ml_gir.c" declline="356" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a7fbda4c1deafbb0996ad6b4f0c44e9cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FIELD_REF</definition>
        <argsstring>(Float, float, gfloat, ml_real(Value), ml_real_value(Value))</argsstring>
        <name>FIELD_REF</name>
        <param>
          <type>Float</type>
        </param>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>gfloat</type>
        </param>
        <param>
          <type>ml_real(Value)</type>
        </param>
        <param>
          <type>ml_real_value(Value)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="357" column="1" declfile="src/ml_gir.c" declline="357" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1aa30a0052c77db8c977e4b6d487233c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FIELD_REF</definition>
        <argsstring>(Double, double, gdouble, ml_real(Value), ml_real_value(Value))</argsstring>
        <name>FIELD_REF</name>
        <param>
          <type>Double</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>gdouble</type>
        </param>
        <param>
          <type>ml_real(Value)</type>
        </param>
        <param>
          <type>ml_real_value(Value)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="358" column="1" declfile="src/ml_gir.c" declline="358" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1aec620e7b43c8610a5452d42c3a7289f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FIELD_REF</definition>
        <argsstring>(Utf8, utf8, gchar *, ml_string(Value, -1),(char *) ml_string_value(Value))</argsstring>
        <name>FIELD_REF</name>
        <param>
          <type>Utf8</type>
        </param>
        <param>
          <type>utf8</type>
        </param>
        <param>
          <type>gchar *</type>
        </param>
        <param>
          <type>ml_string(Value, -1)</type>
        </param>
        <param>
          <type>(char *) ml_string_value(Value)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="359" column="1" declfile="src/ml_gir.c" declline="359" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a5cffdc4f939ebed2f9abeb36962ea435" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * struct_field_ref</definition>
        <argsstring>(GIFieldInfo *Info, int Count, ml_value_t **Args)</argsstring>
        <name>struct_field_ref</name>
        <param>
          <type>GIFieldInfo *</type>
          <declname>Info</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="361" column="19" bodyfile="src/ml_gir.c" bodystart="361" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a61ec54a46c8d052cbfa00d4bd8855322" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * union_field_ref</definition>
        <argsstring>(GIFieldInfo *Info, int Count, ml_value_t **Args)</argsstring>
        <name>union_field_ref</name>
        <param>
          <type>GIFieldInfo *</type>
          <declname>Info</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="418" column="19" bodyfile="src/ml_gir.c" bodystart="418" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a83006cc145a9211eaba79f6ae0488e61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(GirEnumT,(GirBaseInfoT), &quot;enum-type&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>GirEnumT</type>
        </param>
        <param>
          <type>(GirBaseInfoT)</type>
        </param>
        <param>
          <type>&quot;enum-type&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="497" column="1" declfile="src/ml_gir.c" declline="497" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1acf98b761fb241c6b7df5e7d2bc30304b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(GirEnumValueT,(), &quot;enum-value&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>GirEnumValueT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;enum-value&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="500" column="1" declfile="src/ml_gir.c" declline="500" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a317f53f92d8abc0e786ce21b6b6f9033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>gint64</type>
        <definition>gint64 ml_gir_enum_value_value</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_gir_enum_value_value</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="503" column="8" bodyfile="src/ml_gir.c" bodystart="503" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1afecc4f1964f009a215dd2a2f58bfa910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, GirEnumValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>GirEnumValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="507" column="1" bodyfile="src/ml_gir.c" bodystart="507" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a152151f8948c2381321c91cf91f072fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLIntegerT, GirEnumValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>GirEnumValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="516" column="1" bodyfile="src/ml_gir.c" bodystart="516" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a22d7b09931040733c620e28423eec7e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;|&quot;, GirEnumValueT, MLNilT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;|&quot;</type>
        </param>
        <param>
          <type>GirEnumValueT</type>
        </param>
        <param>
          <type>MLNilT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="523" column="1" bodyfile="src/ml_gir.c" bodystart="523" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ad016992e83ddc48af67cc2f6c57eac08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;|&quot;, MLNilT, GirEnumValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;|&quot;</type>
        </param>
        <param>
          <type>MLNilT</type>
        </param>
        <param>
          <type>GirEnumValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="530" column="1" bodyfile="src/ml_gir.c" bodystart="530" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ad892396ba15a10d8d7fcc034e6095b11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;|&quot;, GirEnumValueT, GirEnumValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;|&quot;</type>
        </param>
        <param>
          <type>GirEnumValueT</type>
        </param>
        <param>
          <type>GirEnumValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="537" column="1" bodyfile="src/ml_gir.c" bodystart="537" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a770bed1abf81c24034444e17270c2431" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * gir_enum_value</definition>
        <argsstring>(enum_t *Type, int64_t Value)</argsstring>
        <name>gir_enum_value</name>
        <param>
          <type><ref refid="structenum__t" kindref="compound">enum_t</ref> *</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="559" column="19" bodyfile="src/ml_gir.c" bodystart="559" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ad94377c3c0b8d4637094d9d5959a0f72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_gir_enum_value</definition>
        <argsstring>(ml_value_t *Enum, gint64 Value)</argsstring>
        <name>ml_gir_enum_value</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Enum</declname>
        </param>
        <param>
          <type>gint64</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="580" column="12" bodyfile="src/ml_gir.c" bodystart="580" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a018fcdf156a145d1aed5d263ba84ec1e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t array_element_size</definition>
        <argsstring>(GITypeInfo *Info)</argsstring>
        <name>array_element_size</name>
        <param>
          <type>GITypeInfo *</type>
          <declname>Info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="584" column="15" bodyfile="src/ml_gir.c" bodystart="584" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a0a2cfbeaf718d7e654313d211caa5f61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * argument_to_ml</definition>
        <argsstring>(GIArgument *Argument, GITypeInfo *TypeInfo, GICallableInfo *Info, GIArgument *ArgsOut)</argsstring>
        <name>argument_to_ml</name>
        <param>
          <type>GIArgument *</type>
          <declname>Argument</declname>
        </param>
        <param>
          <type>GITypeInfo *</type>
          <declname>TypeInfo</declname>
        </param>
        <param>
          <type>GICallableInfo *</type>
          <declname>Info</declname>
        </param>
        <param>
          <type>GIArgument *</type>
          <declname>ArgsOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="647" column="19" bodyfile="src/ml_gir.c" bodystart="647" bodyend="820" declfile="src/ml_gir.c" declline="619" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a3b5185890407259abd0aac6f054d75df" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t get_output_length</definition>
        <argsstring>(GICallableInfo *Info, int Index, GIArgument *ArgsOut)</argsstring>
        <name>get_output_length</name>
        <param>
          <type>GICallableInfo *</type>
          <declname>Info</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <param>
          <type>GIArgument *</type>
          <declname>ArgsOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="623" column="15" bodyfile="src/ml_gir.c" bodystart="623" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a2546934577a91d95e6cb77aa81cc7a2b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void hashtable_to_map</definition>
        <argsstring>(gpointer KeyPtr, gpointer ValuePtr, hashtable_to_map_t *Info)</argsstring>
        <name>hashtable_to_map</name>
        <param>
          <type>gpointer</type>
          <declname>KeyPtr</declname>
        </param>
        <param>
          <type>gpointer</type>
          <declname>ValuePtr</declname>
        </param>
        <param>
          <type><ref refid="structhashtable__to__map__t" kindref="compound">hashtable_to_map_t</ref> *</type>
          <declname>Info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="639" column="13" bodyfile="src/ml_gir.c" bodystart="639" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a4eb8d2b55f8e745d9657f34cfcfcad7a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * function_info_compile</definition>
        <argsstring>(GIFunctionInfo *Info)</argsstring>
        <name>function_info_compile</name>
        <param>
          <type>GIFunctionInfo *</type>
          <declname>Info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="3125" column="19" bodyfile="src/ml_gir.c" bodystart="3125" bodyend="3669" declfile="src/ml_gir.c" declline="824" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a756c076e3fc65932a6d92b76bee885fc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void method_register</definition>
        <argsstring>(const char *Name, GIFunctionInfo *Info, ml_type_t *Object)</argsstring>
        <name>method_register</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type>GIFunctionInfo *</type>
          <declname>Info</declname>
        </param>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="826" column="13" bodyfile="src/ml_gir.c" bodystart="826" bodyend="862"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a7bf3b54fe2529a1d33d99306dcf4779e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void interface_add_signals</definition>
        <argsstring>(object_t *Object, GIInterfaceInfo *Info)</argsstring>
        <name>interface_add_signals</name>
        <param>
          <type><ref refid="structobject__t" kindref="compound">object_t</ref> *</type>
          <declname>Object</declname>
        </param>
        <param>
          <type>GIInterfaceInfo *</type>
          <declname>Info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="864" column="13" bodyfile="src/ml_gir.c" bodystart="864" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1abac737e802e40af8a8e1ca92c67480ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void interface_add_methods</definition>
        <argsstring>(object_t *Object, GIInterfaceInfo *Info)</argsstring>
        <name>interface_add_methods</name>
        <param>
          <type><ref refid="structobject__t" kindref="compound">object_t</ref> *</type>
          <declname>Object</declname>
        </param>
        <param>
          <type>GIInterfaceInfo *</type>
          <declname>Info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="873" column="13" bodyfile="src/ml_gir.c" bodystart="873" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ae8a060759c998fbbf2b1ef0587947018" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void object_add_signals</definition>
        <argsstring>(object_t *Object, GIObjectInfo *Info)</argsstring>
        <name>object_add_signals</name>
        <param>
          <type><ref refid="structobject__t" kindref="compound">object_t</ref> *</type>
          <declname>Object</declname>
        </param>
        <param>
          <type>GIObjectInfo *</type>
          <declname>Info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="888" column="13" bodyfile="src/ml_gir.c" bodystart="888" bodyend="895"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1afeee432265f2847ecaa46f7568356cf9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void object_add_methods</definition>
        <argsstring>(object_t *Object, GIObjectInfo *Info)</argsstring>
        <name>object_add_methods</name>
        <param>
          <type><ref refid="structobject__t" kindref="compound">object_t</ref> *</type>
          <declname>Object</declname>
        </param>
        <param>
          <type>GIObjectInfo *</type>
          <declname>Info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="897" column="13" bodyfile="src/ml_gir.c" bodystart="897" bodyend="925"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1acd42279462af1c6cc5e3bea3e1ecd7f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * object_instance</definition>
        <argsstring>(object_t *Object, int Count, ml_value_t **Args)</argsstring>
        <name>object_instance</name>
        <param>
          <type><ref refid="structobject__t" kindref="compound">object_t</ref> *</type>
          <declname>Object</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="929" column="19" bodyfile="src/ml_gir.c" bodystart="929" bodyend="954"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1afedd6d6dbd5e7b4f0ddb3be2652bf28e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>static ml_type_t * union_info_lookup</definition>
        <argsstring>(GIUnionInfo *Info)</argsstring>
        <name>union_info_lookup</name>
        <param>
          <type>GIUnionInfo *</type>
          <declname>Info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1037" column="18" bodyfile="src/ml_gir.c" bodystart="1037" bodyend="1072"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a3243485621ecb94047e921814e13e31c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * constant_info_lookup</definition>
        <argsstring>(GIConstantInfo *Info)</argsstring>
        <name>constant_info_lookup</name>
        <param>
          <type>GIConstantInfo *</type>
          <declname>Info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1111" column="19" bodyfile="src/ml_gir.c" bodystart="1111" bodyend="1121"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a505631f34fc739a1a177384b0420715a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>static ml_type_t * callback_info_lookup</definition>
        <argsstring>(GICallbackInfo *Info)</argsstring>
        <name>callback_info_lookup</name>
        <param>
          <type>GICallbackInfo *</type>
          <declname>Info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="2487" column="18" bodyfile="src/ml_gir.c" bodystart="2487" bodyend="2492" declfile="src/ml_gir.c" declline="1123" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1aaf1ab6fb259312644177794284a10d04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_gir_import</definition>
        <argsstring>(ml_value_t *Typelib, const char *Name)</argsstring>
        <name>ml_gir_import</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Typelib</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1190" column="12" bodyfile="src/ml_gir.c" bodystart="1190" bodyend="1198"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a392e617e5cc3124ff0de9b09d8e6e038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;::&quot;, GirTypelibT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;::&quot;</type>
        </param>
        <param>
          <type>GirTypelibT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1200" column="1" bodyfile="src/ml_gir.c" bodystart="1200" bodyend="1206"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a42e249dcc74cf220f9ffabc7876713f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void typelib_iterate</definition>
        <argsstring>(ml_state_t *Caller, typelib_t *Typelib)</argsstring>
        <name>typelib_iterate</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structtypelib__t" kindref="compound">typelib_t</ref> *</type>
          <declname>Typelib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1208" column="13" bodyfile="src/ml_gir.c" bodystart="1208" bodyend="1217"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a5912ec87874363d82e68cda02474f34c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void gir_closure_marshal</definition>
        <argsstring>(GClosure *Closure, GValue *Dest, guint NumArgs, const GValue *Args, gpointer Hint, void *Data)</argsstring>
        <name>gir_closure_marshal</name>
        <param>
          <type>GClosure *</type>
          <declname>Closure</declname>
        </param>
        <param>
          <type>GValue *</type>
          <declname>Dest</declname>
        </param>
        <param>
          <type>guint</type>
          <declname>NumArgs</declname>
        </param>
        <param>
          <type>const GValue *</type>
          <declname>Args</declname>
        </param>
        <param>
          <type>gpointer</type>
          <declname>Hint</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1361" column="13" bodyfile="src/ml_gir.c" bodystart="1361" bodyend="1401"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a468c68e83a4f259b593a0187fb57c056" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void gir_closure_finalize</definition>
        <argsstring>(gir_closure_info_t *Info, GClosure *Closure)</argsstring>
        <name>gir_closure_finalize</name>
        <param>
          <type><ref refid="structgir__closure__info__t" kindref="compound">gir_closure_info_t</ref> *</type>
          <declname>Info</declname>
        </param>
        <param>
          <type>GClosure *</type>
          <declname>Closure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1403" column="13" bodyfile="src/ml_gir.c" bodystart="1403" bodyend="1407"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a8e69bf936062c462bd8f77ac69d48928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;connect&quot;, GirObjectInstanceT, MLStringT, MLFunctionT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;connect&quot;</type>
        </param>
        <param>
          <type>GirObjectInstanceT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1409" column="1" bodyfile="src/ml_gir.c" bodystart="1409" bodyend="1438"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a49f27bfcb2762875e81370f19e247917" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;disconnect&quot;, GirObjectInstanceT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;disconnect&quot;</type>
        </param>
        <param>
          <type>GirObjectInstanceT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1440" column="1" bodyfile="src/ml_gir.c" bodystart="1440" bodyend="1445"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1adb8972c2a264bb98390f326859a1807b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * object_property_deref</definition>
        <argsstring>(object_property_t *Property)</argsstring>
        <name>object_property_deref</name>
        <param>
          <type><ref refid="structobject__property__t" kindref="compound">object_property_t</ref> *</type>
          <declname>Property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1453" column="19" bodyfile="src/ml_gir.c" bodystart="1453" bodyend="1460"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a8ecc321302f02548f09802ae00bd9bbf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void object_property_assign</definition>
        <argsstring>(ml_state_t *Caller, object_property_t *Property, ml_value_t *Value0)</argsstring>
        <name>object_property_assign</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structobject__property__t" kindref="compound">object_property_t</ref> *</type>
          <declname>Property</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1462" column="13" bodyfile="src/ml_gir.c" bodystart="1462" bodyend="1468"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a0902f381a34d24f6f29fb42b3b59d0ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(GirObjectPropertyT,(), &quot;object-property&quot;,.deref=(void *) object_property_deref,.assign=(void *) object_property_assign)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>GirObjectPropertyT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;object-property&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>deref</declname>
          <defval>(void *) object_property_deref</defval>
        </param>
        <param>
          <type>.</type>
          <declname>assign</declname>
          <defval>(void *) object_property_assign</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1470" column="1" declfile="src/ml_gir.c" declline="1470" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a1155d0781549328c91877fa4c61f66fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;::&quot;, GirObjectInstanceT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;::&quot;</type>
        </param>
        <param>
          <type>GirObjectInstanceT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1475" column="1" bodyfile="src/ml_gir.c" bodystart="1475" bodyend="1485"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ae07572803240c1ff178466056def87e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_INTERFACE</definition>
        <argsstring>(GirInstanceT,(), &quot;instance&quot;)</argsstring>
        <name>ML_INTERFACE</name>
        <param>
          <type>GirInstanceT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;instance&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1487" column="1" declfile="src/ml_gir.c" declline="1487" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1aa438438f64e0c44ca6e9e08b49799418" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void instance_constructor_fn</definition>
        <argsstring>(ml_state_t *Caller, ml_gir_type_t *Class, int Count, ml_value_t **Args)</argsstring>
        <name>instance_constructor_fn</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__gir__type__t" kindref="compound">ml_gir_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1493" column="13" bodyfile="src/ml_gir.c" bodystart="1493" bodyend="1495"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1af5f61e4eca93bd3b37b5f9b82b19518c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_GIR_TYPELIB</definition>
        <argsstring>(Gio, &quot;Gio&quot;, NULL)</argsstring>
        <name>ML_GIR_TYPELIB</name>
        <param>
          <type>Gio</type>
        </param>
        <param>
          <type>&quot;Gio&quot;</type>
        </param>
        <param>
          <type>NULL</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1547" column="1" declfile="src/ml_gir.c" declline="1547" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a9181be43bc28eb52e5a3dbe9d0b659a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__gio__callback__t" kindref="compound">ml_gio_callback_t</ref> *</type>
        <definition>static ml_gio_callback_t * ml_gio_callback</definition>
        <argsstring>(ml_state_t *Caller)</argsstring>
        <name>ml_gio_callback</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1559" column="26" bodyfile="src/ml_gir.c" bodystart="1559" bodyend="1572"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1abdfbf8cc2cc58fd2d9c37538159ae155" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
        <definition>static ml_state_t * ml_gio_callback_use</definition>
        <argsstring>(ml_gio_callback_t *Callback)</argsstring>
        <name>ml_gio_callback_use</name>
        <param>
          <type><ref refid="structml__gio__callback__t" kindref="compound">ml_gio_callback_t</ref> *</type>
          <declname>Callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1574" column="19" bodyfile="src/ml_gir.c" bodystart="1574" bodyend="1581"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a618b9092f0ec8e28c85ead5b646dcf75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_GIR_IMPORT</definition>
        <argsstring>(GInputStreamT, Gio, &quot;InputStream&quot;)</argsstring>
        <name>ML_GIR_IMPORT</name>
        <param>
          <type>GInputStreamT</type>
        </param>
        <param>
          <type>Gio</type>
        </param>
        <param>
          <type>&quot;InputStream&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1583" column="1" declfile="src/ml_gir.c" declline="1583" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a92e5e5b4cc4be0c5e5d13e545174fbff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void g_input_stream_callback</definition>
        <argsstring>(GObject *Object, GAsyncResult *Result, gpointer Data)</argsstring>
        <name>g_input_stream_callback</name>
        <param>
          <type>GObject *</type>
          <declname>Object</declname>
        </param>
        <param>
          <type>GAsyncResult *</type>
          <declname>Result</declname>
        </param>
        <param>
          <type>gpointer</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1585" column="13" bodyfile="src/ml_gir.c" bodystart="1585" bodyend="1592"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a65abd3f4f4c9c290c6adcf2dd5747510" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_stream_read,(ml_type_t *) GInputStreamT, ml_state_t *Caller, object_instance_t *Value, void *Address, int Count)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_stream_read</type>
        </param>
        <param>
          <type>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *)</type>
          <declname>GInputStreamT</declname>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1594" column="13" bodyfile="src/ml_gir.c" bodystart="1594" bodyend="1597"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a10d41f6763d360dab801151d3b74b9cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_GIR_IMPORT</definition>
        <argsstring>(GOutputStreamT, Gio, &quot;OutputStream&quot;)</argsstring>
        <name>ML_GIR_IMPORT</name>
        <param>
          <type>GOutputStreamT</type>
        </param>
        <param>
          <type>Gio</type>
        </param>
        <param>
          <type>&quot;OutputStream&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1599" column="1" declfile="src/ml_gir.c" declline="1599" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a6ffb466f955c6fabf430442eb1aa7aa8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void g_output_stream_callback</definition>
        <argsstring>(GObject *Object, GAsyncResult *Result, gpointer Data)</argsstring>
        <name>g_output_stream_callback</name>
        <param>
          <type>GObject *</type>
          <declname>Object</declname>
        </param>
        <param>
          <type>GAsyncResult *</type>
          <declname>Result</declname>
        </param>
        <param>
          <type>gpointer</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1601" column="13" bodyfile="src/ml_gir.c" bodystart="1601" bodyend="1609"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a3b36b666155aa2501a4a0be64d7be72a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_stream_write,(ml_type_t *) GOutputStreamT, ml_state_t *Caller, object_instance_t *Value, void *Address, int Count)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_stream_write</type>
        </param>
        <param>
          <type>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *)</type>
          <declname>GOutputStreamT</declname>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1611" column="13" bodyfile="src/ml_gir.c" bodystart="1611" bodyend="1614"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a2a5051a41dd850fdbe1872445c81476d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_gir_loop_init</definition>
        <argsstring>(ml_context_t *Context)</argsstring>
        <name>ml_gir_loop_init</name>
        <param>
          <type><ref refid="structml__context__t" kindref="compound">ml_context_t</ref> *</type>
          <declname>Context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1624" column="6" bodyfile="src/ml_gir.c" bodystart="1624" bodyend="1630"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a84cf23e6320f30fd979eb2f548a56755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_gir_loop_run</definition>
        <argsstring>()</argsstring>
        <name>ml_gir_loop_run</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1632" column="6" bodyfile="src/ml_gir.c" bodystart="1632" bodyend="1634"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a2da3eb76546912b655e8af57183bf1bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_gir_loop_quit</definition>
        <argsstring>()</argsstring>
        <name>ml_gir_loop_quit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1636" column="6" bodyfile="src/ml_gir.c" bodystart="1636" bodyend="1638"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a15386b120f905b51eb159ad70c074bb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>VALUE_CONVERTOR</definition>
        <argsstring>(boolean, boolean)</argsstring>
        <name>VALUE_CONVERTOR</name>
        <param>
          <type>boolean</type>
        </param>
        <param>
          <type>boolean</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1702" column="1" declfile="src/ml_gir.c" declline="1702" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ad93593a0cefbb15ccf589cb47998d0de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>VALUE_CONVERTOR</definition>
        <argsstring>(int8, integer)</argsstring>
        <name>VALUE_CONVERTOR</name>
        <param>
          <type>int8</type>
        </param>
        <param>
          <type>integer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1703" column="1" declfile="src/ml_gir.c" declline="1703" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a6bec06c196b649c980e16fe55986ef58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>VALUE_CONVERTOR</definition>
        <argsstring>(int16, integer)</argsstring>
        <name>VALUE_CONVERTOR</name>
        <param>
          <type>int16</type>
        </param>
        <param>
          <type>integer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1705" column="1" declfile="src/ml_gir.c" declline="1705" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1aec0233a810fb2333da4a109732e676fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>VALUE_CONVERTOR</definition>
        <argsstring>(int32, integer)</argsstring>
        <name>VALUE_CONVERTOR</name>
        <param>
          <type>int32</type>
        </param>
        <param>
          <type>integer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1707" column="1" declfile="src/ml_gir.c" declline="1707" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a881d17bf08a8be851083fbad67cb5ea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>VALUE_CONVERTOR</definition>
        <argsstring>(int64, integer)</argsstring>
        <name>VALUE_CONVERTOR</name>
        <param>
          <type>int64</type>
        </param>
        <param>
          <type>integer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1709" column="1" declfile="src/ml_gir.c" declline="1709" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a328b228e9111e61fb24ecdad5912de24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>VALUE_CONVERTOR</definition>
        <argsstring>(float, real)</argsstring>
        <name>VALUE_CONVERTOR</name>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>real</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1711" column="1" declfile="src/ml_gir.c" declline="1711" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a81f1ab9dfface0543a5d2cd447ba0c7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>VALUE_CONVERTOR</definition>
        <argsstring>(double, real)</argsstring>
        <name>VALUE_CONVERTOR</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>real</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1712" column="1" declfile="src/ml_gir.c" declline="1712" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ae6fdc4b00123597ad871f0e5f317dbdb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * string_to_array</definition>
        <argsstring>(ml_value_t *Value, void *Ptr)</argsstring>
        <name>string_to_array</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1714" column="19" bodyfile="src/ml_gir.c" bodystart="1714" bodyend="1723"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a08530bac4627830c6435c091351b4960" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * string_to_glist</definition>
        <argsstring>(ml_value_t *Value, void **Ptr)</argsstring>
        <name>string_to_glist</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>Ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1725" column="19" bodyfile="src/ml_gir.c" bodystart="1725" bodyend="1734"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a791b082a34b8f018e10c512e0861c52f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * string_to_value</definition>
        <argsstring>(void *Ptr, void *Aux)</argsstring>
        <name>string_to_value</name>
        <param>
          <type>void *</type>
          <declname>Ptr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Aux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1736" column="19" bodyfile="src/ml_gir.c" bodystart="1736" bodyend="1738"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a12e41111ead5ee7689c73f4015e86484" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * gtype_to_array</definition>
        <argsstring>(ml_value_t *Value, void *Ptr)</argsstring>
        <name>gtype_to_array</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1740" column="19" bodyfile="src/ml_gir.c" bodystart="1740" bodyend="1762"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a72291fbfb00118230a6b4d3b9363694a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * gtype_to_glist</definition>
        <argsstring>(ml_value_t *Value, void **Ptr)</argsstring>
        <name>gtype_to_glist</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>Ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1764" column="19" bodyfile="src/ml_gir.c" bodystart="1764" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ae84776de0c672aba156e912ac851de79" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * gtype_to_value</definition>
        <argsstring>(void *Ptr, void *Aux)</argsstring>
        <name>gtype_to_value</name>
        <param>
          <type>void *</type>
          <declname>Ptr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Aux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1788" column="19" bodyfile="src/ml_gir.c" bodystart="1788" bodyend="1790"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a761333535ab448a8db44166fac77101a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * unknown_to_value</definition>
        <argsstring>(void *Ptr, void *Aux)</argsstring>
        <name>unknown_to_value</name>
        <param>
          <type>void *</type>
          <declname>Ptr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Aux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1832" column="19" bodyfile="src/ml_gir.c" bodystart="1832" bodyend="1834"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a31bdee8c4ed501e4f7729b50603fbee4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void to_gvalue</definition>
        <argsstring>(ml_value_t *Source, GValue *Dest)</argsstring>
        <name>to_gvalue</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Source</declname>
        </param>
        <param>
          <type>GValue *</type>
          <declname>Dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1836" column="13" bodyfile="src/ml_gir.c" bodystart="1836" bodyend="1867"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a331906d7a5e6ce32e024d5bb26f653d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(GirCallbackT,(GirBaseInfoT), &quot;callback-type&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>GirCallbackT</type>
        </param>
        <param>
          <type>(GirBaseInfoT)</type>
        </param>
        <param>
          <type>&quot;callback-type&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1889" column="1" declfile="src/ml_gir.c" declline="1889" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a33b6b621ad01537939327ac9c3b4efe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(GirCallbackInstanceT,(), &quot;callback-instance&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>GirCallbackInstanceT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;callback-instance&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1892" column="1" declfile="src/ml_gir.c" declline="1892" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1af6a24d2e8815976191af5bbb16e61dd0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * convert_string</definition>
        <argsstring>(void *Arg)</argsstring>
        <name>convert_string</name>
        <param>
          <type>void *</type>
          <declname>Arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1895" column="19" bodyfile="src/ml_gir.c" bodystart="1895" bodyend="1897"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ab2605d03a5f6e83d207776bf3bf9a46f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * convert_gtype</definition>
        <argsstring>(void *Arg)</argsstring>
        <name>convert_gtype</name>
        <param>
          <type>void *</type>
          <declname>Arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1899" column="19" bodyfile="src/ml_gir.c" bodystart="1899" bodyend="1901"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a6c06d24d4cb5287e38640e817b246396" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void callback_fn</definition>
        <argsstring>(ffi_cif *Cif, void *Return, void **Params, callback_instance_t *Instance)</argsstring>
        <name>callback_fn</name>
        <param>
          <type>ffi_cif *</type>
          <declname>Cif</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Return</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>Params</declname>
        </param>
        <param>
          <type><ref refid="structcallback__instance__t" kindref="compound">callback_instance_t</ref> *</type>
          <declname>Instance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="1907" column="13" bodyfile="src/ml_gir.c" bodystart="1907" bodyend="2137"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1adb5d3a68d5b3053ac4fff1c4d698d163" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>static ml_type_t * callback_info_compile</definition>
        <argsstring>(const char *TypeName, GICallbackInfo *Info)</argsstring>
        <name>callback_info_compile</name>
        <param>
          <type>const char *</type>
          <declname>TypeName</declname>
        </param>
        <param>
          <type>GICallbackInfo *</type>
          <declname>Info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="2183" column="18" bodyfile="src/ml_gir.c" bodystart="2183" bodyend="2485"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a39ddfa6fc70eac99c804c2005ed33428" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ptr_to_value</definition>
        <argsstring>(gi_inst_t **Inst, void **Aux, ptr_to_value_t *Convert)</argsstring>
        <name>ptr_to_value</name>
        <param>
          <type><ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref> **</type>
          <declname>Inst</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>Aux</declname>
        </param>
        <param>
          <type><ref refid="structptr__to__value__t" kindref="compound">ptr_to_value_t</ref> *</type>
          <declname>Convert</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="2502" column="13" bodyfile="src/ml_gir.c" bodystart="2502" bodyend="2558"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a998dec25b3af520b00ad7d808bbaabd1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ghash_to_map</definition>
        <argsstring>(gpointer Key, gpointer Value, ghash_to_map_t *Convert)</argsstring>
        <name>ghash_to_map</name>
        <param>
          <type>gpointer</type>
          <declname>Key</declname>
        </param>
        <param>
          <type>gpointer</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structghash__to__map__t" kindref="compound">ghash_to_map_t</ref> *</type>
          <declname>Convert</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="2576" column="13" bodyfile="src/ml_gir.c" bodystart="2576" bodyend="2581"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a211fb05cb4e588ee5d645b6620ba9685" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void gir_function_call</definition>
        <argsstring>(ml_state_t *Caller, gir_function_t *Function, int Count, ml_value_t **Args)</argsstring>
        <name>gir_function_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structgir__function__t" kindref="compound">gir_function_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="2583" column="13" bodyfile="src/ml_gir.c" bodystart="2583" bodyend="3055"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a44b1f9565b9e4c55ce5ed043d73a38c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(GirFunctionT,(MLFunctionT), &quot;gir::function&quot;,.call=(void *) gir_function_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>GirFunctionT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;gir::function&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) gir_function_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="3057" column="1" declfile="src/ml_gir.c" declline="3057" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a0906be3410b33999415a5fc99ac87433" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_method_wrap, GirFunctionT, ml_value_t *Function, int Count, ml_type_t **Types)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_method_wrap</type>
        </param>
        <param>
          <type>GirFunctionT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> **</type>
          <declname>Types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="3061" column="20" bodyfile="src/ml_gir.c" bodystart="3061" bodyend="3063"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a43e3c26044386aeb34a9081e917b1446" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void type_param_size</definition>
        <argsstring>(GITypeInfo *Info, int Index, int *Size, int *NumAux)</argsstring>
        <name>type_param_size</name>
        <param>
          <type>GITypeInfo *</type>
          <declname>Info</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>Size</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>NumAux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="3065" column="13" bodyfile="src/ml_gir.c" bodystart="3065" bodyend="3073"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1ae0fb832149229a8d411350a906e3c28b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void type_param_inst</definition>
        <argsstring>(GITypeInfo *Info, int Index, gi_inst_t **Inst, int *NumAux, void **Aux)</argsstring>
        <name>type_param_inst</name>
        <param>
          <type>GITypeInfo *</type>
          <declname>Info</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <param>
          <type><ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref> **</type>
          <declname>Inst</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>NumAux</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>Aux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="3075" column="13" bodyfile="src/ml_gir.c" bodystart="3075" bodyend="3123"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a1fce66fc20d169da519baa58287f0f5a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void type_list</definition>
        <argsstring>(ml_stringbuffer_t *Buffer, gi_inst_t **Inst, void **Aux)</argsstring>
        <name>type_list</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type><ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref> **</type>
          <declname>Inst</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>Aux</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="3710" column="13" bodyfile="src/ml_gir.c" bodystart="3710" bodyend="3723"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a7a075d472b180d237f51512cd84bee51" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void callback_list</definition>
        <argsstring>(ml_stringbuffer_t *Buffer, callback_t *Callback, const char *Indent)</argsstring>
        <name>callback_list</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type><ref refid="structcallback__t" kindref="compound">callback_t</ref> *</type>
          <declname>Callback</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Indent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="3725" column="13" bodyfile="src/ml_gir.c" bodystart="3725" bodyend="3788"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a30b4167f35daf6b390cc311b2f1cb402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;list&quot;, GirCallbackT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;list&quot;</type>
        </param>
        <param>
          <type>GirCallbackT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="3790" column="1" bodyfile="src/ml_gir.c" bodystart="3790" bodyend="3795"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1aab38f7813eded2b05b26f242bde08924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;list&quot;, GirFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;list&quot;</type>
        </param>
        <param>
          <type>GirFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="3797" column="1" bodyfile="src/ml_gir.c" bodystart="3797" bodyend="3872"/>
      </memberdef>
      <memberdef kind="function" id="ml__gir_8c_1a381b8fd55f3b3faec6f9a33e56854897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_gir_init</definition>
        <argsstring>(stringmap_t *Globals)</argsstring>
        <name>ml_gir_init</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_gir.c" line="3874" column="6" bodyfile="src/ml_gir.c" bodystart="3874" bodyend="3903"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ml_gir.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;girffi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;gir&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="structptrset__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Ptrs;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size;</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}<sp/><ref refid="structptrset__t" kindref="compound">ptrset_t</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTRSET_INIT<sp/>{NULL,<sp/>0}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTRSET_INITIAL_SIZE<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ptrset_insert(<ref refid="structptrset__t" kindref="compound">ptrset_t</ref><sp/>*Set,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Ptr)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Set-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Ptrs<sp/>=<sp/>anew(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>PTRSET_INITIAL_SIZE);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ptrs[PTRSET_INITIAL_SIZE<sp/>-<sp/>1]<sp/>=<sp/>Ptr;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set-&gt;Ptrs<sp/>=<sp/>Ptrs;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set-&gt;Size<sp/>=<sp/>PTRSET_INITIAL_SIZE;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Slot<sp/>=<sp/>Set-&gt;Ptrs,<sp/>**Space<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Set-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Slot)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*Slot<sp/>==<sp/>Ptr)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*Slot)<sp/>Space<sp/>=<sp/>Slot;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Space)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Space<sp/>=<sp/>Ptr;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Set-&gt;Size<sp/>+<sp/>PTRSET_INITIAL_SIZE;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Ptrs<sp/>=<sp/>anew(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/>Size);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(Ptrs,<sp/>Set-&gt;Ptrs,<sp/>Set-&gt;Size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>Ptrs[Set-&gt;Size]<sp/>=<sp/>Ptr;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>Set-&gt;Ptrs<sp/>=<sp/>Ptrs;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>Set-&gt;Size<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ptrset_remove(<ref refid="structptrset__t" kindref="compound">ptrset_t</ref><sp/>*Set,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Ptr)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Slot<sp/>=<sp/>Set-&gt;Ptrs;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Set-&gt;Size;<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Slot)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*Slot<sp/>==<sp/>Ptr)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Slot<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="structtypelib__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>GITypelib<sp/>*Handle;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Namespace;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}<sp/><ref refid="structtypelib__t" kindref="compound">typelib_t</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">ML_TYPE(GirTypelibT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;typelib&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//@gir</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>gobject-introspection<sp/>typelib.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">GITypelib<sp/>*ml_gir_get_typelib(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structtypelib__t" kindref="compound">typelib_t</ref><sp/>*)Value)-&gt;Handle;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_gir_get_namespace(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structtypelib__t" kindref="compound">typelib_t</ref><sp/>*)Value)-&gt;Namespace;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="structtypelib__iter__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>GITypelib<sp/>*Handle;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Namespace;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*Current;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/>Total;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}<sp/><ref refid="structtypelib__iter__t" kindref="compound">typelib_iter_t</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="structbaseinfo__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>Type;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*Info;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}<sp/><ref refid="structbaseinfo__t" kindref="compound">baseinfo_t</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">ML_TYPE(GirBaseInfoT,<sp/>(MLTypeT),<sp/></highlight><highlight class="stringliteral">&quot;base-info&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>GirBaseInfoT)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbaseinfo__t" kindref="compound">baseinfo_t</ref><sp/>*Info<sp/>=<sp/>(<ref refid="structbaseinfo__t" kindref="compound">baseinfo_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>g_base_info_get_name(Info-&gt;Info);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string_copy(Name,<sp/>strlen(Name));</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*baseinfo_to_value(GIBaseInfo<sp/>*Info);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_ml_to_value(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Source,<sp/>GValue<sp/>*Dest);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*_value_to_ml(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GValue<sp/>*Value,<sp/>GIBaseInfo<sp/>*Info);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>typelib_iter_value(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structtypelib__iter__t" kindref="compound">typelib_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Type<sp/>=<sp/>g_info_type_to_string(g_base_info_get_type(Iter-&gt;Current));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(Caller,<sp/>ml_string(Type,<sp/>-1));</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>typelib_iter_next(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structtypelib__iter__t" kindref="compound">typelib_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Iter-&gt;Index<sp/>&gt;=<sp/>Iter-&gt;Total)<sp/>ML_CONTINUE(Caller,<sp/>MLNil);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Current<sp/>=<sp/>g_irepository_get_info(NULL,<sp/>Iter-&gt;Namespace,<sp/>Iter-&gt;Index);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>typelib_iter_key(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structtypelib__iter__t" kindref="compound">typelib_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(Caller,<sp/>ml_string(g_base_info_get_name(Iter-&gt;Current),<sp/>-1));</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">ML_TYPE(TypelibIterT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;typelib-iter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_gir_typelib(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Version)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtypelib__t" kindref="compound">typelib_t</ref><sp/>*Typelib<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structtypelib__t" kindref="compound">typelib_t</ref>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>Typelib-&gt;Type<sp/>=<sp/>GirTypelibT;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>Typelib-&gt;Namespace<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>GError<sp/>*Error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>Typelib-&gt;Handle<sp/>=<sp/>g_irepository_require(NULL,<sp/>Typelib-&gt;Namespace,<sp/>Version,<sp/>0,<sp/>&amp;Error);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Typelib-&gt;Handle)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;GirError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>Error-&gt;message);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Typelib;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">ML_METHOD(GirTypelibT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_gir_typelib(ml_string_value(Args[0]),<sp/>NULL);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">ML_METHOD(GirTypelibT,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_gir_typelib(ml_string_value(Args[0]),<sp/>ml_string_value(Args[1]));</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_LIBRARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_library.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">ML_TYPE(GirModuleT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;gir::module&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">ML_VALUE(GirModule,<sp/>GirModuleT);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/>GirModuleT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>GC_strdup(ml_string_value(Args[1]));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Version<sp/>=<sp/>strchr(Name,<sp/></highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Version)<sp/>*Version++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_gir_typelib(Name,<sp/>Version);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="structobject__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>GIObjectInfo<sp/>*Info;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>Signals[1];</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}<sp/><ref refid="structobject__t" kindref="compound">object_t</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="structobject__instance__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structobject__t" kindref="compound">object_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Handle;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structptrset__t" kindref="compound">ptrset_t</ref><sp/>Handlers[1];</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}<sp/><ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">ML_TYPE(GirObjectT,<sp/>(GirBaseInfoT),<sp/></highlight><highlight class="stringliteral">&quot;object-type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>gobject-introspection<sp/>object<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">ML_TYPE(GirObjectInstanceT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;object-instance&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>gobject-introspection<sp/>object<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*ObjectInstanceNil;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*object_info_lookup(GIObjectInfo<sp/>*Info);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*interface_info_lookup(GIInterfaceInfo<sp/>*Info);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*struct_info_lookup(GIStructInfo<sp/>*Info);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*enum_info_lookup(GIEnumInfo<sp/>*Info);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>instance_finalize(<ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*Instance,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>g_object_unref(Instance-&gt;Handle);</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GQuark<sp/>MLQuark;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GType<sp/>MLType;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_gir_instance_get(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Handle,<sp/>GIBaseInfo<sp/>*Fallback)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(Handle<sp/>==<sp/>0)<sp/>return<sp/>(ml_value_t<sp/>*)ObjectInstanceNil;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Handle<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*Instance<sp/>=<sp/>(<ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*)g_object_get_qdata(Handle,<sp/>MLQuark);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Instance)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Instance;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>Instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>Instance-&gt;Handle<sp/>=<sp/>Handle;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>g_object_ref_sink(Handle);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_register_finalizer(Instance,<sp/>(GC_finalization_proc)instance_finalize,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>GType<sp/>Type<sp/>=<sp/>G_OBJECT_TYPE(Handle);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*Info<sp/>=<sp/>g_irepository_find_by_gtype(NULL,<sp/>Type);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Info)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_base_info_get_type(Info))<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_OBJECT:<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Type<sp/>=<sp/>(<ref refid="structobject__t" kindref="compound">object_t</ref><sp/>*)object_info_lookup((GIObjectInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Type<sp/>=<sp/>(<ref refid="structobject__t" kindref="compound">object_t</ref><sp/>*)interface_info_lookup((GIInterfaceInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;NotImplemented&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>able<sp/>to<sp/>marshal<sp/>%s<sp/>yet<sp/>at<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>g_base_info_get_name(Info),<sp/>__LINE__);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_object_set_qdata(Handle,<sp/>MLQuark,<sp/>Instance);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Fallback)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_base_info_get_type(Fallback))<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_OBJECT:<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Type<sp/>=<sp/>(<ref refid="structobject__t" kindref="compound">object_t</ref><sp/>*)object_info_lookup((GIObjectInfo<sp/>*)Fallback);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Type<sp/>=<sp/>(<ref refid="structobject__t" kindref="compound">object_t</ref><sp/>*)interface_info_lookup((GIInterfaceInfo<sp/>*)Fallback);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;NotImplemented&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>able<sp/>to<sp/>marshal<sp/>%s<sp/>yet<sp/>at<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>g_base_info_get_name(Fallback),<sp/>__LINE__);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;UnknownType&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Type<sp/>%s<sp/>not<sp/>found&quot;</highlight><highlight class="normal">,<sp/>g_type_name(Type));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Instance;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>GirObjectInstanceT)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//&lt;Object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*Instance<sp/>=<sp/>(<ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Instance<sp/>==<sp/>ObjectInstanceNil)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;nil-object&quot;</highlight><highlight class="normal">,<sp/>6);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)Instance-&gt;Type-&gt;Info));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="structstruct__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>GIStructInfo<sp/>*Info;</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}<sp/><ref refid="structstruct__t" kindref="compound">struct_t</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="structstruct__instance__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstruct__t" kindref="compound">struct_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}<sp/><ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">ML_TYPE(GirStructT,<sp/>(GirBaseInfoT),<sp/></highlight><highlight class="stringliteral">&quot;struct-type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>gobject-introspection<sp/>struct<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">ML_TYPE(GirStructInstanceT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;struct-instance&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>gobject-introspection<sp/>struct<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_gir_struct_instance(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Struct,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref><sp/>*Instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>Instance-&gt;Type<sp/>=<sp/>(<ref refid="structstruct__t" kindref="compound">struct_t</ref><sp/>*)Struct;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>Instance-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Instance;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ml_gir_struct_instance_value(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*struct_instance(<ref refid="structstruct__t" kindref="compound">struct_t</ref><sp/>*Struct,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref><sp/>*Instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>Instance-&gt;Type<sp/>=<sp/>Struct;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>Instance-&gt;Value<sp/>=<sp/>GC_MALLOC(g_struct_info_get_size(Struct-&gt;Info));</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Instance;</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>GirStructInstanceT)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//&lt;Struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref><sp/>*Instance<sp/>=<sp/>(<ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)Instance-&gt;Type-&gt;Info));</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="structunion__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>GIUnionInfo<sp/>*Info;</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}<sp/><ref refid="structunion__t" kindref="compound">union_t</ref>;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="structunion__instance__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structunion__t" kindref="compound">union_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value;</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}<sp/><ref refid="structunion__instance__t" kindref="compound">union_instance_t</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal">ML_TYPE(GirUnionT,<sp/>(GirBaseInfoT),<sp/></highlight><highlight class="stringliteral">&quot;union-type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>gobject-introspection<sp/>struct<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal">ML_TYPE(GirUnionInstanceT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;union-instance&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>gobject-introspection<sp/>struct<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_gir_union_instance(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Union,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunion__instance__t" kindref="compound">union_instance_t</ref><sp/>*Instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structunion__instance__t" kindref="compound">union_instance_t</ref>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>Instance-&gt;Type<sp/>=<sp/>(<ref refid="structunion__t" kindref="compound">union_t</ref><sp/>*)Union;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>Instance-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Instance;</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ml_gir_union_instance_value(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structunion__instance__t" kindref="compound">union_instance_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*union_instance(<ref refid="structunion__t" kindref="compound">union_t</ref><sp/>*Union,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunion__instance__t" kindref="compound">union_instance_t</ref><sp/>*Instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structunion__instance__t" kindref="compound">union_instance_t</ref>);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>Instance-&gt;Type<sp/>=<sp/>Union;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>Instance-&gt;Value<sp/>=<sp/>GC_MALLOC(g_union_info_get_size(Union-&gt;Info));</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Instance;</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>GirUnionInstanceT)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//&lt;Union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunion__instance__t" kindref="compound">union_instance_t</ref><sp/>*Instance<sp/>=<sp/>(<ref refid="structunion__instance__t" kindref="compound">union_instance_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)Instance-&gt;Type-&gt;Info));</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="structfield__ref__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfield__ref__t" kindref="compound">field_ref_t</ref><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}<sp/><ref refid="structfield__ref__t" kindref="compound">field_ref_t</ref>;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">ML_TYPE(GirFieldRefT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;field-ref&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">//@gir::fieldref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FIELD_REF(UNAME,<sp/>LNAME,<sp/>GTYPE,<sp/>GETTER,<sp/>SETTER)<sp/>\</highlight></codeline>
<codeline lineno="331"><highlight class="preprocessor">static<sp/>ml_value_t<sp/>*field_ref_<sp/>##<sp/>LNAME<sp/>##<sp/>_deref(field_ref_t<sp/>*Ref)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="332"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTYPE<sp/>Value<sp/>=<sp/>*(GTYPE<sp/>*)Ref-&gt;Address;<sp/>\</highlight></codeline>
<codeline lineno="333"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>GETTER;<sp/>\</highlight></codeline>
<codeline lineno="334"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="335"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="336"><highlight class="preprocessor">static<sp/>void<sp/>field_ref_<sp/>##<sp/>LNAME<sp/>##<sp/>_assign(ml_state_t<sp/>*Caller,<sp/>field_ref_t<sp/>*Ref,<sp/>ml_value_t<sp/>*Value)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="337"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTYPE<sp/>*Address<sp/>=<sp/>(GTYPE<sp/>*)Ref-&gt;Address;<sp/>\</highlight></codeline>
<codeline lineno="338"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>*Address<sp/>=<sp/>SETTER;<sp/>\</highlight></codeline>
<codeline lineno="339"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ML_RETURN(Value);<sp/>\</highlight></codeline>
<codeline lineno="340"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="341"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="342"><highlight class="preprocessor">ML_TYPE(GirFieldRef<sp/>##<sp/>UNAME<sp/>##<sp/>T,<sp/>(GirFieldRefT),<sp/>&quot;field-ref-&quot;<sp/>#LNAME,<sp/>\</highlight></codeline>
<codeline lineno="343"><highlight class="preprocessor"></highlight><highlight class="comment">/*@gir::fieldref-LNAME</highlight></codeline>
<codeline lineno="344"><highlight class="comment">*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="345"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.deref<sp/>=<sp/>(void<sp/>*)field_ref_<sp/>##<sp/>LNAME<sp/>##<sp/>_deref,<sp/>\</highlight></codeline>
<codeline lineno="346"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.assign<sp/>=<sp/>(void<sp/>*)field_ref_<sp/>##<sp/>LNAME<sp/>##<sp/>_assign<sp/>\</highlight></codeline>
<codeline lineno="347"><highlight class="preprocessor">);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">FIELD_REF(Boolean,<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal">,<sp/>gboolean,<sp/>ml_boolean(Value),<sp/>ml_boolean_value(Value));</highlight></codeline>
<codeline lineno="350"><highlight class="normal">FIELD_REF(Int8,<sp/>int8,<sp/>gint8,<sp/>ml_integer(Value),<sp/>ml_integer_value(Value));</highlight></codeline>
<codeline lineno="351"><highlight class="normal">FIELD_REF(UInt8,<sp/>uint8,<sp/>guint8,<sp/>ml_integer(Value),<sp/>ml_integer_value(Value));</highlight></codeline>
<codeline lineno="352"><highlight class="normal">FIELD_REF(Int16,<sp/>int16,<sp/>gint16,<sp/>ml_integer(Value),<sp/>ml_integer_value(Value));</highlight></codeline>
<codeline lineno="353"><highlight class="normal">FIELD_REF(UInt16,<sp/>uint16,<sp/>guint16,<sp/>ml_integer(Value),<sp/>ml_integer_value(Value));</highlight></codeline>
<codeline lineno="354"><highlight class="normal">FIELD_REF(Int32,<sp/>int32,<sp/>gint32,<sp/>ml_integer(Value),<sp/>ml_integer_value(Value));</highlight></codeline>
<codeline lineno="355"><highlight class="normal">FIELD_REF(UInt32,<sp/>uint32,<sp/>guint32,<sp/>ml_integer(Value),<sp/>ml_integer_value(Value));</highlight></codeline>
<codeline lineno="356"><highlight class="normal">FIELD_REF(Int64,<sp/>int64,<sp/>gint64,<sp/>ml_integer(Value),<sp/>ml_integer_value(Value));</highlight></codeline>
<codeline lineno="357"><highlight class="normal">FIELD_REF(UInt64,<sp/>uint64,<sp/>guint64,<sp/>ml_integer(Value),<sp/>ml_integer_value(Value));</highlight></codeline>
<codeline lineno="358"><highlight class="normal">FIELD_REF(Float,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>gfloat,<sp/>ml_real(Value),<sp/>ml_real_value(Value));</highlight></codeline>
<codeline lineno="359"><highlight class="normal">FIELD_REF(Double,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>gdouble,<sp/>ml_real(Value),<sp/>ml_real_value(Value));</highlight></codeline>
<codeline lineno="360"><highlight class="normal">FIELD_REF(Utf8,<sp/>utf8,<sp/>gchar<sp/>*,<sp/>ml_string(Value,<sp/>-1),<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_string_value(Value));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*struct_field_ref(GIFieldInfo<sp/>*Info,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref><sp/>*Instance<sp/>=<sp/>(<ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfield__ref__t" kindref="compound">field_ref_t</ref><sp/>*Ref<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structfield__ref__t" kindref="compound">field_ref_t</ref>);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>Ref-&gt;Address<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Instance-&gt;Value<sp/>+<sp/>g_field_info_get_offset(Info);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>GITypeInfo<sp/>*TypeInfo<sp/>=<sp/>g_field_info_get_type(Info);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(TypeInfo))<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_VOID:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_BOOLEAN:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefBooleanT;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT8:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefInt8T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT8:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefUInt8T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT16:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefInt16T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT16:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefUInt16T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT32:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefInt32T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT32:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefUInt32T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT64:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefInt64T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT64:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefUInt64T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_FLOAT:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefFloatT;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_DOUBLE:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefDoubleT;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GTYPE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UTF8:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefUtf8T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_FILENAME:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefUtf8T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ARRAY:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*InterfaceInfo<sp/>=<sp/>g_type_info_get_interface(TypeInfo);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_base_info_get_type(InterfaceInfo))<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INVALID:</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INVALID_0:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FUNCTION:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_CALLBACK:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_STRUCT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_BOXED:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_ENUM:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FLAGS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_OBJECT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INTERFACE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_CONSTANT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_UNION:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_VALUE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_SIGNAL:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_VFUNC:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_PROPERTY:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FIELD:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_ARG:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_TYPE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_UNRESOLVED:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GLIST:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GSLIST:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GHASH:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ERROR:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UNICHAR:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Ref;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*union_field_ref(GIFieldInfo<sp/>*Info,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structunion__instance__t" kindref="compound">union_instance_t</ref><sp/>*Instance<sp/>=<sp/>(<ref refid="structunion__instance__t" kindref="compound">union_instance_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfield__ref__t" kindref="compound">field_ref_t</ref><sp/>*Ref<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structfield__ref__t" kindref="compound">field_ref_t</ref>);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>Ref-&gt;Address<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Instance-&gt;Value<sp/>+<sp/>g_field_info_get_offset(Info);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>GITypeInfo<sp/>*TypeInfo<sp/>=<sp/>g_field_info_get_type(Info);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(TypeInfo))<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_VOID:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_BOOLEAN:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefBooleanT;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT8:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefInt8T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT8:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefUInt8T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT16:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefInt16T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT16:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefUInt16T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT32:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefInt32T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT32:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefUInt32T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT64:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefInt64T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT64:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefUInt64T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_FLOAT:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefFloatT;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_DOUBLE:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefDoubleT;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GTYPE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UTF8:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefUtf8T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_FILENAME:<sp/>Ref-&gt;Type<sp/>=<sp/>GirFieldRefUtf8T;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ARRAY:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*InterfaceInfo<sp/>=<sp/>g_type_info_get_interface(TypeInfo);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_base_info_get_type(InterfaceInfo))<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INVALID:</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INVALID_0:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FUNCTION:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_CALLBACK:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_STRUCT:<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref><sp/>*Instance2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref>);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance2-&gt;Type<sp/>=<sp/>(<ref refid="structstruct__t" kindref="compound">struct_t</ref><sp/>*)struct_info_lookup((GIStructInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance2-&gt;Value<sp/>=<sp/>Instance-&gt;Value;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Instance2;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_BOXED:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_ENUM:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FLAGS:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_OBJECT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INTERFACE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_CONSTANT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_UNION:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_VALUE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_SIGNAL:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_VFUNC:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_PROPERTY:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FIELD:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_ARG:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_TYPE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_UNRESOLVED:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GLIST:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GSLIST:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GHASH:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ERROR:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UNICHAR:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TodoError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Field<sp/>ref<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Ref;</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structenum__t" kindref="compound">enum_t</ref><sp/><ref refid="structenum__t" kindref="compound">enum_t</ref>;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/><ref refid="structenum__value__t" kindref="compound">enum_value_t</ref>;</highlight></codeline>
<codeline lineno="485" refid="structenum__t" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>GIEnumInfo<sp/>*Info;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*ByIndex[];</highlight></codeline>
<codeline lineno="490"><highlight class="normal">};</highlight></codeline>
<codeline lineno="491" refid="structenum__value__t" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Name;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>gint64<sp/>Value;</highlight></codeline>
<codeline lineno="496"><highlight class="normal">};</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal">ML_TYPE(GirEnumT,<sp/>(GirBaseInfoT),<sp/></highlight><highlight class="stringliteral">&quot;enum-type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>gobject-instrospection<sp/>enum<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal">ML_TYPE(GirEnumValueT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;enum-value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>gobject-instrospection<sp/>enum<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal">gint64<sp/>ml_gir_enum_value_value(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>GirEnumValueT)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*Value<sp/>=<sp/>(<ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>ml_string_value(Value-&gt;Name),<sp/>ml_string_length(Value-&gt;Name));</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal">ML_METHOD(MLIntegerT,<sp/>GirEnumValueT)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*Value<sp/>=<sp/>(<ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Value-&gt;Value);</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">,<sp/>GirEnumValueT,<sp/>MLNilT)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">//&gt;EnumValueT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">,<sp/>MLNilT,<sp/>GirEnumValueT)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//&gt;EnumValueT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">,<sp/>GirEnumValueT,<sp/>GirEnumValueT)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">//&gt;EnumValueT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Type<sp/>!=<sp/>B-&gt;Type)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Flags<sp/>are<sp/>of<sp/>different<sp/>types&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*C<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structenum__value__t" kindref="compound">enum_value_t</ref>);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Type<sp/>=<sp/>A-&gt;Type;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>LengthA<sp/>=<sp/>ml_string_length(A-&gt;Name);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>LengthB<sp/>=<sp/>ml_string_length(B-&gt;Name);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>LengthA<sp/>+<sp/>LengthB<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(Name,<sp/>ml_string_value(A-&gt;Name),<sp/>LengthA);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>Name[LengthA]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(Name<sp/>+<sp/>LengthA<sp/>+<sp/>1,<sp/>ml_string_value(B-&gt;Name),<sp/>LengthB);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>Name[Length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Name<sp/>=<sp/>ml_string(Name,<sp/>Length);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Value<sp/>=<sp/>A-&gt;Value<sp/>|<sp/>B-&gt;Value;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*gir_enum_value(<ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*Type,<sp/>int64_t<sp/>Value)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>**Ptr<sp/>=<sp/>Type-&gt;ByIndex;<sp/>Value<sp/>&amp;&amp;<sp/>*Ptr;<sp/>++Ptr)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Ptr[0]-&gt;Value<sp/>==<sp/>Value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Ptr[0];</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*Enum<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structenum__value__t" kindref="compound">enum_value_t</ref>);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Type<sp/>=<sp/>Type;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>**Ptr<sp/>=<sp/>Type-&gt;ByIndex;<sp/>Value<sp/>&amp;&amp;<sp/>*Ptr;<sp/>++Ptr)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Ptr[0]-&gt;Value<sp/>&amp;<sp/>Value)<sp/>==<sp/>Ptr[0]-&gt;Value)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>&amp;=<sp/>~Ptr[0]-&gt;Value;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Length)<sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Ptr[0]-&gt;Name);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_string_length(Ptr[0]-&gt;Name);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Name,<sp/>Length);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Name<sp/>=<sp/>ml_stringbuffer_get_value(Buffer);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Enum;</highlight></codeline>
<codeline lineno="579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_gir_enum_value(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Enum,<sp/>gint64<sp/>Value)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gir_enum_value((<ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*)Enum,<sp/>Value);</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>array_element_size(GITypeInfo<sp/>*Info)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(Info))<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_VOID:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_BOOLEAN:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gboolean);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT8:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint8);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT8:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint8);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT16:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint16);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT16:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint16);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT32:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint32);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT32:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint32);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT64:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint64);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT64:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint64);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_FLOAT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gfloat);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_DOUBLE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gdouble);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GTYPE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GType);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UTF8:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_FILENAME:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ARRAY:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INTERFACE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GLIST:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GList<sp/>*);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GSLIST:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GSList<sp/>*);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GHASH:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GHashTable<sp/>*);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ERROR:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GError<sp/>*);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UNICHAR:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gunichar);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="612" refid="structml__gir__callback__t" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>GICallbackInfo<sp/>*Info;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>ffi_cif<sp/>Cif[1];</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}<sp/><ref refid="structml__gir__callback__t" kindref="compound">ml_gir_callback_t</ref>;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*argument_to_ml(GIArgument<sp/>*Argument,<sp/>GITypeInfo<sp/>*TypeInfo,<sp/>GICallableInfo<sp/>*Info,<sp/>GIArgument<sp/>*ArgsOut);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GIBaseInfo<sp/>*GValueInfo;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_output_length(GICallableInfo<sp/>*Info,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/>GIArgument<sp/>*ArgsOut)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Index;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIArgInfo<sp/>*ArgInfo<sp/>=<sp/>g_callable_info_get_arg((GICallableInfo<sp/>*)Info,<sp/>I);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_arg_info_get_direction(ArgInfo)<sp/>!=<sp/>GI_DIRECTION_IN)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++ArgsOut;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((GIArgument<sp/>*)ArgsOut-&gt;v_pointer)-&gt;v_uint64;</highlight></codeline>
<codeline lineno="632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="633" refid="structhashtable__to__map__t" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>GITypeInfo<sp/>*KeyInfo;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>GITypeInfo<sp/>*ValueInfo;</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}<sp/><ref refid="structhashtable__to__map__t" kindref="compound">hashtable_to_map_t</ref>;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hashtable_to_map(gpointer<sp/>KeyPtr,<sp/>gpointer<sp/>ValuePtr,<sp/><ref refid="structhashtable__to__map__t" kindref="compound">hashtable_to_map_t</ref><sp/>*Info)<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>GIArgument<sp/>Argument<sp/>=<sp/>{.v_pointer<sp/>=<sp/>KeyPtr};</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key<sp/>=<sp/>argument_to_ml(&amp;Argument,<sp/>Info-&gt;KeyInfo,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>Argument.v_pointer<sp/>=<sp/>ValuePtr;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>argument_to_ml(&amp;Argument,<sp/>Info-&gt;ValueInfo,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_map_insert(Info-&gt;Result,<sp/>Key,<sp/>Value);</highlight></codeline>
<codeline lineno="646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*argument_to_ml(GIArgument<sp/>*Argument,<sp/>GITypeInfo<sp/>*TypeInfo,<sp/>GICallableInfo<sp/>*Info,<sp/>GIArgument<sp/>*ArgsOut)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(TypeInfo))<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_VOID:<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_BOOLEAN:<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_boolean(Argument-&gt;v_boolean);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT8:<sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Argument-&gt;v_int8);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT8:<sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Argument-&gt;v_uint8);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT16:<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Argument-&gt;v_int16);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT16:<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Argument-&gt;v_uint16);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT32:<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Argument-&gt;v_int32);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT32:<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Argument-&gt;v_uint32);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT64:<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Argument-&gt;v_int64);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT64:<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Argument-&gt;v_uint64);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_FLOAT:<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Argument-&gt;v_float);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_DOUBLE:<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Argument-&gt;v_double);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GTYPE:<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(g_type_name(Argument-&gt;v_size),<sp/>-1);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UTF8:</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_FILENAME:<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Argument-&gt;v_string,<sp/>-1);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ARRAY:<sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GITypeInfo<sp/>*ElementInfo<sp/>=<sp/>g_type_info_get_param_type(TypeInfo,<sp/>0);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(ElementInfo))<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT8:</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT8:<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_type_info_is_zero_terminated(TypeInfo))<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Argument-&gt;v_string,<sp/>-1);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LengthIndex<sp/>=<sp/>g_type_info_get_array_length(TypeInfo);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LengthIndex<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>=<sp/>g_type_info_get_array_fixed_size(TypeInfo);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Info)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>situtation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>=<sp/>get_output_length(Info,<sp/>LengthIndex,<sp/>ArgsOut);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Argument-&gt;v_string,<sp/>Length);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*InterfaceInfo<sp/>=<sp/>g_type_info_get_interface(TypeInfo);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;Interface<sp/>=<sp/>%s\n&quot;,<sp/>g_base_info_get_name(InterfaceInfo));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_base_info_equal(InterfaceInfo,<sp/>GValueInfo))<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_value_to_ml(Argument-&gt;v_pointer,<sp/>NULL);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_base_info_get_type(InterfaceInfo))<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INVALID:</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INVALID_0:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FUNCTION:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_CALLBACK:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_STRUCT:<sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref><sp/>*Instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref>);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Type<sp/>=<sp/>(<ref refid="structstruct__t" kindref="compound">struct_t</ref><sp/>*)struct_info_lookup((GIStructInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Value<sp/>=<sp/>Argument-&gt;v_pointer;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Instance;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_BOXED:<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_ENUM:<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*)enum_info_lookup((GIEnumInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Enum-&gt;ByIndex[Argument-&gt;v_int];</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FLAGS:<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*)enum_info_lookup((GIEnumInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gir_enum_value(Enum,<sp/>Argument-&gt;v_int);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_OBJECT:</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_gir_instance_get(Argument-&gt;v_pointer,<sp/>InterfaceInfo);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_CONSTANT:<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_UNION:<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_VALUE:<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_SIGNAL:<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_VFUNC:<sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_PROPERTY:<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FIELD:<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_ARG:<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_TYPE:<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_UNRESOLVED:<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GLIST:<sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Argument-&gt;v_pointer)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GITypeInfo<sp/>*ElementInfo<sp/>=<sp/>g_type_info_get_param_type(TypeInfo,<sp/>0);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(GList<sp/>*List<sp/>=<sp/>(GList<sp/>*)Argument-&gt;v_pointer;<sp/>List;<sp/>List<sp/>=<sp/>List-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIArgument<sp/>Element<sp/>=<sp/>{.v_pointer<sp/>=<sp/>List-&gt;data};</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Result,<sp/>argument_to_ml(&amp;Element,<sp/>ElementInfo,<sp/>NULL,<sp/>NULL));</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GSLIST:<sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Argument-&gt;v_pointer)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GITypeInfo<sp/>*ElementInfo<sp/>=<sp/>g_type_info_get_param_type(TypeInfo,<sp/>0);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(GSList<sp/>*List<sp/>=<sp/>(GSList<sp/>*)Argument-&gt;v_pointer;<sp/>List;<sp/>List<sp/>=<sp/>List-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIArgument<sp/>Element<sp/>=<sp/>{.v_pointer<sp/>=<sp/>List-&gt;data};</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Result,<sp/>argument_to_ml(&amp;Element,<sp/>ElementInfo,<sp/>NULL,<sp/>NULL));</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GHASH:<sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Argument-&gt;v_pointer)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhashtable__to__map__t" kindref="compound">hashtable_to_map_t</ref><sp/>Info<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_map(),</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_type_info_get_param_type(TypeInfo,<sp/>0),</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_type_info_get_param_type(TypeInfo,<sp/>1)</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_hash_table_foreach((GHashTable<sp/>*)Argument-&gt;v_pointer,<sp/>(GHFunc)hashtable_to_map,<sp/>&amp;Info);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Info.Result;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ERROR:<sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GError<sp/>*Error<sp/>=<sp/>Argument-&gt;v_pointer;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;GError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>Error-&gt;message);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UNICHAR:<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Argument-&gt;v_uint32);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>situtation:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)TypeInfo));</highlight></codeline>
<codeline lineno="821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GIBaseInfo<sp/>*DestroyNotifyInfo;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*function_info_compile(GIFunctionInfo<sp/>*Info);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>method_register(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/>GIFunctionInfo<sp/>*Info,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Object)<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArgs<sp/>=<sp/>g_callable_info_get_n_args((GICallableInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NArgsIn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NArgs;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIArgInfo<sp/>*ArgInfo<sp/>=<sp/>g_callable_info_get_arg((GICallableInfo<sp/>*)Info,<sp/>I);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ClosureArg<sp/>=<sp/>g_arg_info_get_closure(ArgInfo);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ClosureArg<sp/>&gt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GITypeInfo<sp/>TypeInfo[1];</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_arg_info_load_type(ArgInfo,<sp/>TypeInfo);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LengthIndex<sp/>=<sp/>g_type_info_get_array_length(TypeInfo);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LengthIndex<sp/>&gt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GITypeTag<sp/>Tag<sp/>=<sp/>g_type_info_get_tag(TypeInfo);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_arg_info_get_direction(ArgInfo))<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_DIRECTION_IN:</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_DIRECTION_INOUT:</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tag<sp/>==<sp/>GI_TYPE_TAG_INTERFACE)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*InterfaceInfo<sp/>=<sp/>g_type_info_get_interface(TypeInfo);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_base_info_equal(InterfaceInfo,<sp/>DestroyNotifyInfo))<sp/>++NArgsIn;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(InterfaceInfo);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++NArgsIn;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_DIRECTION_OUT:</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_arg_info_is_caller_allocates(ArgInfo))<sp/>++NArgsIn;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>done:</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(ArgInfo);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>++NArgsIn;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Types[NArgsIn];</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>Types[0]<sp/>=<sp/>Object;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>NArgsIn;<sp/>++I)<sp/>Types[I]<sp/>=<sp/>MLAnyT;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(!strcmp(Name,<sp/>&quot;wait&quot;))<sp/>asm(&quot;int3&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_define(ml_method(Name),<sp/>function_info_compile(Info),<sp/>NArgsIn,<sp/>0,<sp/>Types);</highlight></codeline>
<codeline lineno="863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interface_add_signals(<ref refid="structobject__t" kindref="compound">object_t</ref><sp/>*Object,<sp/>GIInterfaceInfo<sp/>*Info)<sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumSignals<sp/>=<sp/>g_interface_info_get_n_signals(Info);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumSignals;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GISignalInfo<sp/>*SignalInfo<sp/>=<sp/>g_interface_info_get_signal(Info,<sp/>I);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*SignalName<sp/>=<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)SignalInfo);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Object-&gt;Signals,<sp/>SignalName,<sp/>SignalInfo);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interface_add_methods(<ref refid="structobject__t" kindref="compound">object_t</ref><sp/>*Object,<sp/>GIInterfaceInfo<sp/>*Info)<sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>interface_add_signals(Object,<sp/>Info);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumMethods<sp/>=<sp/>g_interface_info_get_n_methods(Info);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumMethods;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIFunctionInfo<sp/>*MethodInfo<sp/>=<sp/>g_interface_info_get_method(Info,<sp/>I);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*MethodName<sp/>=<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)MethodInfo);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIFunctionInfoFlags<sp/>Flags<sp/>=<sp/>g_function_info_get_flags(MethodInfo);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>GI_FUNCTION_IS_METHOD)<sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method_register(MethodName,<sp/>MethodInfo,<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Object);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Object-&gt;Base.Exports,<sp/>MethodName,<sp/>function_info_compile(MethodInfo));</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>object_add_signals(<ref refid="structobject__t" kindref="compound">object_t</ref><sp/>*Object,<sp/>GIObjectInfo<sp/>*Info)<sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumSignals<sp/>=<sp/>g_object_info_get_n_signals(Info);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumSignals;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GISignalInfo<sp/>*SignalInfo<sp/>=<sp/>g_object_info_get_signal(Info,<sp/>I);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*SignalName<sp/>=<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)SignalInfo);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Object-&gt;Signals,<sp/>SignalName,<sp/>SignalInfo);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>object_add_methods(<ref refid="structobject__t" kindref="compound">object_t</ref><sp/>*Object,<sp/>GIObjectInfo<sp/>*Info)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>object_add_signals(Object,<sp/>Info);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>GIObjectInfo<sp/>*ParentInfo<sp/>=<sp/>g_object_info_get_parent(Info);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ParentInfo)<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>object_add_signals(Object,<sp/>ParentInfo);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Parent<sp/>=<sp/>object_info_lookup(ParentInfo);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_type_add_parent((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Object,<sp/>Parent);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParentInfo<sp/>=<sp/>g_object_info_get_parent(ParentInfo);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumInterfaces<sp/>=<sp/>g_object_info_get_n_interfaces(Info);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumInterfaces;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIInterfaceInfo<sp/>*InterfaceInfo<sp/>=<sp/>g_object_info_get_interface(Info,<sp/>I);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interface_add_signals(Object,<sp/>InterfaceInfo);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Interface<sp/>=<sp/>interface_info_lookup(InterfaceInfo);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_type_add_parent((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Object,<sp/>Interface);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumMethods<sp/>=<sp/>g_object_info_get_n_methods(Info);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumMethods;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIFunctionInfo<sp/>*MethodInfo<sp/>=<sp/>g_object_info_get_method(Info,<sp/>I);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*MethodName<sp/>=<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)MethodInfo);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIFunctionInfoFlags<sp/>Flags<sp/>=<sp/>g_function_info_get_flags(MethodInfo);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(!strcmp(MethodName,<sp/>&quot;query&quot;))<sp/>asm(&quot;int3&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>GI_FUNCTION_IS_METHOD)<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method_register(MethodName,<sp/>MethodInfo,<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Object);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Object-&gt;Base.Exports,<sp/>MethodName,<sp/>function_info_compile(MethodInfo));</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>TypeMap[1]<sp/>=<sp/>{STRINGMAP_INIT};</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*object_instance(<ref refid="structobject__t" kindref="compound">object_t</ref><sp/>*Object,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*Instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref>);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>Instance-&gt;Type<sp/>=<sp/>Object;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>GType<sp/>Type<sp/>=<sp/>g_registered_type_info_get_g_type((GIRegisteredTypeInfo<sp/>*)Object-&gt;Info);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLNamesT);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_NAMES_CHECK_ARG_COUNT(0);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumProperties<sp/>=<sp/>Count<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Names[NumProperties];</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GValue<sp/>Values[NumProperties];</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(Values,<sp/>0,<sp/>NumProperties<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GValue));</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[0],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Names[Index]<sp/>=<sp/>ml_string_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_ml_to_value(Args[Index<sp/>+<sp/>1],<sp/>Values<sp/>+<sp/>Index);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Index;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Handle<sp/>=<sp/>g_object_new_with_properties(Type,<sp/>NumProperties,<sp/>Names,<sp/>Values);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Handle<sp/>=<sp/>g_object_new_with_properties(Type,<sp/>0,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>g_object_set_qdata(Instance-&gt;Handle,<sp/>MLQuark,<sp/>Instance);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>g_object_ref_sink(Instance-&gt;Handle);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_register_finalizer(Instance,<sp/>(GC_finalization_proc)instance_finalize,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Instance;</highlight></codeline>
<codeline lineno="955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*object_info_lookup(GIObjectInfo<sp/>*Info)<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TypeName<sp/>=<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**)stringmap_slot(TypeMap,<sp/>TypeName);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structobject__t" kindref="compound">object_t</ref><sp/>*Object<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structobject__t" kindref="compound">object_t</ref>);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Object-&gt;Base.Type<sp/>=<sp/>GirObjectT;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Object-&gt;Base.Name<sp/>=<sp/>TypeName;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Object-&gt;Base.hash<sp/>=<sp/>ml_default_hash;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Object-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Object-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Object-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Object-&gt;Base.Constructor<sp/>=<sp/>ml_cfunction(Object,<sp/>(ml_callback_t)object_instance);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Object-&gt;Info<sp/>=<sp/>Info;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_ref(Info);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_type_init((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Object,<sp/>GirObjectInstanceT,<sp/>NULL);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Object;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>object_add_methods(Object,<sp/>Info);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_ref(Info);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Slot[0];</highlight></codeline>
<codeline lineno="977"><highlight class="normal">}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*interface_info_lookup(GIInterfaceInfo<sp/>*Info)<sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TypeName<sp/>=<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**)stringmap_slot(TypeMap,<sp/>TypeName);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structobject__t" kindref="compound">object_t</ref><sp/>*Object<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structobject__t" kindref="compound">object_t</ref>);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Object-&gt;Base.Type<sp/>=<sp/>GirObjectT;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Object-&gt;Base.Name<sp/>=<sp/>TypeName;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Object-&gt;Base.hash<sp/>=<sp/>ml_default_hash;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Object-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Object-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Object-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Object-&gt;Base.Constructor<sp/>=<sp/>ml_cfunction(Object,<sp/>(ml_callback_t)object_instance);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Object-&gt;Info<sp/>=<sp/>Info;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_ref(Info);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_type_init((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Object,<sp/>GirObjectInstanceT,<sp/>NULL);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Object;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interface_add_methods(Object,<sp/>Info);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Slot[0];</highlight></codeline>
<codeline lineno="998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*struct_info_lookup(GIStructInfo<sp/>*Info)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TypeName<sp/>=<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**)stringmap_slot(TypeMap,<sp/>TypeName);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstruct__t" kindref="compound">struct_t</ref><sp/>*Struct<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structstruct__t" kindref="compound">struct_t</ref>);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Struct-&gt;Base.Type<sp/>=<sp/>GirStructT;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Struct-&gt;Base.Name<sp/>=<sp/>TypeName;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Struct-&gt;Base.hash<sp/>=<sp/>ml_default_hash;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Struct-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Struct-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Struct-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Struct-&gt;Base.Constructor<sp/>=<sp/>ml_cfunction(Struct,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)struct_instance);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Struct-&gt;Info<sp/>=<sp/>Info;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_ref(Info);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_type_init((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Struct,<sp/>GirStructInstanceT,<sp/>NULL);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Struct;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumFields<sp/>=<sp/>g_struct_info_get_n_fields(Info);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumFields;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIFieldInfo<sp/>*FieldInfo<sp/>=<sp/>g_struct_info_get_field(Info,<sp/>I);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*FieldName<sp/>=<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)FieldInfo);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_method_by_name(FieldName,<sp/>FieldInfo,<sp/>(ml_callback_t)struct_field_ref,<sp/>Struct,<sp/>NULL);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumMethods<sp/>=<sp/>g_struct_info_get_n_methods(Info);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumMethods;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIFunctionInfo<sp/>*MethodInfo<sp/>=<sp/>g_struct_info_get_method(Info,<sp/>I);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*MethodName<sp/>=<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)MethodInfo);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIFunctionInfoFlags<sp/>Flags<sp/>=<sp/>g_function_info_get_flags(MethodInfo);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>GI_FUNCTION_IS_METHOD)<sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method_register(MethodName,<sp/>MethodInfo,<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Struct);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>GI_FUNCTION_IS_CONSTRUCTOR)<sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Struct-&gt;Base.Exports,<sp/>MethodName,<sp/>function_info_compile(MethodInfo));</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref((GIBaseInfo<sp/>*)MethodInfo);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Slot[0];</highlight></codeline>
<codeline lineno="1036"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*union_info_lookup(GIUnionInfo<sp/>*Info)<sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TypeName<sp/>=<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**)stringmap_slot(TypeMap,<sp/>TypeName);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structunion__t" kindref="compound">union_t</ref><sp/>*Union<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structunion__t" kindref="compound">union_t</ref>);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Union-&gt;Base.Type<sp/>=<sp/>GirUnionT;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Union-&gt;Base.Name<sp/>=<sp/>TypeName;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Union-&gt;Base.hash<sp/>=<sp/>ml_default_hash;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Union-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Union-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Union-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Union-&gt;Base.Constructor<sp/>=<sp/>ml_cfunction(Union,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)union_instance);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Union-&gt;Info<sp/>=<sp/>Info;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_ref(Info);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_type_init((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Union,<sp/>GirUnionInstanceT,<sp/>NULL);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Union;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumFields<sp/>=<sp/>g_union_info_get_n_fields(Info);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumFields;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIFieldInfo<sp/>*FieldInfo<sp/>=<sp/>g_union_info_get_field(Info,<sp/>I);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*FieldName<sp/>=<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)FieldInfo);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_method_by_name(FieldName,<sp/>FieldInfo,<sp/>(ml_callback_t)union_field_ref,<sp/>Union,<sp/>NULL);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumMethods<sp/>=<sp/>g_union_info_get_n_methods(Info);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumMethods;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIFunctionInfo<sp/>*MethodInfo<sp/>=<sp/>g_union_info_get_method(Info,<sp/>I);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*MethodName<sp/>=<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)MethodInfo);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIFunctionInfoFlags<sp/>Flags<sp/>=<sp/>g_function_info_get_flags(MethodInfo);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>GI_FUNCTION_IS_METHOD)<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method_register(MethodName,<sp/>MethodInfo,<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Union);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>GI_FUNCTION_IS_CONSTRUCTOR)<sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method_register(MethodName,<sp/>MethodInfo,<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Union);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Slot[0];</highlight></codeline>
<codeline lineno="1073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1076"><highlight class="comment">static<sp/>void<sp/>enum_iterate(ml_state_t<sp/>*Caller,<sp/>enum_t<sp/>*Enum)<sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>ml_iterate(Caller,<sp/>Enum-&gt;ByIndex);</highlight></codeline>
<codeline lineno="1078"><highlight class="comment">}</highlight></codeline>
<codeline lineno="1079"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*enum_info_lookup(GIEnumInfo<sp/>*Info)<sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TypeName<sp/>=<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**)stringmap_slot(TypeMap,<sp/>TypeName);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumValues<sp/>=<sp/>g_enum_info_get_n_values(Info);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*Enum<sp/>=<sp/>xnew(<ref refid="structenum__t" kindref="compound">enum_t</ref>,<sp/>NumValues<sp/>+<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Enum-&gt;Base.Type<sp/>=<sp/>GirEnumT;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Enum-&gt;Base.Name<sp/>=<sp/>TypeName;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Enum-&gt;Base.hash<sp/>=<sp/>ml_default_hash;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Enum-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Enum-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Enum-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Enum-&gt;Base.Rank<sp/>=<sp/>GirEnumT-&gt;Rank<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_type_init((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum,<sp/>GirEnumValueT,<sp/>NULL);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumValues;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIValueInfo<sp/>*ValueInfo<sp/>=<sp/>g_enum_info_get_value(Info,<sp/>I);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ValueName<sp/>=<sp/>GC_strdup(g_base_info_get_name((GIBaseInfo<sp/>*)ValueInfo));</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structenum__value__t" kindref="compound">enum_value_t</ref>);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Type<sp/>=<sp/>Enum;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Name<sp/>=<sp/>ml_string(ValueName,<sp/>-1);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Value<sp/>=<sp/>g_value_info_get_value(ValueInfo);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Enum-&gt;Base.Exports,<sp/>ValueName,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Value);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Enum-&gt;ByIndex[I]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(ValueInfo);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Enum-&gt;Info<sp/>=<sp/>Info;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Slot[0];</highlight></codeline>
<codeline lineno="1110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*constant_info_lookup(GIConstantInfo<sp/>*Info)<sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TypeName<sp/>=<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)stringmap_slot(TypeMap,<sp/>TypeName);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIArgument<sp/>Argument[1];</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_constant_info_get_value(Info,<sp/>Argument);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>argument_to_ml(Argument,<sp/>g_constant_info_get_type(Info),<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Slot[0];</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*callback_info_lookup(GICallbackInfo<sp/>*Info);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*baseinfo_to_value(GIBaseInfo<sp/>*Info)<sp/>{</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_base_info_get_type(Info))<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INVALID:</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INVALID_0:<sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FUNCTION:<sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function_info_compile((GIFunctionInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_CALLBACK:<sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)callback_info_lookup((GICallbackInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_STRUCT:<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)struct_info_lookup((GIStructInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_BOXED:<sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_ENUM:<sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)enum_info_lookup((GIEnumInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FLAGS:<sp/>{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)enum_info_lookup((GIEnumInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_OBJECT:<sp/>{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)object_info_lookup((GIObjectInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)interface_info_lookup((GIInterfaceInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_CONSTANT:<sp/>{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>constant_info_lookup((GIConstantInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_UNION:<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_VALUE:<sp/>{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_SIGNAL:<sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_VFUNC:<sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_PROPERTY:<sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FIELD:<sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_ARG:<sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_TYPE:<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_UNRESOLVED:<sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Unsupported<sp/>info<sp/>type:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>g_info_type_to_string(g_base_info_get_type(Info)));</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_gir_import(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Typelib,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Namespace<sp/>=<sp/>ml_gir_get_namespace(Typelib);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*Info<sp/>=<sp/>g_irepository_find_by_name(NULL,<sp/>Namespace,<sp/>Name);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Info)<sp/>{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;NameError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Symbol<sp/>%s<sp/>not<sp/>found<sp/>in<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Name,<sp/>Namespace);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>baseinfo_to_value(Info);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/>GirTypelibT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight><highlight class="comment">//&lt;Typelib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="comment">//&gt;any<sp/>|<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_gir_import(Args[0],<sp/>ml_string_value(Args[1]));</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>typelib_iterate(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structtypelib__t" kindref="compound">typelib_t</ref><sp/>*Typelib)<sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtypelib__iter__t" kindref="compound">typelib_iter_t</ref><sp/>*Iter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structtypelib__iter__t" kindref="compound">typelib_iter_t</ref>);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Type<sp/>=<sp/>TypelibIterT;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Namespace<sp/>=<sp/>Typelib-&gt;Namespace;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Handle<sp/>=<sp/>Typelib-&gt;Handle;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Total<sp/>=<sp/>g_irepository_get_n_infos(NULL,<sp/>Iter-&gt;Namespace);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Current<sp/>=<sp/>g_irepository_get_info(NULL,<sp/>Iter-&gt;Namespace,<sp/>0);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*_value_to_ml(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GValue<sp/>*Value,<sp/>GIBaseInfo<sp/>*Info)<sp/>{</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(G_VALUE_TYPE(Value))<sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>G_TYPE_NONE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>G_TYPE_CHAR:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(g_value_get_schar(Value));</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>G_TYPE_UCHAR:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(g_value_get_uchar(Value));</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>G_TYPE_BOOLEAN:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_boolean(g_value_get_boolean(Value));</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>G_TYPE_INT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(g_value_get_int(Value));</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>G_TYPE_UINT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(g_value_get_uint(Value));</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>G_TYPE_LONG:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(g_value_get_long(Value));</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>G_TYPE_ULONG:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(g_value_get_ulong(Value));</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>G_TYPE_ENUM:<sp/>{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GType<sp/>Type<sp/>=<sp/>G_VALUE_TYPE(Value);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*Info<sp/>=<sp/>g_irepository_find_by_gtype(NULL,<sp/>Type);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*)enum_info_lookup((GIEnumInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Enum-&gt;ByIndex[g_value_get_enum(Value)];</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>G_TYPE_FLAGS:<sp/><sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GType<sp/>Type<sp/>=<sp/>G_VALUE_TYPE(Value);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*Info<sp/>=<sp/>g_irepository_find_by_gtype(NULL,<sp/>Type);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*)enum_info_lookup((GIEnumInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gir_enum_value(Enum,<sp/>g_value_get_enum(Value));</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>G_TYPE_FLOAT:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(g_value_get_float(Value));</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>G_TYPE_DOUBLE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(g_value_get_double(Value));</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>G_TYPE_STRING:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(g_value_get_string(Value),<sp/>-1);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>G_TYPE_POINTER:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;<sp/></highlight><highlight class="comment">//Std$Address$new(g_value_get_pointer(Value));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(G_VALUE_HOLDS(Value,<sp/>G_TYPE_OBJECT))<sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_gir_instance_get(g_value_get_object(Value),<sp/>Info);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*InterfaceInfo<sp/>=<sp/>g_irepository_find_by_gtype(NULL,<sp/>G_VALUE_TYPE(Value));</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InterfaceInfo)<sp/>{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_base_info_get_type(InterfaceInfo))<sp/>{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INVALID:</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INVALID_0:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FUNCTION:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_CALLBACK:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_STRUCT:<sp/>{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref><sp/>*Instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref>);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Type<sp/>=<sp/>(<ref refid="structstruct__t" kindref="compound">struct_t</ref><sp/>*)struct_info_lookup((GIStructInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Value<sp/>=<sp/>g_value_get_boxed(Value);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Instance;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_BOXED:<sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_ENUM:<sp/>{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*)enum_info_lookup((GIEnumInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Enum-&gt;ByIndex[g_value_get_uint(Value)];</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FLAGS:<sp/>{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*)enum_info_lookup((GIEnumInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gir_enum_value(Enum,<sp/>g_value_get_uint(Value));</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_OBJECT:</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_gir_instance_get(g_value_get_pointer(Value),<sp/>InterfaceInfo);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_CONSTANT:<sp/>{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_UNION:<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structunion__instance__t" kindref="compound">union_instance_t</ref><sp/>*Instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structunion__instance__t" kindref="compound">union_instance_t</ref>);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Type<sp/>=<sp/>(<ref refid="structunion__t" kindref="compound">union_t</ref><sp/>*)union_info_lookup((GIUnionInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Value<sp/>=<sp/>g_value_get_boxed(Value);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Instance;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_VALUE:<sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_SIGNAL:<sp/>{</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_VFUNC:<sp/>{</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_PROPERTY:<sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FIELD:<sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_ARG:<sp/>{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_TYPE:<sp/>{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_UNRESOLVED:<sp/>{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Warning:<sp/>Unknown<sp/>parameter<sp/>type:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>G_VALUE_TYPE_NAME(Value));</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_ml_to_value(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Source,<sp/>GValue<sp/>*Dest)<sp/>{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_init(Dest,<sp/>G_TYPE_NONE);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Source,<sp/>MLBooleanT))<sp/>{</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_init(Dest,<sp/>G_TYPE_BOOLEAN);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_boolean(Dest,<sp/>ml_boolean_value(Source));</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Source,<sp/>MLIntegerT))<sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_init(Dest,<sp/>G_TYPE_LONG);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_long(Dest,<sp/>ml_integer_value(Source));</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Source,<sp/>MLDoubleT))<sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_init(Dest,<sp/>G_TYPE_DOUBLE);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_double(Dest,<sp/>ml_real_value(Source));</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Source,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_init(Dest,<sp/>G_TYPE_STRING);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_string(Dest,<sp/>ml_string_value(Source));</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Source,<sp/>GirObjectInstanceT))<sp/>{</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Object<sp/>=<sp/>((<ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*)Source)-&gt;Handle;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_init(Dest,<sp/>G_OBJECT_TYPE(Object));</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_object(Dest,<sp/>Object);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Source,<sp/>GirStructInstanceT))<sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value<sp/>=<sp/>((<ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref><sp/>*)Source)-&gt;Value;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_init(Dest,<sp/>G_TYPE_POINTER);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_object(Dest,<sp/>Value);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Source,<sp/>GirEnumValueT))<sp/>{</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*)((<ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*)Source)-&gt;Type;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GType<sp/>Type<sp/>=<sp/>g_type_from_name(g_base_info_get_name((GIBaseInfo<sp/>*)Enum-&gt;Info));</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_init(Dest,<sp/>Type);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_enum(Dest,<sp/>((<ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*)Source)-&gt;Value);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_init(Dest,<sp/>G_TYPE_NONE);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1353" refid="structgir__closure__info__t" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*Instance;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumArgs;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*Args[];</highlight></codeline>
<codeline lineno="1360"><highlight class="normal">}<sp/><ref refid="structgir__closure__info__t" kindref="compound">gir_closure_info_t</ref>;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gir_closure_marshal(GClosure<sp/>*Closure,<sp/>GValue<sp/>*Dest,<sp/>guint<sp/>NumArgs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GValue<sp/>*Args,<sp/>gpointer<sp/>Hint,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgir__closure__info__t" kindref="compound">gir_closure_info_t</ref><sp/>*Info<sp/>=<sp/>(<ref refid="structgir__closure__info__t" kindref="compound">gir_closure_info_t</ref><sp/>*)Closure-&gt;data;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*MLArgs[NumArgs];</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>MLArgs[0]<sp/>=<sp/>_value_to_ml(Args,<sp/>NULL);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(guint<sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>NumArgs;<sp/>++I)<sp/>MLArgs[I]<sp/>=<sp/>_value_to_ml(Args<sp/>+<sp/>I,<sp/>Info-&gt;Args[I]);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__result__state__t" kindref="compound">ml_result_state_t</ref><sp/>*State<sp/>=<sp/>ml_result_state(Info-&gt;Context);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_call(State,<sp/>Info-&gt;Function,<sp/>NumArgs,<sp/>MLArgs);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>GMainContext<sp/>*MainContext<sp/>=<sp/>g_main_context_default();</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!State-&gt;Value)<sp/>g_main_context_iteration(MainContext,<sp/>TRUE);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>State-&gt;Value;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>ml_error_type(Value),<sp/>ml_error_message(Value));</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Level<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ml_error_source(Value,<sp/>Level++,<sp/>&amp;Source))<sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;\t%s:%d\n&quot;</highlight><highlight class="normal">,<sp/>Source.Name,<sp/>Source.Line);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dest)<sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLBooleanT))<sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_boolean(Dest,<sp/>ml_boolean_value(Value));</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLIntegerT))<sp/>{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_long(Dest,<sp/>ml_integer_value(Value));</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLDoubleT))<sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_double(Dest,<sp/>ml_real_value(Value));</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_string(Dest,<sp/>ml_string_value(Value));</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>GirObjectInstanceT))<sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Object<sp/>=<sp/>((<ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*)Value)-&gt;Handle;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_object(Dest,<sp/>Object);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>GirStructInstanceT))<sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Struct<sp/>=<sp/>((<ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_object(Dest,<sp/>Struct);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>GirEnumValueT))<sp/>{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*)((<ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*)Value)-&gt;Type;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GType<sp/>Type<sp/>=<sp/>g_type_from_name(g_base_info_get_name((GIBaseInfo<sp/>*)Enum-&gt;Info));</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_init(Dest,<sp/>Type);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_enum(Dest,<sp/>((<ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*)Value)-&gt;Value);</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gir_closure_finalize(<ref refid="structgir__closure__info__t" kindref="compound">gir_closure_info_t</ref><sp/>*Info,<sp/>GClosure<sp/>*Closure)<sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Info-&gt;Instance)<sp/>ptrset_remove(Info-&gt;Instance-&gt;Handlers,<sp/>Info);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Info-&gt;NumArgs;<sp/>++I)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Info-&gt;Args[I])<sp/>g_base_info_unref(Info-&gt;Args[I]);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_free(Info);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;connect&quot;</highlight><highlight class="normal">,<sp/>GirObjectInstanceT,<sp/>MLStringT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight><highlight class="comment">//&lt;Object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight><highlight class="comment">//&lt;Signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="comment">//&lt;Handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="comment">//&gt;Object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*Instance<sp/>=<sp/>(<ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Signal<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>GISignalInfo<sp/>*SignalInfo<sp/>=<sp/>(GISignalInfo<sp/>*)stringmap_search(Instance-&gt;Type-&gt;Signals,<sp/>Signal);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!SignalInfo)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;NameError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Signal<sp/>%s::%s<sp/>not<sp/>found&quot;</highlight><highlight class="normal">,<sp/>Instance-&gt;Type-&gt;Base.Name,<sp/>Signal);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumArgs<sp/>=<sp/>g_callable_info_get_n_args((GICallableInfo<sp/>*)SignalInfo);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgir__closure__info__t" kindref="compound">gir_closure_info_t</ref><sp/>*Info<sp/>=<sp/>GC_malloc_uncollectable(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structgir__closure__info__t" kindref="compound">gir_closure_info_t</ref>)<sp/>+<sp/>NumArgs<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GIBaseInfo<sp/>*));</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Instance<sp/>=<sp/>Instance;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_register_disappearing_link((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)&amp;Info-&gt;Instance);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Function<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;NumArgs<sp/>=<sp/>NumArgs;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumArgs;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIArgInfo<sp/>*ArgInfo<sp/>=<sp/>g_callable_info_get_arg(SignalInfo,<sp/>I);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GITypeInfo<sp/>TypeInfo[1];</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_arg_info_load_type(ArgInfo,<sp/>TypeInfo);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Info-&gt;Args[I]<sp/>=<sp/>g_type_info_get_interface(TypeInfo);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(ArgInfo);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>ptrset_insert(Instance-&gt;Handlers,<sp/>Info);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>GClosure<sp/>*Closure<sp/>=<sp/>g_closure_new_simple(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GClosure),<sp/>Info);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>g_closure_set_marshal(Closure,<sp/>gir_closure_marshal);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/>g_closure_add_finalize_notifier(Closure,<sp/>Info,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)gir_closure_finalize);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>gulong<sp/>Id<sp/>=<sp/>g_signal_connect_closure(Instance-&gt;Handle,<sp/>Signal,<sp/>Closure,<sp/>Count<sp/>&gt;<sp/>3<sp/>&amp;&amp;<sp/>Args[3]<sp/>!=<sp/>MLNil);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Id));</highlight></codeline>
<codeline lineno="1439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;disconnect&quot;</highlight><highlight class="normal">,<sp/>GirObjectInstanceT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*Instance<sp/>=<sp/>(<ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>gulong<sp/>Id<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signal_handler_disconnect(Instance-&gt;Handle,<sp/>Id);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1447" refid="structobject__property__t" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>GObject<sp/>*Object;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal">}<sp/><ref refid="structobject__property__t" kindref="compound">object_property_t</ref>;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*object_property_deref(<ref refid="structobject__property__t" kindref="compound">object_property_t</ref><sp/>*Property)<sp/>{</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>GValue<sp/>Value[1]<sp/>=<sp/>{G_VALUE_INIT};</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>g_object_get_property(Property-&gt;Object,<sp/>Property-&gt;Name,<sp/>Value);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(G_VALUE_TYPE(Value)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;PropertyError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>property<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Property-&gt;Name);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_value_to_ml(Value,<sp/>NULL);</highlight></codeline>
<codeline lineno="1461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>object_property_assign(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structobject__property__t" kindref="compound">object_property_t</ref><sp/>*Property,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value0)<sp/>{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>GValue<sp/>Value[1];</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(Value,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GValue));</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>_ml_to_value(Value0,<sp/>Value);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>g_object_set_property(Property-&gt;Object,<sp/>Property-&gt;Name,<sp/>Value);</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Value0);</highlight></codeline>
<codeline lineno="1469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal">ML_TYPE(GirObjectPropertyT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;object-property&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>.deref<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)object_property_deref,</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>.assign<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)object_property_assign</highlight></codeline>
<codeline lineno="1474"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/>GirObjectInstanceT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight><highlight class="comment">//&lt;Object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight><highlight class="comment">//&lt;Property</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*Instance<sp/>=<sp/>(<ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structobject__property__t" kindref="compound">object_property_t</ref><sp/>*Property<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structobject__property__t" kindref="compound">object_property_t</ref>);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>Property-&gt;Type<sp/>=<sp/>GirObjectPropertyT;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>Property-&gt;Object<sp/>=<sp/>Instance-&gt;Handle;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>Property-&gt;Name<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Property;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal">ML_INTERFACE(GirInstanceT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;instance&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1489" refid="structml__gir__type__t" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal">}<sp/><ref refid="structml__gir__type__t" kindref="compound">ml_gir_type_t</ref>;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>instance_constructor_fn(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__gir__type__t" kindref="compound">ml_gir_type_t</ref><sp/>*Class,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_SCHEDULER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>gboolean<sp/>ml_gir_queue_run(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__queued__state__t" kindref="compound">ml_queued_state_t</ref><sp/>QueuedState<sp/>=<sp/>ml_default_queue_next();</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!QueuedState.State)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>QueuedState.State-&gt;run(QueuedState.State,<sp/>QueuedState.Value);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TRUE;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__scheduler__t" kindref="compound">ml_scheduler_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__scheduler__t" kindref="compound">ml_scheduler_t</ref><sp/>*Parent;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal">}<sp/>gir_scheduler_t;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_gir_queue_add(gir_scheduler_t<sp/>*Scheduler,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Fill<sp/>=<sp/>Scheduler-&gt;Parent-&gt;add(Scheduler-&gt;Parent,<sp/>State,<sp/>Value);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Fill<sp/>==<sp/>1)<sp/>g_idle_add(ml_gir_queue_run,<sp/>NULL);</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Fill;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structptrset__t" kindref="compound">ptrset_t</ref><sp/>SleepSet[1]<sp/>=<sp/>{PTRSET_INIT};</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>gboolean<sp/>sleep_run(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>ptrset_remove(SleepSet,<sp/>Data);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_state_schedule((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Data,<sp/>MLNil);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>G_SOURCE_REMOVE;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal">ML_FUNCTIONX(MLSleep)<sp/>{</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight><highlight class="comment">//@sleep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLNumberT);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/>guint<sp/>Interval<sp/>=<sp/>ml_real_value(Args[0])<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>ptrset_insert(SleepSet,<sp/>Caller);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/>g_timeout_add(Interval,<sp/>sleep_run,<sp/>Caller);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal">ML_FUNCTIONX(GirInstall)<sp/>{</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/>gir_scheduler_t<sp/>*Scheduler<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(gir_scheduler_t);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>Scheduler-&gt;Base.add<sp/>=<sp/>(ml_scheduler_fn)ml_gir_queue_add;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>Scheduler-&gt;Parent<sp/>=<sp/>ml_context_get(Caller-&gt;Context,<sp/>ML_SCHEDULER_INDEX);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_context_set(Caller-&gt;Context,<sp/>ML_SCHEDULER_INDEX,<sp/>Scheduler);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_stream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gio/gio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal">ML_GIR_TYPELIB(Gio,<sp/></highlight><highlight class="stringliteral">&quot;Gio&quot;</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__gio__callback__t" kindref="compound">ml_gio_callback_t</ref><sp/><ref refid="structml__gio__callback__t" kindref="compound">ml_gio_callback_t</ref>;</highlight></codeline>
<codeline lineno="1551" refid="structml__gio__callback__t" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__gio__callback__t" kindref="compound">ml_gio_callback_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__gio__callback__t" kindref="compound">ml_gio_callback_t</ref><sp/>*Next,<sp/>*Prev;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__gio__callback__t" kindref="compound">ml_gio_callback_t</ref><sp/>GioCallbacks[1]<sp/>=<sp/>{{GioCallbacks,<sp/>GioCallbacks,<sp/>NULL}};</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__gio__callback__t" kindref="compound">ml_gio_callback_t</ref><sp/>*GioCallbackCache<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__gio__callback__t" kindref="compound">ml_gio_callback_t</ref><sp/>*ml_gio_callback(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller)<sp/>{</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__gio__callback__t" kindref="compound">ml_gio_callback_t</ref><sp/>*Callback<sp/>=<sp/>GioCallbackCache;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Callback)<sp/>{</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GioCallbackCache<sp/>=<sp/>Callback-&gt;Next;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Callback<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__gio__callback__t" kindref="compound">ml_gio_callback_t</ref>);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/>Callback-&gt;Prev<sp/>=<sp/>GioCallbacks;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>Callback-&gt;Next<sp/>=<sp/>GioCallbacks-&gt;Next;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>GioCallbacks-&gt;Next-&gt;Prev<sp/>=<sp/>Callback;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>GioCallbacks-&gt;Next<sp/>=<sp/>Callback;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/>Callback-&gt;Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Callback;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*ml_gio_callback_use(<ref refid="structml__gio__callback__t" kindref="compound">ml_gio_callback_t</ref><sp/>*Callback)<sp/>{</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>Callback-&gt;Prev-&gt;Next<sp/>=<sp/>Callback-&gt;Next;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>Callback-&gt;Next-&gt;Prev<sp/>=<sp/>Callback-&gt;Prev;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Callback-&gt;Caller;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>Callback-&gt;Next<sp/>=<sp/>GioCallbackCache;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>GioCallbackCache<sp/>=<sp/>Callback;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Caller;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal">ML_GIR_IMPORT(GInputStreamT,<sp/>Gio,<sp/></highlight><highlight class="stringliteral">&quot;InputStream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>g_input_stream_callback(GObject<sp/>*Object,<sp/>GAsyncResult<sp/>*Result,<sp/>gpointer<sp/>Data)<sp/>{</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>GInputStream<sp/>*Stream<sp/>=<sp/>(GInputStream<sp/>*)Object;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>ml_gio_callback_use((<ref refid="structml__gio__callback__t" kindref="compound">ml_gio_callback_t</ref><sp/>*)Data);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/>GError<sp/>*Error<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>gssize<sp/>Count<sp/>=<sp/>g_input_stream_read_finish(Stream,<sp/>Result,<sp/>&amp;Error);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Error)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;GirError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>Error-&gt;message);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Count));</highlight></codeline>
<codeline lineno="1593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_stream_read,<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)GInputStreamT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>GInputStream<sp/>*Stream<sp/>=<sp/>(GInputStream<sp/>*)Value-&gt;Handle;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>g_input_stream_read_async(Stream,<sp/>Address,<sp/>Count,<sp/>0,<sp/>NULL,<sp/>g_input_stream_callback,<sp/>ml_gio_callback(Caller));</highlight></codeline>
<codeline lineno="1598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal">ML_GIR_IMPORT(GOutputStreamT,<sp/>Gio,<sp/></highlight><highlight class="stringliteral">&quot;OutputStream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>g_output_stream_callback(GObject<sp/>*Object,<sp/>GAsyncResult<sp/>*Result,<sp/>gpointer<sp/>Data)<sp/>{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>GOutputStream<sp/>*Stream<sp/>=<sp/>(GOutputStream<sp/>*)Object;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>ml_gio_callback_use((<ref refid="structml__gio__callback__t" kindref="compound">ml_gio_callback_t</ref><sp/>*)Data);</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>GError<sp/>*Error<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>gsize<sp/>Count;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>g_output_stream_write_all_finish(Stream,<sp/>Result,<sp/>&amp;Count,<sp/>&amp;Error);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Error)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;GirError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>Error-&gt;message);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Count));</highlight></codeline>
<codeline lineno="1610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_stream_write,<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)GOutputStreamT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>GOutputStream<sp/>*Stream<sp/>=<sp/>(GOutputStream<sp/>*)Value-&gt;Handle;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>g_output_stream_write_all_async(Stream,<sp/>Address,<sp/>Count,<sp/>0,<sp/>NULL,<sp/>g_output_stream_callback,<sp/>ml_gio_callback(Caller));</highlight></codeline>
<codeline lineno="1615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__gir__value__t" kindref="compound">ml_gir_value_t</ref><sp/><ref refid="structml__gir__value__t" kindref="compound">ml_gir_value_t</ref>;</highlight></codeline>
<codeline lineno="1618" refid="structml__gir__value__t" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__gir__value__t" kindref="compound">ml_gir_value_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GMainLoop<sp/>*MainLoop<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_gir_loop_init(<ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context)<sp/>{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/>MainLoop<sp/>=<sp/>g_main_loop_new(NULL,<sp/>TRUE);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/>gir_scheduler_t<sp/>*Scheduler<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(gir_scheduler_t);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/>Scheduler-&gt;Base.add<sp/>=<sp/>(ml_scheduler_fn)ml_gir_queue_add;</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/>Scheduler-&gt;Parent<sp/>=<sp/>ml_context_get(Context,<sp/>ML_SCHEDULER_INDEX);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_context_set(Context,<sp/>ML_SCHEDULER_INDEX,<sp/>Scheduler);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_gir_loop_run()<sp/>{</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/>g_main_loop_run(MainLoop);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_gir_loop_quit()<sp/>{</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/>g_main_loop_quit(MainLoop);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_array.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;gir&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_DONE,</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_BOOLEAN,</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_INT8,</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_UINT8,</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_INT16,</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_UINT16,</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_INT32,</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_UINT32,</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_INT64,</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_UINT64,</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_FLOAT,</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_DOUBLE,</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_STRING,</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_GTYPE,</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//GIB_BYTES,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_ARRAY,</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_CALLBACK,</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_STRUCT,</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_UNION,</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_ENUM,</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_OBJECT,</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_SELF,</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_VALUE,</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_LIST,</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_SLIST,</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_HASH,</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_ERROR,</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//GIB_BYTES_FIXED,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//GIB_BYTES_LENGTH,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_ARRAY_ZERO,</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_ARRAY_FIXED,</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_ARRAY_LENGTH,</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_SKIP,</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_OUTPUT_VALUE,</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_OUTPUT_ARRAY,</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_OUTPUT_ARRAY_LENGTH,</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_OUTPUT_STRUCT,</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/>GIB_FREE</highlight></codeline>
<codeline lineno="1686"><highlight class="normal">}<sp/>gi_opcode_t;</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VALUE_CONVERTOR(GTYPE,<sp/>MLTYPE)<sp/>\</highlight></codeline>
<codeline lineno="1689"><highlight class="preprocessor">static<sp/>ml_value_t<sp/>*GTYPE<sp/>##<sp/>_to_array(ml_value_t<sp/>*Value,<sp/>void<sp/>*Ptr)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1690"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>*(g<sp/>##<sp/>GTYPE<sp/>*)Ptr<sp/>=<sp/>ml_<sp/>##<sp/>MLTYPE<sp/>##<sp/>_value(Value);<sp/>\</highlight></codeline>
<codeline lineno="1691"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>NULL;<sp/>\</highlight></codeline>
<codeline lineno="1692"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="1693"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="1694"><highlight class="preprocessor">static<sp/>ml_value_t<sp/>*GTYPE<sp/>##<sp/>_to_glist(ml_value_t<sp/>*Value,<sp/>void<sp/>**Ptr)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1695"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>*Ptr<sp/>=<sp/>(void<sp/>*)(uintptr_t)ml_<sp/>##<sp/>MLTYPE<sp/>##<sp/>_value(Value);<sp/>\</highlight></codeline>
<codeline lineno="1696"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>NULL;<sp/>\</highlight></codeline>
<codeline lineno="1697"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="1698"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="1699"><highlight class="preprocessor">static<sp/>ml_value_t<sp/>*GTYPE<sp/>##<sp/>_to_value(void<sp/>*Ptr,<sp/>void<sp/>*Aux)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1700"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ml_<sp/>##<sp/>MLTYPE((g<sp/>##<sp/>GTYPE)(uintptr_t)Ptr);<sp/>\</highlight></codeline>
<codeline lineno="1701"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal">VALUE_CONVERTOR(</highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1704"><highlight class="normal">VALUE_CONVERTOR(int8,<sp/>integer);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal">VALUE_CONVERTOR(uint8,<sp/>integer)</highlight></codeline>
<codeline lineno="1706"><highlight class="normal">VALUE_CONVERTOR(int16,<sp/>integer);</highlight></codeline>
<codeline lineno="1707"><highlight class="normal">VALUE_CONVERTOR(uint16,<sp/>integer)</highlight></codeline>
<codeline lineno="1708"><highlight class="normal">VALUE_CONVERTOR(int32,<sp/>integer);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal">VALUE_CONVERTOR(uint32,<sp/>integer)</highlight></codeline>
<codeline lineno="1710"><highlight class="normal">VALUE_CONVERTOR(int64,<sp/>integer);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal">VALUE_CONVERTOR(uint64,<sp/>integer)</highlight></codeline>
<codeline lineno="1712"><highlight class="normal">VALUE_CONVERTOR(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>real);</highlight></codeline>
<codeline lineno="1713"><highlight class="normal">VALUE_CONVERTOR(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>real);</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*string_to_array(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Ptr)<sp/>{</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(gchararray<sp/>*)Ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLAddressT))<sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(gchararray<sp/>*)Ptr<sp/>=<sp/>(gchararray)ml_address_value(Value);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>string<sp/>not<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Value)-&gt;Name);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*string_to_glist(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Ptr)<sp/>{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLAddressT))<sp/>{</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_address_value(Value);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>string<sp/>not<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Value)-&gt;Name);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*string_to_value(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Ptr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Aux)<sp/>{</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string_copy(Ptr,<sp/>-1);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*gtype_to_array(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Ptr)<sp/>{</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>GirBaseInfoT))<sp/>{</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbaseinfo__t" kindref="compound">baseinfo_t</ref><sp/>*Base<sp/>=<sp/>(<ref refid="structbaseinfo__t" kindref="compound">baseinfo_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(GType<sp/>*)Ptr<sp/>=<sp/>g_registered_type_info_get_g_type((GIRegisteredTypeInfo<sp/>*)Base-&gt;Info);</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(GType<sp/>*)Ptr<sp/>=<sp/>g_type_from_name(ml_string_value(Value));</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLNilT)<sp/>{</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(GType<sp/>*)Ptr<sp/>=<sp/>G_TYPE_NONE;</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(GType<sp/>*)Ptr<sp/>=<sp/>G_TYPE_INT64;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(GType<sp/>*)Ptr<sp/>=<sp/>G_TYPE_STRING;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLDoubleT)<sp/>{</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(GType<sp/>*)Ptr<sp/>=<sp/>G_TYPE_DOUBLE;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLBooleanT)<sp/>{</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(GType<sp/>*)Ptr<sp/>=<sp/>G_TYPE_BOOLEAN;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(GType<sp/>*)Ptr<sp/>=<sp/>G_TYPE_POINTER;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>type<sp/>not<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Value)-&gt;Name);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*gtype_to_glist(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Ptr)<sp/>{</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>GirBaseInfoT))<sp/>{</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbaseinfo__t" kindref="compound">baseinfo_t</ref><sp/>*Base<sp/>=<sp/>(<ref refid="structbaseinfo__t" kindref="compound">baseinfo_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(uintptr_t)g_registered_type_info_get_g_type((GIRegisteredTypeInfo<sp/>*)Base-&gt;Info);</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(uintptr_t)g_type_from_name(ml_string_value(Value));</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLNilT)<sp/>{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(uintptr_t)G_TYPE_NONE;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(uintptr_t)G_TYPE_INT64;</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(uintptr_t)G_TYPE_STRING;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLDoubleT)<sp/>{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(uintptr_t)G_TYPE_DOUBLE;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLBooleanT)<sp/>{</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(uintptr_t)G_TYPE_BOOLEAN;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(uintptr_t)G_TYPE_POINTER;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>type<sp/>not<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Value)-&gt;Name);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*gtype_to_value(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Ptr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Aux)<sp/>{</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(g_type_name((GType)Ptr),<sp/>-1);</highlight></codeline>
<codeline lineno="1791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight><highlight class="comment">/*static<sp/>ml_value_t<sp/>*bytes_to_array(ml_value_t<sp/>*Value,<sp/>void<sp/>*Ptr)<sp/>{</highlight></codeline>
<codeline lineno="1794"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="1795"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(gchararray<sp/>*)Ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1796"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(ml_is(Value,<sp/>MLAddressT))<sp/>{</highlight></codeline>
<codeline lineno="1797"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(gchararray<sp/>*)Ptr<sp/>=<sp/>(gchararray)ml_address_value(Value);</highlight></codeline>
<codeline lineno="1798"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(ml_is(Value,<sp/>MLListT))<sp/>{</highlight></codeline>
<codeline lineno="1799"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>Length<sp/>=<sp/>ml_list_length(Value);</highlight></codeline>
<codeline lineno="1800"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>*Bytes<sp/>=<sp/>snew(Length<sp/>+<sp/>1),<sp/>*Ptr2<sp/>=<sp/>Bytes;</highlight></codeline>
<codeline lineno="1801"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Value,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="1802"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_value_t<sp/>*Error<sp/>=<sp/>int8_to_array(Iter-&gt;Value,<sp/>Ptr2);</highlight></codeline>
<codeline lineno="1803"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Error)<sp/>return<sp/>Error;</highlight></codeline>
<codeline lineno="1804"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ptr2<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1805"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1806"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(gchararray<sp/>*)Ptr<sp/>=<sp/>Bytes;</highlight></codeline>
<codeline lineno="1807"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="1808"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_error(&quot;TypeError&quot;,<sp/>&quot;Expected<sp/>bytes<sp/>not<sp/>%s&quot;,<sp/>ml_typeof(Value)-&gt;Name);</highlight></codeline>
<codeline lineno="1809"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1810"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>NULL;</highlight></codeline>
<codeline lineno="1811"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight><highlight class="comment">/*static<sp/>ml_value_t<sp/>*bytes_to_glist(ml_value_t<sp/>*Value,<sp/>void<sp/>**Ptr)<sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="1815"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1816"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(ml_is(Value,<sp/>MLAddressT))<sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Ptr<sp/>=<sp/>(void<sp/>*)ml_address_value(Value);</highlight></codeline>
<codeline lineno="1818"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(ml_is(Value,<sp/>MLListT))<sp/>{</highlight></codeline>
<codeline lineno="1819"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>Length<sp/>=<sp/>ml_list_length(Value);</highlight></codeline>
<codeline lineno="1820"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>*Bytes<sp/>=<sp/>snew(Length<sp/>+<sp/>1),<sp/>*Ptr2<sp/>=<sp/>Bytes;</highlight></codeline>
<codeline lineno="1821"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Value,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="1822"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_value_t<sp/>*Error<sp/>=<sp/>int8_to_array(Iter-&gt;Value,<sp/>Ptr2);</highlight></codeline>
<codeline lineno="1823"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Error)<sp/>return<sp/>Error;</highlight></codeline>
<codeline lineno="1824"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ptr2<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1825"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1826"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Ptr<sp/>=<sp/>Bytes;</highlight></codeline>
<codeline lineno="1827"><highlight class="comment"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="1828"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_error(&quot;TypeError&quot;,<sp/>&quot;Expected<sp/>bytes<sp/>not<sp/>%s&quot;,<sp/>ml_typeof(Value)-&gt;Name);</highlight></codeline>
<codeline lineno="1829"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1830"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>NULL;</highlight></codeline>
<codeline lineno="1831"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*unknown_to_value(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Ptr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Aux)<sp/>{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>value<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>to_gvalue(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Source,<sp/>GValue<sp/>*Dest)<sp/>{</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Source<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_init(Dest,<sp/>G_TYPE_NONE);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Source,<sp/>MLBooleanT))<sp/>{</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_init(Dest,<sp/>G_TYPE_BOOLEAN);</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_boolean(Dest,<sp/>ml_boolean_value(Source));</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Source,<sp/>MLIntegerT))<sp/>{</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_init(Dest,<sp/>G_TYPE_LONG);</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_long(Dest,<sp/>ml_integer_value(Source));</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Source,<sp/>MLDoubleT))<sp/>{</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_init(Dest,<sp/>G_TYPE_DOUBLE);</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_double(Dest,<sp/>ml_real_value(Source));</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Source,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_init(Dest,<sp/>G_TYPE_STRING);</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_string(Dest,<sp/>ml_string_value(Source));</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Source,<sp/>GirObjectInstanceT))<sp/>{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Object<sp/>=<sp/>((<ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*)Source)-&gt;Handle;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_init(Dest,<sp/>G_OBJECT_TYPE(Object));</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_object(Dest,<sp/>Object);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Source,<sp/>GirStructInstanceT))<sp/>{</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value<sp/>=<sp/>((<ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref><sp/>*)Source)-&gt;Value;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_init(Dest,<sp/>G_TYPE_POINTER);</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_object(Dest,<sp/>Value);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Source,<sp/>GirEnumValueT))<sp/>{</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*)((<ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*)Source)-&gt;Type;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GType<sp/>Type<sp/>=<sp/>g_type_from_name(g_base_info_get_name((GIBaseInfo<sp/>*)Enum-&gt;Info));</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_init(Dest,<sp/>Type);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_set_enum(Dest,<sp/>((<ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*)Source)-&gt;Value);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_value_init(Dest,<sp/>G_TYPE_NONE);</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1869" refid="uniongi__inst__t" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>gi_opcode_t<sp/>Opcode;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Aux;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal">}<sp/><ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref>;</highlight></codeline>
<codeline lineno="1874" refid="structcallback__t" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/>GICallableInfo<sp/>*Info;</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>*InstIn,<sp/>*InstOut;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Provided;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Aux[];</highlight></codeline>
<codeline lineno="1881"><highlight class="normal">}<sp/><ref refid="structcallback__t" kindref="compound">callback_t</ref>;</highlight></codeline>
<codeline lineno="1882" refid="structcallback__instance__t" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/>ffi_cif<sp/>Cif[1];</highlight></codeline>
<codeline lineno="1888"><highlight class="normal">}<sp/><ref refid="structcallback__instance__t" kindref="compound">callback_instance_t</ref>;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal">ML_TYPE(GirCallbackT,<sp/>(GirBaseInfoT),<sp/></highlight><highlight class="stringliteral">&quot;callback-type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>gobject-introspection<sp/>callback<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal">ML_TYPE(GirCallbackInstanceT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;callback-instance&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>gobject-introspection<sp/>callback<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*convert_string(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(Arg,<sp/>-1);</highlight></codeline>
<codeline lineno="1898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*convert_gtype(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight><highlight class="comment">/*static<sp/>ml_value_t<sp/>*convert_bytes(void<sp/>*Arg)<sp/>{</highlight></codeline>
<codeline lineno="1905"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>MLNil;</highlight></codeline>
<codeline lineno="1906"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>callback_fn(ffi_cif<sp/>*Cif,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Return,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Params,<sp/><ref refid="structcallback__instance__t" kindref="compound">callback_instance_t</ref><sp/>*Instance)<sp/>{</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcallback__t" kindref="compound">callback_t</ref><sp/>*Callback<sp/>=<sp/>(<ref refid="structcallback__t" kindref="compound">callback_t</ref><sp/>*)Instance-&gt;Type;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[Callback-&gt;Provided];</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Arg<sp/>=<sp/>Args;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Param<sp/>=<sp/>Params;</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>*Inst<sp/>=<sp/>Callback-&gt;InstIn;<sp/>Inst-&gt;Opcode<sp/>!=<sp/>GIB_DONE;)<sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((Inst++)-&gt;Opcode)<sp/>{</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_SKIP:<sp/>Param++;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_BOOLEAN:<sp/>*Arg++<sp/>=<sp/>ml_boolean(*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)(*Param++));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT8:<sp/>*Arg++<sp/>=<sp/>ml_integer(*(gint8<sp/>*)(*Param++));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT8:<sp/>*Arg++<sp/>=<sp/>ml_integer(*(guint8<sp/>*)(*Param++));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT16:<sp/>*Arg++<sp/>=<sp/>ml_integer(*(gint16<sp/>*)(*Param++));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT16:<sp/>*Arg++<sp/>=<sp/>ml_integer(*(guint16<sp/>*)(*Param++));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT32:<sp/>*Arg++<sp/>=<sp/>ml_integer(*(gint32<sp/>*)(*Param++));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT32:<sp/>*Arg++<sp/>=<sp/>ml_integer(*(guint32<sp/>*)(*Param++));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT64:<sp/>*Arg++<sp/>=<sp/>ml_integer(*(gint64<sp/>*)(*Param++));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT64:<sp/>*Arg++<sp/>=<sp/>ml_integer(*(guint64<sp/>*)(*Param++));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_FLOAT:<sp/>*Arg++<sp/>=<sp/>ml_real(*(gfloat<sp/>*)(*Param++));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_DOUBLE:<sp/>*Arg++<sp/>=<sp/>ml_real(*(gdouble<sp/>*)(*Param++));<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_GTYPE:<sp/>*Arg++<sp/>=<sp/>MLNil;<sp/>Param++;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRING:<sp/>*Arg++<sp/>=<sp/>ml_string(*(gchararray<sp/>*)(*Param++),<sp/>-1);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY_LENGTH:<sp/>{</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address<sp/>=<sp/>*(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)(*Param++);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)(Params[(Inst++)-&gt;Aux]);</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_format_t<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_NONE;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*to_value)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((Inst++)-&gt;Opcode)<sp/>{</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_BOOLEAN:<sp/>{</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gboolean);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Size)<sp/>{</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I8;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I16;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I32;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I64;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT8:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I8;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint8);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT8:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_U8;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint8);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT16:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I16;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint16);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT16:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_U16;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint16);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT32:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I32;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint32);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT32:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_U32;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint32);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT64:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I64;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint64);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT64:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_U64;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint64);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_FLOAT:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_F32;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gfloat);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_DOUBLE:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_F64;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gdouble);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRING:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_ANY;<sp/>to_value<sp/>=<sp/>string_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_GTYPE:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_ANY;<sp/>to_value<sp/>=<sp/>gtype_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//case<sp/>GIB_BYTES:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_ANY;<sp/>convert<sp/>=<sp/>convert_bytes;<sp/>Size<sp/>=<sp/>sizeof(gpointer);<sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/>{</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array<sp/>=<sp/>ml_array(Format,<sp/>1,<sp/>Length);</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)Array-&gt;Base.Value;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Input<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)Address;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Length;<sp/>++I)<sp/>*Slot++<sp/>=<sp/>to_value(*Input++,<sp/>NULL);</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array<sp/>=<sp/>ml_array_alloc(Format,<sp/>1);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[0].Stride<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[0].Size<sp/>=<sp/>Length;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Base.Length<sp/>=<sp/>Length<sp/>*<sp/>Size;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Base.Value<sp/>=<sp/>Address;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Arg++<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Array;</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY_FIXED:<sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address<sp/>=<sp/>*(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)(*Param++);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>Callback-&gt;Aux[(Inst++)-&gt;Aux]<sp/>-<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)0;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_array_format_t<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_NONE;</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*convert)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((Inst++)-&gt;Opcode)<sp/>{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_BOOLEAN:<sp/>{</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gboolean);</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Size)<sp/>{</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I8;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I16;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I32;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I64;</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT8:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I8;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint8);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT8:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_U8;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint8);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT16:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I16;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint16);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT16:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_U16;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint16);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT32:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I32;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint32);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT32:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_U32;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint32);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT64:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_I64;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint64);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT64:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_U64;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint64);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_FLOAT:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_F32;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gfloat);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_DOUBLE:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_F64;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gdouble);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRING:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_ANY;<sp/>convert<sp/>=<sp/>convert_string;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_GTYPE:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_ANY;<sp/>convert<sp/>=<sp/>convert_gtype;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//case<sp/>GIB_BYTES:<sp/>Format<sp/>=<sp/>ML_ARRAY_FORMAT_ANY;<sp/>convert<sp/>=<sp/>convert_bytes;<sp/>Size<sp/>=<sp/>sizeof(gpointer);<sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__array__t" kindref="compound">ml_array_t</ref><sp/>*Array;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Format<sp/>==<sp/>ML_ARRAY_FORMAT_ANY)<sp/>{</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array<sp/>=<sp/>ml_array(Format,<sp/>1,<sp/>Length);</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)Array-&gt;Base.Value;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Input<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)Address;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Length;<sp/>++I)<sp/>*Slot++<sp/>=<sp/>convert(*Input++);</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array<sp/>=<sp/>ml_array_alloc(Format,<sp/>1);</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[0].Stride<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Dimensions[0].Size<sp/>=<sp/>Length;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Base.Length<sp/>=<sp/>Length<sp/>*<sp/>Size;</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array-&gt;Base.Value<sp/>=<sp/>Address;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Arg++<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Array;</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRUCT:<sp/>{</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref><sp/>*Instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref>);</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Type<sp/>=<sp/>(<ref refid="structstruct__t" kindref="compound">struct_t</ref><sp/>*)Callback-&gt;Aux[(Inst++)-&gt;Aux];</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Value<sp/>=<sp/>*(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)(*Param++);</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Arg++<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Instance;</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UNION:<sp/>{</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structunion__instance__t" kindref="compound">union_instance_t</ref><sp/>*Instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structunion__instance__t" kindref="compound">union_instance_t</ref>);</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Type<sp/>=<sp/>(<ref refid="structunion__t" kindref="compound">union_t</ref><sp/>*)Callback-&gt;Aux[(Inst++)-&gt;Aux];</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Value<sp/>=<sp/>*(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)(*Param++);</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Arg++<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Instance;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ENUM:<sp/>{</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*)Callback-&gt;Aux[(Inst++)-&gt;Aux];</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Arg++<sp/>=<sp/>gir_enum_value(Enum,<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)(*Param++));</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_OBJECT:<sp/>{</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structobject__t" kindref="compound">object_t</ref><sp/>*Object<sp/>=<sp/>(<ref refid="structobject__t" kindref="compound">object_t</ref><sp/>*)Callback-&gt;Aux[(Inst++)-&gt;Aux];</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Arg++<sp/>=<sp/>ml_gir_instance_get(*(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)(*Param++),<sp/>(GIBaseInfo<sp/>*)Object-&gt;Info);</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_VALUE:<sp/>{</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Arg++<sp/>=<sp/>_value_to_ml(*(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)(*Param++),<sp/>NULL);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_LIST:<sp/>{</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*to_value)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((Inst++)-&gt;Opcode)<sp/>{</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_BOOLEAN:<sp/>to_value<sp/>=<sp/>boolean_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT8:<sp/>to_value<sp/>=<sp/>int8_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT8:<sp/>to_value<sp/>=<sp/>uint8_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT16:<sp/>to_value<sp/>=<sp/>int16_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT16:<sp/>to_value<sp/>=<sp/>uint16_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT32:<sp/>to_value<sp/>=<sp/>int32_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT32:<sp/>to_value<sp/>=<sp/>uint32_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT64:<sp/>to_value<sp/>=<sp/>int64_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT64:<sp/>to_value<sp/>=<sp/>uint64_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_FLOAT:<sp/>to_value<sp/>=<sp/>float_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_DOUBLE:<sp/>to_value<sp/>=<sp/>double_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRING:<sp/>to_value<sp/>=<sp/>string_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_GTYPE:<sp/>to_value<sp/>=<sp/>gtype_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//case<sp/>GIB_BYTES:<sp/>to_value<sp/>=<sp/>bytes_to_value;<sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>to_value<sp/>=<sp/>unknown_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(GList<sp/>*Node<sp/>=<sp/>(GList<sp/>*)(*(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)(*Param++));<sp/>Node;<sp/>Node<sp/>=<sp/>Node-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(List,<sp/>to_value(Node-&gt;data,<sp/>NULL));</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Arg++<sp/>=<sp/>List;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_SLIST:<sp/>{</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*to_value)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((Inst++)-&gt;Opcode)<sp/>{</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_BOOLEAN:<sp/>to_value<sp/>=<sp/>boolean_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT8:<sp/>to_value<sp/>=<sp/>int8_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT8:<sp/>to_value<sp/>=<sp/>uint8_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT16:<sp/>to_value<sp/>=<sp/>int16_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT16:<sp/>to_value<sp/>=<sp/>uint16_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT32:<sp/>to_value<sp/>=<sp/>int32_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT32:<sp/>to_value<sp/>=<sp/>uint32_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT64:<sp/>to_value<sp/>=<sp/>int64_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT64:<sp/>to_value<sp/>=<sp/>uint64_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_FLOAT:<sp/>to_value<sp/>=<sp/>float_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_DOUBLE:<sp/>to_value<sp/>=<sp/>double_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRING:<sp/>to_value<sp/>=<sp/>string_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_GTYPE:<sp/>to_value<sp/>=<sp/>gtype_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//case<sp/>GIB_BYTES:<sp/>to_value<sp/>=<sp/>bytes_to_value;<sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>to_value<sp/>=<sp/>unknown_to_value;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(GSList<sp/>*Node<sp/>=<sp/>(GSList<sp/>*)(*(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)(*Param++));<sp/>Node;<sp/>Node<sp/>=<sp/>Node-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(List,<sp/>to_value(Node-&gt;data,<sp/>NULL));</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Arg++<sp/>=<sp/>List;</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_HASH:<sp/>{</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Map<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GHashTable<sp/>*Node;</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Param;<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Populate<sp/>Map<sp/>properly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Arg++<sp/>=<sp/>Map;</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__result__state__t" kindref="compound">ml_result_state_t</ref><sp/>*State<sp/>=<sp/>ml_result_state(Instance-&gt;Context);</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_call(State,<sp/>Instance-&gt;Function,<sp/>Arg<sp/>-<sp/>Args,<sp/>Args);</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/>GMainContext<sp/>*MainContext<sp/>=<sp/>g_main_context_default();</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!State-&gt;Value)<sp/>g_main_context_iteration(MainContext,<sp/>TRUE);</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>State-&gt;Value;</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>*Inst<sp/>=<sp/>Callback-&gt;InstOut;<sp/>Inst-&gt;Opcode<sp/>!=<sp/>GIB_DONE;)<sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((Inst++)-&gt;Opcode)<sp/>{</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_BOOLEAN:<sp/>*(gboolean<sp/>*)Return<sp/>=<sp/>ml_boolean_value(Result);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT8:<sp/>*(gint8<sp/>*)Return<sp/>=<sp/>ml_integer_value(Result);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT8:<sp/>*(guint8<sp/>*)Return<sp/>=<sp/>ml_integer_value(Result);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT16:<sp/>*(gint16<sp/>*)Return<sp/>=<sp/>ml_integer_value(Result);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT16:<sp/>*(guint16<sp/>*)Return<sp/>=<sp/>ml_integer_value(Result);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT32:<sp/>*(gint32<sp/>*)Return<sp/>=<sp/>ml_integer_value(Result);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT32:<sp/>*(guint32<sp/>*)Return<sp/>=<sp/>ml_integer_value(Result);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT64:<sp/>*(gint64<sp/>*)Return<sp/>=<sp/>ml_integer_value(Result);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT64:<sp/>*(guint64<sp/>*)Return<sp/>=<sp/>ml_integer_value(Result);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_FLOAT:<sp/>*(gfloat<sp/>*)Return<sp/>=<sp/>ml_real_value(Result);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_DOUBLE:<sp/>*(gdouble<sp/>*)Return<sp/>=<sp/>ml_real_value(Result);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRING:<sp/>{</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Result;</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(gchararray<sp/>*)Return<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(gchararray<sp/>*)Return<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_string_value(Value);</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2139" refid="structarg__info__t" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/>GIArgInfo<sp/>Info[1];</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/>GITypeInfo<sp/>Type[1];</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/>GIDirection<sp/>Direction;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SkipIn,<sp/>SkipOut;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>In,<sp/>Out,<sp/>Value;</highlight></codeline>
<codeline lineno="2146"><highlight class="normal">}<sp/><ref refid="structarg__info__t" kindref="compound">arg_info_t</ref>;</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GIBaseInfo<sp/>*GValueInfo;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BASIC_CASES_SIZE(NUM)<sp/>\</highlight></codeline>
<codeline lineno="2151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_BOOLEAN:<sp/>\</highlight></codeline>
<codeline lineno="2152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_INT8:<sp/>\</highlight></codeline>
<codeline lineno="2153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_UINT8:<sp/>\</highlight></codeline>
<codeline lineno="2154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_INT16:<sp/>\</highlight></codeline>
<codeline lineno="2155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_UINT16:<sp/>\</highlight></codeline>
<codeline lineno="2156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_INT32:<sp/>\</highlight></codeline>
<codeline lineno="2157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_UINT32:<sp/>\</highlight></codeline>
<codeline lineno="2158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_INT64:<sp/>\</highlight></codeline>
<codeline lineno="2159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_UINT64:<sp/>\</highlight></codeline>
<codeline lineno="2160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_FLOAT:<sp/>\</highlight></codeline>
<codeline lineno="2161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_DOUBLE:<sp/>\</highlight></codeline>
<codeline lineno="2162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_GTYPE:<sp/>\</highlight></codeline>
<codeline lineno="2163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_UTF8:<sp/>\</highlight></codeline>
<codeline lineno="2164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_FILENAME:<sp/>\</highlight></codeline>
<codeline lineno="2165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_UNICHAR:<sp/>(NUM++);<sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BASIC_CASES_INST(DEST)<sp/>\</highlight></codeline>
<codeline lineno="2168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_BOOLEAN:<sp/>(DEST++)-&gt;Opcode<sp/>=<sp/>GIB_BOOLEAN;<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_INT8:<sp/>(DEST++)-&gt;Opcode<sp/>=<sp/>GIB_INT8;<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_UINT8:<sp/>(DEST++)-&gt;Opcode<sp/>=<sp/>GIB_UINT8;<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_INT16:<sp/>(DEST++)-&gt;Opcode<sp/>=<sp/>GIB_INT16;<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_UINT16:<sp/>(DEST++)-&gt;Opcode<sp/>=<sp/>GIB_UINT16;<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_INT32:<sp/>(DEST++)-&gt;Opcode<sp/>=<sp/>GIB_INT32;<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_UINT32:<sp/>(DEST++)-&gt;Opcode<sp/>=<sp/>GIB_UINT32;<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_INT64:<sp/>(DEST++)-&gt;Opcode<sp/>=<sp/>GIB_INT64;<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_UINT64:<sp/>(DEST++)-&gt;Opcode<sp/>=<sp/>GIB_UINT64;<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_FLOAT:<sp/>(DEST++)-&gt;Opcode<sp/>=<sp/>GIB_FLOAT;<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_DOUBLE:<sp/>(DEST++)-&gt;Opcode<sp/>=<sp/>GIB_DOUBLE;<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2179"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_GTYPE:<sp/>(DEST++)-&gt;Opcode<sp/>=<sp/>GIB_GTYPE;<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2180"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_UTF8:<sp/>(DEST++)-&gt;Opcode<sp/>=<sp/>GIB_STRING;<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_FILENAME:<sp/>(DEST++)-&gt;Opcode<sp/>=<sp/>GIB_STRING;<sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="2182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>GI_TYPE_TAG_UNICHAR:<sp/>(DEST++)-&gt;Opcode<sp/>=<sp/>GIB_UINT32;<sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*callback_info_compile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TypeName,<sp/>GICallbackInfo<sp/>*Info)<sp/>{</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumArgs<sp/>=<sp/>g_callable_info_get_n_args(Info);</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarg__info__t" kindref="compound">arg_info_t</ref><sp/>Args[NumArgs];</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(Args,<sp/>0,<sp/>NumArgs<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structarg__info__t" kindref="compound">arg_info_t</ref>));</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumAux<sp/>=<sp/>0,<sp/>Provided<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>InSize<sp/>=<sp/>1,<sp/>OutSize<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumArgs;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_callable_info_load_arg(Info,<sp/>I,<sp/>Args[I].Info);</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIArgInfo<sp/>*ArgInfo<sp/>=<sp/>Args[I].Info;</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_arg_info_load_type(ArgInfo,<sp/>Args[I].Type);</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Closure<sp/>=<sp/>g_arg_info_get_closure(ArgInfo);</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Closure<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[I].SkipIn<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Provided++;</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(Args[I].Type))<sp/>{</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_VOID:</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Provided--;</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[I].SkipIn<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ARRAY:<sp/>{</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>g_type_info_get_array_length(Args[I].Type);</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Fixed<sp/>=<sp/>g_type_info_get_array_fixed_size(Args[I].Type);</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Provided--;</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[Length].SkipIn<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Fixed<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumAux++;</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*InterfaceInfo<sp/>=<sp/>g_type_info_get_interface(Args[I].Type);</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumAux++;</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_base_info_get_type(InterfaceInfo)<sp/>==<sp/>GI_INFO_TYPE_CALLBACK)<sp/>{</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Closure<sp/>=<sp/>g_arg_info_get_closure(ArgInfo);</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Closure<sp/>&gt;=<sp/>0)<sp/>Args[Closure].SkipIn<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(InterfaceInfo);</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GLIST:</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GSLIST:</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GHASH:</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/>GITypeInfo<sp/>*Return<sp/>=<sp/>g_callable_info_get_return_type((GICallableInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(Return))<sp/>{</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_VOID:</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INTERFACE:</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutSize<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumAux++;</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ARRAY:</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GLIST:</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GSLIST:</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutSize<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GHASH:</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutSize<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcallback__t" kindref="compound">callback_t</ref><sp/>*Callback<sp/>=<sp/>xnew(<ref refid="structcallback__t" kindref="compound">callback_t</ref>,<sp/>NumAux,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/>Callback-&gt;Base.Type<sp/>=<sp/>GirCallbackT;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/>Callback-&gt;Base.Name<sp/>=<sp/>TypeName;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/>Callback-&gt;Base.hash<sp/>=<sp/>ml_default_hash;</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/>Callback-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/>Callback-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/>Callback-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_init((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Callback,<sp/>GirCallbackInstanceT,<sp/>NULL);</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/>Callback-&gt;Info<sp/>=<sp/>Info;</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/>g_base_info_ref(Info);</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/>Callback-&gt;Provided<sp/>=<sp/>Provided;</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>*InstIn<sp/>=<sp/>Callback-&gt;InstIn<sp/>=<sp/>(<ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>*)snew(InSize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref>));</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>*InstOut<sp/>=<sp/>Callback-&gt;InstOut<sp/>=<sp/>(<ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>*)snew(OutSize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref>));</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/>NumAux<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(Return))<sp/>{</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_VOID:</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/>BASIC_CASES_INST(InstOut)</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ARRAY:<sp/>{</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GITypeInfo<sp/>*ElementInfo<sp/>=<sp/>g_type_info_get_param_type(Return,<sp/>0);</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_type_info_is_zero_terminated(Return))<sp/>{</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_ARRAY_ZERO;</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_ARRAY;</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(ElementInfo))<sp/>{</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BASIC_CASES_INST(InstOut)</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>handle<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(ElementInfo);</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*InterfaceInfo<sp/>=<sp/>g_type_info_get_interface(Return);</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_base_info_get_type(InterfaceInfo))<sp/>{</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_CALLBACK:<sp/>{</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_CALLBACK;</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Callback-&gt;Aux[NumAux++]<sp/>=<sp/>callback_info_lookup((GICallbackInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_STRUCT:<sp/>{</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_STRUCT;</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Callback-&gt;Aux[NumAux++]<sp/>=<sp/>struct_info_lookup((GIStructInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_UNION:<sp/>{</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_UNION;</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Callback-&gt;Aux[NumAux++]<sp/>=<sp/>union_info_lookup((GIUnionInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_ENUM:</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FLAGS:<sp/>{</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_ENUM;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Callback-&gt;Aux[NumAux++]<sp/>=<sp/>enum_info_lookup((GIEnumInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_OBJECT:<sp/>{</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_OBJECT;</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Callback-&gt;Aux[NumAux++]<sp/>=<sp/>object_info_lookup((GIObjectInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_OBJECT;</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Callback-&gt;Aux[NumAux++]<sp/>=<sp/>interface_info_lookup((GIInterfaceInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>raise<sp/>error<sp/>or<sp/>add<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(InterfaceInfo);</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GLIST:<sp/>{</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_LIST;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GITypeInfo<sp/>*ElementInfo<sp/>=<sp/>g_type_info_get_param_type(Return,<sp/>0);</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(ElementInfo))<sp/>{</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BASIC_CASES_INST(InstOut)</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>handle<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(ElementInfo);</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GSLIST:<sp/>{</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_SLIST;</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GITypeInfo<sp/>*ElementInfo<sp/>=<sp/>g_type_info_get_param_type(Return,<sp/>0);</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(ElementInfo))<sp/>{</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BASIC_CASES_INST(InstOut)</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>handle<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(ElementInfo);</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GHASH:<sp/>{</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_HASH;</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GITypeInfo<sp/>*ElementInfo<sp/>=<sp/>g_type_info_get_param_type(Return,<sp/>0);</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(ElementInfo))<sp/>{</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BASIC_CASES_INST(InstOut)</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>handle<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(ElementInfo);</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>handle<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/>g_base_info_unref(Return);</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumArgs;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Args[I].SkipIn)<sp/>{</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_SKIP;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(Args[I].Type))<sp/>{</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_VOID:</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_SKIP;</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BASIC_CASES_INST(InstIn)</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ARRAY:<sp/>{</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>g_type_info_get_array_length(Args[I].Type);</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Fixed<sp/>=<sp/>g_type_info_get_array_fixed_size(Args[I].Type);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//g_type_info_is_zero_terminated(Args[I].Type);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_ARRAY_LENGTH;</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Aux<sp/>=<sp/>Length;</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Fixed<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_ARRAY_FIXED;</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Callback-&gt;Aux[NumAux++]<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)0<sp/>+<sp/>Fixed;</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_type_info_is_zero_terminated(Args[I].Type))<sp/>{</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_ARRAY_ZERO;</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_ARRAY;</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GITypeInfo<sp/>*ElementInfo<sp/>=<sp/>g_type_info_get_param_type(Args[I].Type,<sp/>0);</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(ElementInfo))<sp/>{</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BASIC_CASES_INST(InstIn)</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>handle<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(ElementInfo);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*InterfaceInfo<sp/>=<sp/>g_type_info_get_interface(Args[I].Type);</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_base_info_get_type(InterfaceInfo))<sp/>{</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_CALLBACK:<sp/>{</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_CALLBACK;</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Callback-&gt;Aux[NumAux++]<sp/>=<sp/>callback_info_lookup((GICallbackInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_STRUCT:<sp/>{</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_STRUCT;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Callback-&gt;Aux[NumAux++]<sp/>=<sp/>struct_info_lookup((GIStructInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_UNION:<sp/>{</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_UNION;</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Callback-&gt;Aux[NumAux++]<sp/>=<sp/>union_info_lookup((GIUnionInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_ENUM:</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FLAGS:<sp/>{</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_ENUM;</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Callback-&gt;Aux[NumAux++]<sp/>=<sp/>enum_info_lookup((GIEnumInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_OBJECT:<sp/>{</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OBJECT;</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Callback-&gt;Aux[NumAux++]<sp/>=<sp/>object_info_lookup((GIObjectInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OBJECT;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Callback-&gt;Aux[NumAux++]<sp/>=<sp/>interface_info_lookup((GIInterfaceInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>raise<sp/>error<sp/>or<sp/>add<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(InterfaceInfo);</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GLIST:<sp/>{</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_LIST;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GITypeInfo<sp/>*ElementInfo<sp/>=<sp/>g_type_info_get_param_type(Args[I].Type,<sp/>0);</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(ElementInfo))<sp/>{</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BASIC_CASES_INST(InstIn)</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>handle<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(ElementInfo);</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GSLIST:<sp/>{</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_SLIST;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GITypeInfo<sp/>*ElementInfo<sp/>=<sp/>g_type_info_get_param_type(Args[I].Type,<sp/>0);</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(ElementInfo))<sp/>{</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BASIC_CASES_INST(InstIn)</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>handle<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(ElementInfo);</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GHASH:<sp/>{</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_HASH;</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GITypeInfo<sp/>*ElementInfo<sp/>=<sp/>g_type_info_get_param_type(Args[I].Type,<sp/>0);</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(ElementInfo))<sp/>{</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BASIC_CASES_INST(InstIn)</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>handle<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(ElementInfo);</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/>InstIn-&gt;Opcode<sp/>=<sp/>InstOut-&gt;Opcode<sp/>=<sp/>GIB_DONE;</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Callback;</highlight></codeline>
<codeline lineno="2486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*callback_info_lookup(GICallbackInfo<sp/>*Info)<sp/>{</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TypeName<sp/>=<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)Info);</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**)stringmap_slot(TypeMap,<sp/>TypeName);</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>Slot[0]<sp/>=<sp/>callback_info_compile(TypeName,<sp/>Info);</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Slot[0];</highlight></codeline>
<codeline lineno="2493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*ptr_to_value_fn)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="2496" refid="structptr__to__value__t" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*to_value)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Aux;</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size;</highlight></codeline>
<codeline lineno="2501"><highlight class="normal">}<sp/><ref refid="structptr__to__value__t" kindref="compound">ptr_to_value_t</ref>;</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"></highlight></codeline>
<codeline lineno="2503"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ptr_to_value(<ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>**Inst,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Aux,<sp/><ref refid="structptr__to__value__t" kindref="compound">ptr_to_value_t</ref><sp/>*Convert)<sp/>{</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/>gi_opcode_t<sp/>Opcode<sp/>=<sp/>((*Inst)++)-&gt;Opcode;</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Opcode)<sp/>{</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_BOOLEAN:</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;to_value<sp/>=<sp/>boolean_to_value;</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gboolean);</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT8:</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;to_value<sp/>=<sp/>int8_to_value;</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint8);</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT8:</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;to_value<sp/>=<sp/>uint8_to_value;</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint8);</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT16:</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;to_value<sp/>=<sp/>int16_to_value;</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint16);</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT16:</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;to_value<sp/>=<sp/>uint16_to_value;</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint16);</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT32:</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;to_value<sp/>=<sp/>int32_to_value;</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint32);</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT32:</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;to_value<sp/>=<sp/>uint32_to_value;</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint32);</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT64:</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;to_value<sp/>=<sp/>int64_to_value;</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint64);</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT64:</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;to_value<sp/>=<sp/>uint64_to_value;</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint64);</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_FLOAT:</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;to_value<sp/>=<sp/>float_to_value;</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gfloat);</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_DOUBLE:</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;to_value<sp/>=<sp/>double_to_value;</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gdouble);</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRING:</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;to_value<sp/>=<sp/>string_to_value;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gchararray);</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_GTYPE:</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;to_value<sp/>=<sp/>gtype_to_value;</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GType);</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2560" refid="structgir__function__t" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/>GIFunctionInfo<sp/>*Info;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>*InstIn,<sp/>*InstOut;</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumArgsIn,<sp/>NumArgsOut;</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumValues,<sp/>NumInputs;</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumOutputs,<sp/>NumResults;</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Aux[];</highlight></codeline>
<codeline lineno="2569"><highlight class="normal">}<sp/><ref refid="structgir__function__t" kindref="compound">gir_function_t</ref>;</highlight></codeline>
<codeline lineno="2570" refid="structghash__to__map__t" refkind="compound"><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Map;</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structptr__to__value__t" kindref="compound">ptr_to_value_t</ref><sp/>Key[1];</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structptr__to__value__t" kindref="compound">ptr_to_value_t</ref><sp/>Value[1];</highlight></codeline>
<codeline lineno="2575"><highlight class="normal">}<sp/><ref refid="structghash__to__map__t" kindref="compound">ghash_to_map_t</ref>;</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"></highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ghash_to_map(gpointer<sp/>Key,<sp/>gpointer<sp/>Value,<sp/><ref refid="structghash__to__map__t" kindref="compound">ghash_to_map_t</ref><sp/>*Convert)<sp/>{</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_map_insert(Convert-&gt;Map,</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;Key-&gt;to_value(Key,<sp/>Convert-&gt;Key-&gt;Aux),</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;Value-&gt;to_value(Value,<sp/>Convert-&gt;Value-&gt;Aux)</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gir_function_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structgir__function__t" kindref="compound">gir_function_t</ref><sp/>*Function,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(Function-&gt;NumInputs);</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NumArgs<sp/>=<sp/>Function-&gt;NumArgsIn<sp/>+<sp/>Function-&gt;NumArgsOut<sp/>+<sp/>Function-&gt;NumOutputs;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/>GIArgument<sp/>Arguments[NumArgs];</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(Arguments,<sp/>0,<sp/>NumArgs<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GIArgument));</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/>GValue<sp/>Values[Function-&gt;NumValues];</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(Values,<sp/>0,<sp/>Function-&gt;NumValues<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GValue));</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/>GIArgument<sp/>*ArgIn<sp/>=<sp/>Arguments,<sp/>*ArgOut<sp/>=<sp/>ArgIn<sp/>+<sp/>Function-&gt;NumArgsIn,<sp/>*Outputs<sp/>=<sp/>ArgOut<sp/>+<sp/>Function-&gt;NumArgsOut<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/>GValue<sp/>*ValuePtr<sp/>=<sp/>Values;</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Arg<sp/>=<sp/>Args;</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>Args[I]<sp/>=<sp/>ml_deref(Args[I]);</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>*Inst<sp/>=<sp/>Function-&gt;InstIn;<sp/>Inst-&gt;Opcode<sp/>!=<sp/>GIB_DONE;)<sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((Inst++)-&gt;Opcode)<sp/>{</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_SELF:<sp/>{</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>*Arg++;</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_pointer<sp/>=<sp/>((<ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*)Value)-&gt;Handle;</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_SKIP:<sp/>ArgIn++;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_BOOLEAN:<sp/>(ArgIn++)-&gt;v_boolean<sp/>=<sp/>ml_boolean_value(*Arg++);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT8:<sp/>(ArgIn++)-&gt;v_int8<sp/>=<sp/>ml_integer_value(*Arg++);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT8:<sp/>(ArgIn++)-&gt;v_uint8<sp/>=<sp/>ml_integer_value(*Arg++);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT16:<sp/>(ArgIn++)-&gt;v_int16<sp/>=<sp/>ml_integer_value(*Arg++);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT16:<sp/>(ArgIn++)-&gt;v_uint16<sp/>=<sp/>ml_integer_value(*Arg++);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT32:<sp/>(ArgIn++)-&gt;v_int32<sp/>=<sp/>ml_integer_value(*Arg++);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT32:<sp/>(ArgIn++)-&gt;v_uint32<sp/>=<sp/>ml_integer_value(*Arg++);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT64:<sp/>(ArgIn++)-&gt;v_int64<sp/>=<sp/>ml_integer_value(*Arg++);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT64:<sp/>(ArgIn++)-&gt;v_uint64<sp/>=<sp/>ml_integer_value(*Arg++);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_FLOAT:<sp/>(ArgIn++)-&gt;v_float<sp/>=<sp/>ml_real_value(*Arg++);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_DOUBLE:<sp/>(ArgIn++)-&gt;v_double<sp/>=<sp/>ml_real_value(*Arg++);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRING:<sp/>{</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>*Arg++;</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_string<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>string<sp/>for<sp/>argument<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/>Arg<sp/>-<sp/>Args);</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_string<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_string_value(Value);</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_GTYPE:<sp/>{</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>*Arg++;</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>GirBaseInfoT))<sp/>{</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbaseinfo__t" kindref="compound">baseinfo_t</ref><sp/>*Base<sp/>=<sp/>(<ref refid="structbaseinfo__t" kindref="compound">baseinfo_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_size<sp/>=<sp/>g_registered_type_info_get_g_type((GIRegisteredTypeInfo<sp/>*)Base-&gt;Info);</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_size<sp/>=<sp/>g_type_from_name(ml_string_value(Value));</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLNilT)<sp/>{</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_size<sp/>=<sp/>G_TYPE_NONE;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_size<sp/>=<sp/>G_TYPE_INT64;</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_size<sp/>=<sp/>G_TYPE_STRING;</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLDoubleT)<sp/>{</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_size<sp/>=<sp/>G_TYPE_DOUBLE;</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLBooleanT)<sp/>{</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_size<sp/>=<sp/>G_TYPE_BOOLEAN;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_size<sp/>=<sp/>G_TYPE_POINTER;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>type<sp/>for<sp/>parameter<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/>Arg<sp/>-<sp/>Args);</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*case<sp/>GIB_BYTES:<sp/>{</highlight></codeline>
<codeline lineno="2649"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_value_t<sp/>*Value<sp/>=<sp/>*Arg++;</highlight></codeline>
<codeline lineno="2650"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>*Bytes;</highlight></codeline>
<codeline lineno="2651"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="2652"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bytes<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2653"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(ml_is(Value,<sp/>MLAddressT))<sp/>{</highlight></codeline>
<codeline lineno="2654"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bytes<sp/>=<sp/>(void<sp/>*)ml_address_value(Value);</highlight></codeline>
<codeline lineno="2655"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(ml_is(Value,<sp/>MLListT))<sp/>{</highlight></codeline>
<codeline lineno="2656"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>Length<sp/>=<sp/>ml_list_length(Value);</highlight></codeline>
<codeline lineno="2657"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bytes<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2658"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>*Ptr<sp/>=<sp/>Bytes;</highlight></codeline>
<codeline lineno="2659"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Value,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="2660"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_value_t<sp/>*Error<sp/>=<sp/>int8_to_array(Iter-&gt;Value,<sp/>Ptr);</highlight></codeline>
<codeline lineno="2661"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Error)<sp/>ML_RETURN(Error);</highlight></codeline>
<codeline lineno="2662"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ptr<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="2663"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2664"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="2665"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(&quot;TypeError&quot;,<sp/>&quot;Expected<sp/>list<sp/>or<sp/>address<sp/>for<sp/>parameter<sp/>%ld&quot;,<sp/>Arg<sp/>-<sp/>Args);</highlight></codeline>
<codeline lineno="2666"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2667"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Argument++)-&gt;v_pointer<sp/>=<sp/>Bytes;</highlight></codeline>
<codeline lineno="2668"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="2669"><highlight class="comment"><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY:</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY_ZERO:<sp/>{</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>*Arg++;</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*to_array)(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size;</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((Inst++)-&gt;Opcode)<sp/>{</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_BOOLEAN:<sp/>to_array<sp/>=<sp/>boolean_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gboolean);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT8:<sp/>to_array<sp/>=<sp/>int8_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint8);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT8:<sp/>to_array<sp/>=<sp/>uint8_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint8);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT16:<sp/>to_array<sp/>=<sp/>int16_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint16);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT16:<sp/>to_array<sp/>=<sp/>uint16_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint16);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT32:<sp/>to_array<sp/>=<sp/>int32_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint32);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT32:<sp/>to_array<sp/>=<sp/>uint32_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint32);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT64:<sp/>to_array<sp/>=<sp/>int64_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint64);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT64:<sp/>to_array<sp/>=<sp/>uint64_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint64);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_FLOAT:<sp/>to_array<sp/>=<sp/>float_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gfloat);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_DOUBLE:<sp/>to_array<sp/>=<sp/>double_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gdouble);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRING:<sp/>to_array<sp/>=<sp/>string_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gchararray);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_GTYPE:<sp/>to_array<sp/>=<sp/>gtype_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GType);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//case<sp/>GIB_BYTES:<sp/>to_array<sp/>=<sp/>bytes_to_array;<sp/>Size<sp/>=<sp/>sizeof(gpointer);<sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>array<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Array;</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLListT))<sp/>{</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_list_length(Value);</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array<sp/>=<sp/>snew((Length<sp/>+<sp/>1)<sp/>*<sp/>Size);</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Ptr<sp/>=<sp/>Array;</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Value,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error<sp/>=<sp/>to_array(Iter-&gt;Value,<sp/>Ptr);</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Error)<sp/>ML_RETURN(Error);</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ptr<sp/>+=<sp/>Size;</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLAddressT))<sp/>{</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_address_value(Value);</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>list<sp/>for<sp/>parameter<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/>Arg<sp/>-<sp/>Args);</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_pointer<sp/>=<sp/>Array;</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY_LENGTH:<sp/>{</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>*Arg++;</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Aux<sp/>=<sp/>(Inst++)-&gt;Aux;</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*to_array)(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size;</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((Inst++)-&gt;Opcode)<sp/>{</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_BOOLEAN:<sp/>to_array<sp/>=<sp/>boolean_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gboolean);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT8:<sp/>to_array<sp/>=<sp/>int8_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint8);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT8:<sp/>to_array<sp/>=<sp/>uint8_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint8);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT16:<sp/>to_array<sp/>=<sp/>int16_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint16);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT16:<sp/>to_array<sp/>=<sp/>uint16_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint16);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT32:<sp/>to_array<sp/>=<sp/>int32_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint32);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT32:<sp/>to_array<sp/>=<sp/>uint32_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint32);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT64:<sp/>to_array<sp/>=<sp/>int64_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint64);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT64:<sp/>to_array<sp/>=<sp/>uint64_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint64);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_FLOAT:<sp/>to_array<sp/>=<sp/>float_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gfloat);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_DOUBLE:<sp/>to_array<sp/>=<sp/>double_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gdouble);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRING:<sp/>to_array<sp/>=<sp/>string_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gchararray);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_GTYPE:<sp/>to_array<sp/>=<sp/>gtype_to_array;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GType);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//case<sp/>GIB_BYTES:<sp/>to_array<sp/>=<sp/>bytes_to_array;<sp/>Size<sp/>=<sp/>sizeof(gpointer);<sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>array<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Array;</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Arguments[Aux].v_int64<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLListT))<sp/>{</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_list_length(Value);</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Arguments[Aux].v_int64<sp/>=<sp/>Length;</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array<sp/>=<sp/>snew((Length<sp/>+<sp/>1)<sp/>*<sp/>Size);</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Ptr<sp/>=<sp/>Array;</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Value,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error<sp/>=<sp/>to_array(Iter-&gt;Value,<sp/>Ptr);</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Error)<sp/>ML_RETURN(Error);</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ptr<sp/>+=<sp/>Size;</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLAddressT))<sp/>{</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_address_length(Value);</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Arguments[Aux].v_int64<sp/>=<sp/>Length<sp/>/<sp/>Size;</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_address_value(Value);</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>list<sp/>for<sp/>parameter<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/>Arg<sp/>-<sp/>Args);</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_pointer<sp/>=<sp/>Array;</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_CALLBACK:<sp/>{</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>*Arg++;</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcallback__t" kindref="compound">callback_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structcallback__t" kindref="compound">callback_t</ref><sp/>*)Function-&gt;Aux[(Inst++)-&gt;Aux];</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcallback__instance__t" kindref="compound">callback_instance_t</ref><sp/>*Instance<sp/>=<sp/>(<ref refid="structcallback__instance__t" kindref="compound">callback_instance_t</ref><sp/>*)GC_MALLOC_UNCOLLECTABLE(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structcallback__instance__t" kindref="compound">callback_instance_t</ref>));</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Type;</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Function<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_pointer<sp/>=<sp/>g_callable_info_prepare_closure(</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Type-&gt;Info,</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Cif,</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GIFFIClosureCallback)callback_fn,</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRUCT:<sp/>{</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>*Arg++;</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Function-&gt;Aux[(Inst++)-&gt;Aux];</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_pointer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>Type))<sp/>{</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_pointer<sp/>=<sp/>((<ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>%s<sp/>not<sp/>%s<sp/>for<sp/>parameter<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/>Type-&gt;Name,<sp/>ml_typeof(Value)-&gt;Name,<sp/>Arg<sp/>-<sp/>Args);</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UNION:<sp/>{</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>*Arg++;</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Function-&gt;Aux[(Inst++)-&gt;Aux];</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_pointer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>Type))<sp/>{</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_pointer<sp/>=<sp/>((<ref refid="structunion__instance__t" kindref="compound">union_instance_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>%s<sp/>not<sp/>%s<sp/>for<sp/>parameter<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/>Type-&gt;Name,<sp/>ml_typeof(Value)-&gt;Name,<sp/>Arg<sp/>-<sp/>Args);</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ENUM:<sp/>{</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>*Arg++;</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Function-&gt;Aux[(Inst++)-&gt;Aux];</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_int64<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>Type))<sp/>{</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_int64<sp/>=<sp/>((<ref refid="structenum__value__t" kindref="compound">enum_value_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>%s<sp/>not<sp/>%s<sp/>for<sp/>parameter<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/>Type-&gt;Name,<sp/>ml_typeof(Value)-&gt;Name,<sp/>Arg<sp/>-<sp/>Args);</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_OBJECT:<sp/>{</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>*Arg++;</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Function-&gt;Aux[(Inst++)-&gt;Aux];</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_pointer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>Type))<sp/>{</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_pointer<sp/>=<sp/>((<ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref><sp/>*)Value)-&gt;Handle;</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>%s<sp/>not<sp/>%s<sp/>for<sp/>parameter<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/>Type-&gt;Name,<sp/>ml_typeof(Value)-&gt;Name,<sp/>Arg<sp/>-<sp/>Args);</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_VALUE:<sp/>{</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>*Arg++;</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_gvalue(Value,<sp/>ValuePtr);</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_pointer<sp/>=<sp/>ValuePtr++;</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_LIST:<sp/>{</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>*Arg++;</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*to_list)(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**);</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((Inst++)-&gt;Opcode)<sp/>{</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_BOOLEAN:<sp/>to_list<sp/>=<sp/>boolean_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT8:<sp/>to_list<sp/>=<sp/>int8_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT8:<sp/>to_list<sp/>=<sp/>uint8_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT16:<sp/>to_list<sp/>=<sp/>int16_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT16:<sp/>to_list<sp/>=<sp/>uint16_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT32:<sp/>to_list<sp/>=<sp/>int32_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT32:<sp/>to_list<sp/>=<sp/>uint32_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT64:<sp/>to_list<sp/>=<sp/>int64_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT64:<sp/>to_list<sp/>=<sp/>uint64_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_FLOAT:<sp/>to_list<sp/>=<sp/>float_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_DOUBLE:<sp/>to_list<sp/>=<sp/>double_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRING:<sp/>to_list<sp/>=<sp/>string_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_GTYPE:<sp/>to_list<sp/>=<sp/>gtype_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//case<sp/>GIB_BYTES:<sp/>to_list<sp/>=<sp/>bytes_to_glist;<sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>list<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GList<sp/>*List<sp/>=<sp/>NULL,<sp/>**Slot<sp/>=<sp/>&amp;List,<sp/>*Prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLListT))<sp/>{</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Value,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GList<sp/>*Node<sp/>=<sp/>Slot[0]<sp/>=<sp/>g_list_alloc();</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error<sp/>=<sp/>to_list(Iter-&gt;Value,<sp/>&amp;Node-&gt;data);</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Error)<sp/>ML_RETURN(Error);</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot<sp/>=<sp/>&amp;Node-&gt;next;</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;prev<sp/>=<sp/>Prev;</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prev<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_pointer<sp/>=<sp/>List;</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_SLIST:<sp/>{</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>*Arg++;</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*to_list)(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**);</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((Inst++)-&gt;Opcode)<sp/>{</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_BOOLEAN:<sp/>to_list<sp/>=<sp/>boolean_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT8:<sp/>to_list<sp/>=<sp/>int8_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT8:<sp/>to_list<sp/>=<sp/>uint8_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT16:<sp/>to_list<sp/>=<sp/>int16_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT16:<sp/>to_list<sp/>=<sp/>uint16_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT32:<sp/>to_list<sp/>=<sp/>int32_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT32:<sp/>to_list<sp/>=<sp/>uint32_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT64:<sp/>to_list<sp/>=<sp/>int64_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT64:<sp/>to_list<sp/>=<sp/>uint64_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_FLOAT:<sp/>to_list<sp/>=<sp/>float_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_DOUBLE:<sp/>to_list<sp/>=<sp/>double_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRING:<sp/>to_list<sp/>=<sp/>string_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_GTYPE:<sp/>to_list<sp/>=<sp/>gtype_to_glist;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//case<sp/>GIB_BYTES:<sp/>to_list<sp/>=<sp/>bytes_to_glist;<sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>list<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GSList<sp/>*List<sp/>=<sp/>NULL,<sp/>**Slot<sp/>=<sp/>&amp;List;</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLListT))<sp/>{</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Value,<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GSList<sp/>*Node<sp/>=<sp/>Slot[0]<sp/>=<sp/>g_slist_alloc();</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error<sp/>=<sp/>to_list(Iter-&gt;Value,<sp/>&amp;Node-&gt;data);</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Error)<sp/>ML_RETURN(Error);</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot<sp/>=<sp/>&amp;Node-&gt;next;</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgIn++)-&gt;v_pointer<sp/>=<sp/>List;</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_HASH:<sp/>{</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Hash<sp/>arguments<sp/>not<sp/>supported<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_OUTPUT_VALUE:<sp/>{</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgOut++)-&gt;v_pointer<sp/>=<sp/>Outputs++;</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_OUTPUT_ARRAY:<sp/>{</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgOut++)-&gt;v_pointer<sp/>=<sp/>Outputs++;</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_OUTPUT_STRUCT:<sp/>{</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>*Arg++;</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Function-&gt;Aux[(Inst++)-&gt;Aux];</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgOut++)-&gt;v_pointer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>Type))<sp/>{</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ArgOut++)-&gt;v_pointer<sp/>=<sp/>((<ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>%s<sp/>not<sp/>%s<sp/>for<sp/>parameter<sp/>%ld&quot;</highlight><highlight class="normal">,<sp/>Type-&gt;Name,<sp/>ml_typeof(Value)-&gt;Name,<sp/>Arg<sp/>-<sp/>Args);</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/>GError<sp/>*Error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/>gboolean<sp/>Invoked<sp/>=<sp/>g_function_info_invoke(</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Info,</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Arguments,<sp/>Function-&gt;NumArgsIn,</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgIn,<sp/>Function-&gt;NumArgsOut,</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgOut,</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;Error</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/>Outputs<sp/>=<sp/>ArgOut;</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Invoked<sp/>||<sp/>Error)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;InvokeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Error-&gt;message);</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Results,<sp/>**Result;</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Function-&gt;NumResults<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Results<sp/>=<sp/>ml_tuple(Function-&gt;NumResults);</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>((<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Results)-&gt;Values;</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Results<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>&amp;Results;</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Free<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>*Inst<sp/>=<sp/>Function-&gt;InstOut;<sp/>Inst-&gt;Opcode<sp/>!=<sp/>GIB_DONE;)<sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((Inst++)-&gt;Opcode)<sp/>{</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_SKIP:<sp/>ArgOut++;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_BOOLEAN:<sp/>*Result++<sp/>=<sp/>ml_boolean((ArgOut++)-&gt;v_boolean);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT8:<sp/>*Result++<sp/>=<sp/>ml_integer((ArgOut++)-&gt;v_int8);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT8:<sp/>*Result++<sp/>=<sp/>ml_integer((ArgOut++)-&gt;v_uint8);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT16:<sp/>*Result++<sp/>=<sp/>ml_integer((ArgOut++)-&gt;v_int16);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT16:<sp/>*Result++<sp/>=<sp/>ml_integer((ArgOut++)-&gt;v_uint16);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT32:<sp/>*Result++<sp/>=<sp/>ml_integer((ArgOut++)-&gt;v_int32);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT32:<sp/>*Result++<sp/>=<sp/>ml_integer((ArgOut++)-&gt;v_uint32);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT64:<sp/>*Result++<sp/>=<sp/>ml_integer((ArgOut++)-&gt;v_int64);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT64:<sp/>*Result++<sp/>=<sp/>ml_integer((ArgOut++)-&gt;v_uint64);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_FLOAT:<sp/>*Result++<sp/>=<sp/>ml_real((ArgOut++)-&gt;v_float);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_DOUBLE:<sp/>*Result++<sp/>=<sp/>ml_real((ArgOut++)-&gt;v_double);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRING:<sp/>*Result++<sp/>=<sp/>ml_string((ArgOut++)-&gt;v_string,<sp/>-1);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY:<sp/>{</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY_ZERO:<sp/>{</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY_LENGTH:<sp/>{</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Aux<sp/>=<sp/>(Inst++)-&gt;Aux;</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*(*to_value)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size;</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>((Inst++)-&gt;Opcode)<sp/>{</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_BOOLEAN:<sp/>to_value<sp/>=<sp/>boolean_to_value;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gboolean);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT8:<sp/>to_value<sp/>=<sp/>int8_to_value;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint8);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT8:<sp/>to_value<sp/>=<sp/>uint8_to_value;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint8);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT16:<sp/>to_value<sp/>=<sp/>int16_to_value;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint16);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT16:<sp/>to_value<sp/>=<sp/>uint16_to_value;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint16);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT32:<sp/>to_value<sp/>=<sp/>int32_to_value;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint32);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT32:<sp/>to_value<sp/>=<sp/>uint32_to_value;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint32);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_INT64:<sp/>to_value<sp/>=<sp/>int64_to_value;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gint64);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UINT64:<sp/>to_value<sp/>=<sp/>uint64_to_value;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(guint64);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_FLOAT:<sp/>to_value<sp/>=<sp/>float_to_value;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gfloat);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_DOUBLE:<sp/>to_value<sp/>=<sp/>double_to_value;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gdouble);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRING:<sp/>to_value<sp/>=<sp/>string_to_value;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(gchararray);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_GTYPE:<sp/>to_value<sp/>=<sp/>gtype_to_value;<sp/>Size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GType);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//case<sp/>GIB_BYTES:<sp/>to_value<sp/>=<sp/>bytes_to_value;<sp/>Size<sp/>=<sp/>sizeof(gpointer);<sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>array<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Array<sp/>=<sp/>(ArgOut++)-&gt;v_pointer;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(to_value<sp/>==<sp/>int8_to_value<sp/>||<sp/>to_value<sp/>==<sp/>uint8_to_value)<sp/>{</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Array)<sp/>{</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>Outputs[Aux].v_int64;</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Buffer<sp/>=<sp/>snew(Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Buffer,<sp/>Array,<sp/>Length);</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Buffer[Length]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Result++<sp/>=<sp/>ml_string(Buffer,<sp/>Length);</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Result++<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*List<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Array)<sp/>{</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>Outputs[Aux].v_int64;</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Ptr<sp/>=<sp/>Array;</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Length;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(List,<sp/>to_value(Ptr,<sp/>NULL));</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ptr<sp/>+=<sp/>Size;</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Result++<sp/>=<sp/>List;</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Free)<sp/>{</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_free(Array);</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Free<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRUCT:<sp/>{</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref><sp/>*Instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structstruct__instance__t" kindref="compound">struct_instance_t</ref>);</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Type<sp/>=<sp/>Function-&gt;Aux[(Inst++)-&gt;Aux];</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Value<sp/>=<sp/>(ArgOut++)-&gt;v_pointer;</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Result++<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Instance;</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Free)<sp/>{</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>mark<sp/>instance<sp/>for<sp/>cleanup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Free<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_UNION:<sp/>{</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structunion__instance__t" kindref="compound">union_instance_t</ref><sp/>*Instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structunion__instance__t" kindref="compound">union_instance_t</ref>);</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Type<sp/>=<sp/>Function-&gt;Aux[(Inst++)-&gt;Aux];</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance-&gt;Value<sp/>=<sp/>(ArgOut++)-&gt;v_pointer;</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Result++<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Instance;</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Free)<sp/>{</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>mark<sp/>instance<sp/>for<sp/>cleanup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Free<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ENUM:<sp/>{</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structenum__t" kindref="compound">enum_t</ref><sp/>*)Function-&gt;Aux[(Inst++)-&gt;Aux];</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Result++<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Enum-&gt;ByIndex[(ArgOut++)-&gt;v_int];</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_OBJECT:<sp/>{</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structobject__t" kindref="compound">object_t</ref><sp/>*Object<sp/>=<sp/>(<ref refid="structobject__t" kindref="compound">object_t</ref><sp/>*)Function-&gt;Aux[(Inst++)-&gt;Aux];</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Result++<sp/>=<sp/>ml_gir_instance_get((ArgOut++)-&gt;v_pointer,<sp/>Object-&gt;Info);</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_HASH:<sp/>{</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structghash__to__map__t" kindref="compound">ghash_to_map_t</ref><sp/>Convert[1];</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convert-&gt;Map<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_to_value(&amp;Inst,<sp/>Function-&gt;Aux,<sp/>Convert-&gt;Key);</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_to_value(&amp;Inst,<sp/>Function-&gt;Aux,<sp/>Convert-&gt;Value);</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GHashTable<sp/>*Hash<sp/>=<sp/>(GHashTable<sp/>*)((ArgOut++)-&gt;v_pointer);</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_hash_table_foreach(Hash,<sp/>(GHFunc)ghash_to_map,<sp/>Convert);</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Result++<sp/>=<sp/>Convert-&gt;Map;</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Free)<sp/>{</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_hash_table_destroy(Hash);</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Free<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_FREE:<sp/>Free<sp/>=<sp/>1;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Results);</highlight></codeline>
<codeline lineno="3056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"></highlight></codeline>
<codeline lineno="3058"><highlight class="normal">ML_TYPE(GirFunctionT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;gir::function&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)gir_function_call</highlight></codeline>
<codeline lineno="3060"><highlight class="normal">);</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"></highlight></codeline>
<codeline lineno="3062"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*<sp/>ML_TYPED_FN(ml_method_wrap,<sp/>GirFunctionT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>**Types)<sp/>{</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Function;</highlight></codeline>
<codeline lineno="3064"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>type_param_size(GITypeInfo<sp/>*Info,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*NumAux)<sp/>{</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/>GITypeInfo<sp/>*ElementInfo<sp/>=<sp/>g_type_info_get_param_type(Info,<sp/>Index);</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(ElementInfo))<sp/>{</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/>BASIC_CASES_SIZE((*Size))</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INTERFACE:<sp/>*Size<sp/>+=<sp/>2;<sp/>(*NumAux)++;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>handle<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/>g_base_info_unref(ElementInfo);</highlight></codeline>
<codeline lineno="3074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"></highlight></codeline>
<codeline lineno="3076"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>type_param_inst(GITypeInfo<sp/>*Info,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/><ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>**Inst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*NumAux,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Aux)<sp/>{</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/>GITypeInfo<sp/>*ElementInfo<sp/>=<sp/>g_type_info_get_param_type(Info,<sp/>Index);</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(ElementInfo))<sp/>{</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/>BASIC_CASES_INST((*Inst))</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*InterfaceInfo<sp/>=<sp/>g_type_info_get_interface(ElementInfo);</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_base_info_get_type(InterfaceInfo))<sp/>{</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_CALLBACK:</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*Inst)++)-&gt;Opcode<sp/>=<sp/>GIB_CALLBACK;</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*Inst)++)-&gt;Aux<sp/>=<sp/>*NumAux;</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Aux[(*NumAux)++]<sp/>=<sp/>callback_info_lookup((GICallbackInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_STRUCT:</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*Inst)++)-&gt;Opcode<sp/>=<sp/>GIB_STRUCT;</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*Inst)++)-&gt;Aux<sp/>=<sp/>*NumAux;</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Aux[(*NumAux)++]<sp/>=<sp/>struct_info_lookup((GIStructInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_UNION:</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*Inst)++)-&gt;Opcode<sp/>=<sp/>GIB_UNION;</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*Inst)++)-&gt;Aux<sp/>=<sp/>*NumAux;</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Aux[(*NumAux)++]<sp/>=<sp/>union_info_lookup((GIUnionInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_ENUM:</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FLAGS:</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*Inst)++)-&gt;Opcode<sp/>=<sp/>GIB_ENUM;</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*Inst)++)-&gt;Aux<sp/>=<sp/>*NumAux;</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Aux[(*NumAux)++]<sp/>=<sp/>enum_info_lookup((GIEnumInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_OBJECT:</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*Inst)++)-&gt;Opcode<sp/>=<sp/>GIB_OBJECT;</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*Inst)++)-&gt;Aux<sp/>=<sp/>*NumAux;</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Aux[(*NumAux)++]<sp/>=<sp/>object_info_lookup((GIObjectInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INTERFACE:</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*Inst)++)-&gt;Opcode<sp/>=<sp/>GIB_OBJECT;</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*Inst)++)-&gt;Aux<sp/>=<sp/>*NumAux;</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Aux[(*NumAux)++]<sp/>=<sp/>interface_info_lookup((GIInterfaceInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>raise<sp/>error<sp/>or<sp/>add<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(InterfaceInfo);</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>handle<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/>g_base_info_unref(ElementInfo);</highlight></codeline>
<codeline lineno="3124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"></highlight></codeline>
<codeline lineno="3126"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*function_info_compile(GIFunctionInfo<sp/>*Info)<sp/>{</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumArgs<sp/>=<sp/>g_callable_info_get_n_args(Info);</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarg__info__t" kindref="compound">arg_info_t</ref><sp/>Args[NumArgs];</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(Args,<sp/>0,<sp/>NumArgs<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structarg__info__t" kindref="compound">arg_info_t</ref>));</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumIn<sp/>=<sp/>0,<sp/>NumOut<sp/>=<sp/>0,<sp/>NumAux<sp/>=<sp/>0,<sp/>NumValues<sp/>=<sp/>0,<sp/>NumInputs<sp/>=<sp/>0,<sp/>NumOutputs<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>InSize<sp/>=<sp/>1,<sp/>OutSize<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>InSize<sp/>=<sp/>1,<sp/>OutSize<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/>GIFunctionInfoFlags<sp/>Flags<sp/>=<sp/>g_function_info_get_flags(Info);</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>GI_FUNCTION_IS_METHOD)<sp/>{</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumInputs++;</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumIn++;</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize++;</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumArgs;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_callable_info_load_arg(Info,<sp/>I,<sp/>Args[I].Info);</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIArgInfo<sp/>*ArgInfo<sp/>=<sp/>Args[I].Info;</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIDirection<sp/>Direction<sp/>=<sp/>Args[I].Direction<sp/>=<sp/>g_arg_info_get_direction(ArgInfo);</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_arg_info_load_type(ArgInfo,<sp/>Args[I].Type);</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Direction<sp/>==<sp/>GI_DIRECTION_IN<sp/>||<sp/>Direction<sp/>==<sp/>GI_DIRECTION_INOUT)<sp/>{</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumInputs++;</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[I].In<sp/>=<sp/>NumIn++;</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(Args[I].Type))<sp/>{</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ARRAY:<sp/>{</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>g_type_info_get_array_length(Args[I].Type);</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumInputs--;</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[Length].SkipIn<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_size(Args[I].Type,<sp/>0,<sp/>&amp;InSize,<sp/>&amp;NumAux);</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*InterfaceInfo<sp/>=<sp/>g_type_info_get_interface(Args[I].Type);</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_base_info_equal(InterfaceInfo,<sp/>GValueInfo))<sp/>{</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[I].Value<sp/>=<sp/>NumValues++;</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_base_info_equal(InterfaceInfo,<sp/>DestroyNotifyInfo))<sp/>{</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumInputs--;</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[I].SkipIn<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumAux++;</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_base_info_get_type(InterfaceInfo)<sp/>==<sp/>GI_INFO_TYPE_CALLBACK)<sp/>{</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Closure<sp/>=<sp/>g_arg_info_get_closure(ArgInfo);</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Closure<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumInputs--;</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[Closure].SkipIn<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(InterfaceInfo);</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GLIST:</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GSLIST:</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_size(Args[I].Type,<sp/>0,<sp/>&amp;InSize,<sp/>&amp;NumAux);</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GHASH:</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_size(Args[I].Type,<sp/>0,<sp/>&amp;InSize,<sp/>&amp;NumAux);</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_size(Args[I].Type,<sp/>1,<sp/>&amp;InSize,<sp/>&amp;NumAux);</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Direction<sp/>==<sp/>GI_DIRECTION_OUT<sp/>||<sp/>Direction<sp/>==<sp/>GI_DIRECTION_INOUT)<sp/>{</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumOut++;</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_arg_info_is_caller_allocates(Args[I].Info))<sp/>{</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(Args[I].Type))<sp/>{</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ARRAY:<sp/>{</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>g_type_info_get_array_length(Args[I].Type);</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumInputs++;</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[I].In<sp/>=<sp/>NumIn++;</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumInputs--;</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[Length].SkipIn<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_size(Args[I].Type,<sp/>0,<sp/>&amp;InSize,<sp/>&amp;NumAux);</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*InterfaceInfo<sp/>=<sp/>g_type_info_get_interface(Args[I].Type);</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_base_info_get_type(InterfaceInfo)<sp/>==<sp/>GI_INFO_TYPE_STRUCT)<sp/>{</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumInputs++;</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumAux++;</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(InterfaceInfo);</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[I].Out<sp/>=<sp/>NumOutputs++;</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(Args[I].Type))<sp/>{</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_VOID:</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[I].SkipOut<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ARRAY:<sp/>{</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_arg_info_get_ownership_transfer(Args[I].Info)<sp/>!=<sp/>GI_TRANSFER_NOTHING)<sp/>{</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>g_type_info_get_array_length(Args[I].Type);</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[Length].SkipOut<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//InSize<sp/>-=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_size(Args[I].Type,<sp/>0,<sp/>&amp;OutSize,<sp/>&amp;NumAux);</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*InterfaceInfo<sp/>=<sp/>g_type_info_get_interface(Args[I].Type);</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_base_info_get_type(InterfaceInfo))<sp/>{</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_STRUCT:</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_ENUM:</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FLAGS:<sp/>{</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumAux++;</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutSize<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(InterfaceInfo);</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GLIST:</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GSLIST:</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_size(Args[I].Type,<sp/>0,<sp/>&amp;OutSize,<sp/>&amp;NumAux);</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GHASH:</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_size(Args[I].Type,<sp/>0,<sp/>&amp;OutSize,<sp/>&amp;NumAux);</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_size(Args[I].Type,<sp/>1,<sp/>&amp;OutSize,<sp/>&amp;NumAux);</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/>GITypeInfo<sp/>Return[1];</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/>g_callable_info_load_return_type((GICallableInfo<sp/>*)Info,<sp/>Return);</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumResults<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_callable_info_get_caller_owns((GICallableInfo<sp/>*)Info)<sp/>!=<sp/>GI_TRANSFER_NOTHING)<sp/>{</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(Return))<sp/>{</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_VOID:</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumResults<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ARRAY:<sp/>{</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>g_type_info_get_array_length(Return);</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[Length].SkipOut<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_size(Return,<sp/>0,<sp/>&amp;OutSize,<sp/>&amp;NumAux);</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INTERFACE:</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutSize<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumAux++;</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GLIST:</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GSLIST:</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_size(Return,<sp/>0,<sp/>&amp;OutSize,<sp/>&amp;NumAux);</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GHASH:</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_size(Return,<sp/>0,<sp/>&amp;OutSize,<sp/>&amp;NumAux);</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_size(Return,<sp/>1,<sp/>&amp;OutSize,<sp/>&amp;NumAux);</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutSize<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgir__function__t" kindref="compound">gir_function_t</ref><sp/>*Function<sp/>=<sp/>xnew(<ref refid="structgir__function__t" kindref="compound">gir_function_t</ref>,<sp/>NumAux,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Type<sp/>=<sp/>GirFunctionT;</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;Info<sp/>=<sp/>Info;</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/>g_base_info_ref(Info);</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;NumInputs<sp/>=<sp/>NumInputs;</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;NumOutputs<sp/>=<sp/>NumOutputs;</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;NumArgsIn<sp/>=<sp/>NumIn;</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;NumArgsOut<sp/>=<sp/>NumOut;</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;NumValues<sp/>=<sp/>NumValues;</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>*InstIn<sp/>=<sp/>Function-&gt;InstIn<sp/>=<sp/>(<ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>*)snew(InSize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref>));</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>*InstOut<sp/>=<sp/>Function-&gt;InstOut<sp/>=<sp/>(<ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>*)snew(OutSize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref>));</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/>NumAux<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags<sp/>&amp;<sp/>GI_FUNCTION_IS_METHOD)<sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_SELF;</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_callable_info_get_caller_owns((GICallableInfo<sp/>*)Info)<sp/>!=<sp/>GI_TRANSFER_NOTHING)<sp/>{</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_FREE;</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(Return))<sp/>{</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_VOID:</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/>BASIC_CASES_INST(InstOut)</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ARRAY:<sp/>{</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>g_type_info_get_array_length(Return);</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_ARRAY_LENGTH;</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Aux<sp/>=<sp/>Args[Length].Out;</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_type_info_is_zero_terminated(Return))<sp/>{</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_ARRAY_ZERO;</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_ARRAY;</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_inst(Return,<sp/>0,<sp/>&amp;InstOut,<sp/>&amp;NumAux,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*InterfaceInfo<sp/>=<sp/>g_type_info_get_interface(Return);</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_base_info_get_type(InterfaceInfo))<sp/>{</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_CALLBACK:</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_CALLBACK;</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Aux[NumAux++]<sp/>=<sp/>callback_info_lookup((GICallbackInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_STRUCT:</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_STRUCT;</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Aux[NumAux++]<sp/>=<sp/>struct_info_lookup((GIStructInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_UNION:</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_UNION;</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Aux[NumAux++]<sp/>=<sp/>union_info_lookup((GIUnionInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_ENUM:</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FLAGS:</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_ENUM;</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Aux[NumAux++]<sp/>=<sp/>enum_info_lookup((GIEnumInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_OBJECT:</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_OBJECT;</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Aux[NumAux++]<sp/>=<sp/>object_info_lookup((GIObjectInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INTERFACE:</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_OBJECT;</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Aux[NumAux++]<sp/>=<sp/>interface_info_lookup((GIInterfaceInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>raise<sp/>error<sp/>or<sp/>add<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(InterfaceInfo);</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GLIST:<sp/>{</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_LIST;</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_inst(Return,<sp/>0,<sp/>&amp;InstOut,<sp/>&amp;NumAux,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GSLIST:<sp/>{</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_SLIST;</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_inst(Return,<sp/>0,<sp/>&amp;InstOut,<sp/>&amp;NumAux,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GHASH:<sp/>{</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_HASH;</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_inst(Return,<sp/>0,<sp/>&amp;InstOut,<sp/>&amp;NumAux,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_inst(Return,<sp/>1,<sp/>&amp;InstOut,<sp/>&amp;NumAux,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>handle<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumArgs;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIDirection<sp/>Direction<sp/>=<sp/>Args[I].Direction;</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Direction<sp/>==<sp/>GI_DIRECTION_IN<sp/>||<sp/>Direction<sp/>==<sp/>GI_DIRECTION_INOUT)<sp/>{</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Args[I].SkipIn)<sp/>{</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_SKIP;</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(Args[I].Type))<sp/>{</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BASIC_CASES_INST(InstIn)</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ARRAY:<sp/>{</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>g_type_info_get_array_length(Args[I].Type);</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_ARRAY_LENGTH;</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Aux<sp/>=<sp/>Args[Length].In;</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_type_info_is_zero_terminated(Args[I].Type))<sp/>{</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_ARRAY_ZERO;</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_ARRAY;</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_inst(Args[I].Type,<sp/>0,<sp/>&amp;InstIn,<sp/>&amp;NumAux,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*InterfaceInfo<sp/>=<sp/>g_type_info_get_interface(Args[I].Type);</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_base_info_equal(InterfaceInfo,<sp/>GValueInfo))<sp/>{</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_VALUE;</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Aux<sp/>=<sp/>Args[I].Value;</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_base_info_get_type(InterfaceInfo))<sp/>{</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_CALLBACK:<sp/>{</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_CALLBACK;</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Aux[NumAux++]<sp/>=<sp/>callback_info_lookup((GICallbackInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_STRUCT:<sp/>{</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_STRUCT;</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Aux[NumAux++]<sp/>=<sp/>struct_info_lookup((GIStructInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_UNION:<sp/>{</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_UNION;</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Aux[NumAux++]<sp/>=<sp/>union_info_lookup((GIUnionInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_ENUM:</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FLAGS:<sp/>{</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_ENUM;</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Aux[NumAux++]<sp/>=<sp/>enum_info_lookup((GIEnumInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_OBJECT:<sp/>{</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OBJECT;</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Aux[NumAux++]<sp/>=<sp/>object_info_lookup((GIObjectInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OBJECT;</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Aux[NumAux++]<sp/>=<sp/>interface_info_lookup((GIInterfaceInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>raise<sp/>error<sp/>or<sp/>add<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(InterfaceInfo);</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GLIST:<sp/>{</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_LIST;</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_inst(Args[I].Type,<sp/>0,<sp/>&amp;InstIn,<sp/>&amp;NumAux,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GSLIST:<sp/>{</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_SLIST;</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_inst(Args[I].Type,<sp/>0,<sp/>&amp;InstIn,<sp/>&amp;NumAux,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GHASH:<sp/>{</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_HASH;</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_inst(Args[I].Type,<sp/>0,<sp/>&amp;InstIn,<sp/>&amp;NumAux,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_inst(Args[I].Type,<sp/>1,<sp/>&amp;InstIn,<sp/>&amp;NumAux,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_SKIP;</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Direction<sp/>==<sp/>GI_DIRECTION_OUT<sp/>||<sp/>Direction<sp/>==<sp/>GI_DIRECTION_INOUT)<sp/>{</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_arg_info_is_caller_allocates(Args[I].Info))<sp/>{</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(Args[I].Type))<sp/>{</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ARRAY:<sp/>{</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>g_type_info_get_array_length(Args[I].Type);</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_ARRAY_LENGTH;</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Aux<sp/>=<sp/>Args[Length].In;</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_ARRAY;</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_inst(Args[I].Type,<sp/>0,<sp/>&amp;InstIn,<sp/>&amp;NumAux,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*InterfaceInfo<sp/>=<sp/>g_type_info_get_interface(Args[I].Type);</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_base_info_get_type(InterfaceInfo))<sp/>{</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_STRUCT:<sp/>{</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_STRUCT;</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Aux[NumAux++]<sp/>=<sp/>struct_info_lookup((GIStructInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(InterfaceInfo);</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Args[I].SkipOut)<sp/>++NumResults;</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_type_info_get_tag(Args[I].Type))<sp/>{</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_VOID:</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_VALUE;</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_SKIP;</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_BOOLEAN:</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_VALUE;</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>Args[I].SkipOut<sp/>?<sp/>GIB_SKIP<sp/>:<sp/>GIB_BOOLEAN;</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT8:</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_VALUE;</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>Args[I].SkipOut<sp/>?<sp/>GIB_SKIP<sp/>:<sp/>GIB_INT8;</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT8:</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_VALUE;</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>Args[I].SkipOut<sp/>?<sp/>GIB_SKIP<sp/>:<sp/>GIB_UINT8;</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT16:</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_VALUE;</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>Args[I].SkipOut<sp/>?<sp/>GIB_SKIP<sp/>:<sp/>GIB_INT16;</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT16:</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_VALUE;</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>Args[I].SkipOut<sp/>?<sp/>GIB_SKIP<sp/>:<sp/>GIB_UINT16;</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT32:</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_VALUE;</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>Args[I].SkipOut<sp/>?<sp/>GIB_SKIP<sp/>:<sp/>GIB_INT32;</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT32:</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UNICHAR:</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_VALUE;</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>Args[I].SkipOut<sp/>?<sp/>GIB_SKIP<sp/>:<sp/>GIB_UINT32;</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INT64:</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_VALUE;</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>Args[I].SkipOut<sp/>?<sp/>GIB_SKIP<sp/>:<sp/>GIB_INT64;</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UINT64:</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_VALUE;</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>Args[I].SkipOut<sp/>?<sp/>GIB_SKIP<sp/>:<sp/>GIB_UINT64;</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_FLOAT:</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_VALUE;</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>Args[I].SkipOut<sp/>?<sp/>GIB_SKIP<sp/>:<sp/>GIB_FLOAT;</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_DOUBLE:</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_VALUE;</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>Args[I].SkipOut<sp/>?<sp/>GIB_SKIP<sp/>:<sp/>GIB_DOUBLE;</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GTYPE:</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_VALUE;</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>Args[I].SkipOut<sp/>?<sp/>GIB_SKIP<sp/>:<sp/>GIB_GTYPE;</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_UTF8:</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_VALUE;</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>Args[I].SkipOut<sp/>?<sp/>GIB_SKIP<sp/>:<sp/>GIB_STRING;</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_FILENAME:</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_VALUE;</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>Args[I].SkipOut<sp/>?<sp/>GIB_SKIP<sp/>:<sp/>GIB_STRING;</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_ARRAY:<sp/>{</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_arg_info_get_ownership_transfer(Args[I].Info)<sp/>!=<sp/>GI_TRANSFER_NOTHING)<sp/>{</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_FREE;</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>g_type_info_get_array_length(Args[I].Type);</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_VALUE;</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_ARRAY_LENGTH;</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Aux=<sp/>Args[Length].Out;</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_ARRAY;</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_inst(Args[I].Type,<sp/>0,<sp/>&amp;InstOut,<sp/>&amp;NumAux,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_INTERFACE:<sp/>{</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*InterfaceInfo<sp/>=<sp/>g_type_info_get_interface(Args[I].Type);</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(g_base_info_get_type(InterfaceInfo))<sp/>{</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_STRUCT:<sp/>{</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_STRUCT;</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Aux[NumAux++]<sp/>=<sp/>struct_info_lookup((GIStructInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_ENUM:</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_INFO_TYPE_FLAGS:<sp/>{</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_ENUM;</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Aux<sp/>=<sp/>NumAux;</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Function-&gt;Aux[NumAux++]<sp/>=<sp/>enum_info_lookup((GIEnumInfo<sp/>*)InterfaceInfo);</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_unref(InterfaceInfo);</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GLIST:<sp/>{</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_LIST;</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_inst(Args[I].Type,<sp/>0,<sp/>&amp;InstOut,<sp/>&amp;NumAux,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GSLIST:<sp/>{</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_SLIST;</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_inst(Args[I].Type,<sp/>0,<sp/>&amp;InstOut,<sp/>&amp;NumAux,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GI_TYPE_TAG_GHASH:<sp/>{</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_HASH;</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_inst(Args[I].Type,<sp/>0,<sp/>&amp;InstOut,<sp/>&amp;NumAux,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_param_inst(Args[I].Type,<sp/>1,<sp/>&amp;InstOut,<sp/>&amp;NumAux,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>GIB_OUTPUT_VALUE;</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/>(InstIn++)-&gt;Opcode<sp/>=<sp/>(InstOut++)-&gt;Opcode<sp/>=<sp/>GIB_DONE;</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InstIn<sp/>-<sp/>Function-&gt;InstIn<sp/>!=<sp/>InSize)<sp/>{</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//fprintf(stderr,<sp/>&quot;Function<sp/>=<sp/>0x%lx\n&quot;,<sp/>Function);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Warning:<sp/>InSize<sp/>=<sp/>%d,<sp/>InstIn<sp/>-<sp/>Function-&gt;InstIn<sp/>=<sp/>%ld\n&quot;</highlight><highlight class="normal">,<sp/>InSize,<sp/>InstIn<sp/>-<sp/>Function-&gt;InstIn);</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//asm(&quot;int3&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InstOut<sp/>-<sp/>Function-&gt;InstOut<sp/>!=<sp/>OutSize)<sp/>{</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//fprintf(stderr,<sp/>&quot;Function<sp/>=<sp/>0x%lx\n&quot;,<sp/>Function);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GIBaseInfo<sp/>*Container<sp/>=<sp/>g_base_info_get_container(Info);</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Warning:<sp/>OutSize<sp/>=<sp/>%d,<sp/>InstOut<sp/>-<sp/>Function-&gt;InstOut<sp/>=<sp/>%ld\n\t%s\n\t%s\n\t%s\n&quot;</highlight><highlight class="normal">,<sp/>OutSize,<sp/>InstOut<sp/>-<sp/>Function-&gt;InstOut,</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_get_namespace(Info),</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Container<sp/>?<sp/>g_base_info_get_name(Container)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&lt;none&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_base_info_get_name(Info)</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//asm(&quot;int3&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/>Function-&gt;NumResults<sp/>=<sp/>NumResults;</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Function;</highlight></codeline>
<codeline lineno="3670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"></highlight></codeline>
<codeline lineno="3672"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*GIBInstNames[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_DONE]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;done&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_BOOLEAN]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_INT8]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;int8&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_UINT8]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;uint8&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_INT16]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;int16&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_UINT16]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;uint16&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_INT32]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;int32&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_UINT32]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;uint32&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_INT64]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;int64&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_UINT64]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;uint64&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_FLOAT]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;float&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_DOUBLE]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_STRING]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_GTYPE]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;gtype&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//[GIB_BYTES]<sp/>=<sp/>&quot;bytes&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_ARRAY]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;array&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_CALLBACK]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;callback&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_STRUCT]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;struct&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_ENUM]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;enum&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_OBJECT]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;object&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_SELF]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;self&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_VALUE]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_LIST]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;list&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_SLIST]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;slist&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_HASH]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hash&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_ERROR]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//[GIB_BYTES_FIXED]<sp/>=<sp/>&quot;bytes_fixed&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//[GIB_BYTES_LENGTH]<sp/>=<sp/>&quot;bytes_length&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_ARRAY_ZERO]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;array_zero&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_ARRAY_FIXED]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;array_fixed&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_ARRAY_LENGTH]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;array_length&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_SKIP]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;skip&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_OUTPUT_VALUE]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;output_value&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_OUTPUT_ARRAY]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;output_array&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_OUTPUT_ARRAY_LENGTH]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;output_array_length&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/>[GIB_OUTPUT_STRUCT]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;output_struct&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3709"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"></highlight></codeline>
<codeline lineno="3711"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>type_list(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/><ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>**Inst,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Aux)<sp/>{</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/>gi_opcode_t<sp/>Opcode<sp/>=<sp/>((*Inst)++)-&gt;Opcode;</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>GIBInstNames[Opcode]);</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Opcode)<sp/>{</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_CALLBACK:</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRUCT:</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ENUM:</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_OBJECT:<sp/>{</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Aux[((*Inst)++)-&gt;Aux];</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(%s)&quot;</highlight><highlight class="normal">,<sp/>Type-&gt;Name);</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"></highlight></codeline>
<codeline lineno="3726"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>callback_list(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/><ref refid="structcallback__t" kindref="compound">callback_t</ref><sp/>*Callback,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Indent)<sp/>{</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>*Inst<sp/>=<sp/>Callback-&gt;InstIn;<sp/>Inst-&gt;Opcode<sp/>!=<sp/>GIB_DONE;)<sp/>{</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gi_opcode_t<sp/>Opcode<sp/>=<sp/>(Inst++)-&gt;Opcode;</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%s\tin<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Indent,<sp/>GIBInstNames[Opcode]);</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Opcode)<sp/>{</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY_LENGTH:</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_VALUE:</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_OUTPUT_ARRAY_LENGTH:</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>(Inst++)-&gt;Aux);</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>GIBInstNames[(Inst++)-&gt;Opcode]);</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY_ZERO:</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY:</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_LIST:</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_SLIST:</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_list(Buffer,<sp/>&amp;Inst,<sp/>Callback-&gt;Aux);</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_HASH:</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_list(Buffer,<sp/>&amp;Inst,<sp/>Callback-&gt;Aux);</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_list(Buffer,<sp/>&amp;Inst,<sp/>Callback-&gt;Aux);</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_CALLBACK:</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRUCT:</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ENUM:</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_OBJECT:<sp/>{</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Callback-&gt;Aux[(Inst++)-&gt;Aux];</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(%s)&quot;</highlight><highlight class="normal">,<sp/>Type-&gt;Name);</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%s\tcall(%d)\n&quot;</highlight><highlight class="normal">,<sp/>Indent,<sp/>Callback-&gt;Provided);</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>*Inst<sp/>=<sp/>Callback-&gt;InstOut;<sp/>Inst-&gt;Opcode<sp/>!=<sp/>GIB_DONE;)<sp/>{</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gi_opcode_t<sp/>Opcode<sp/>=<sp/>(Inst++)-&gt;Opcode;</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%s\tout<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Indent,<sp/>GIBInstNames[Opcode]);</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Opcode)<sp/>{</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY_LENGTH:</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_VALUE:</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>(Inst++)-&gt;Aux);</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>GIBInstNames[(Inst++)-&gt;Opcode]);</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY_ZERO:</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY:</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_LIST:</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_SLIST:</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_list(Buffer,<sp/>&amp;Inst,<sp/>Callback-&gt;Aux);</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_HASH:</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_list(Buffer,<sp/>&amp;Inst,<sp/>Callback-&gt;Aux);</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_list(Buffer,<sp/>&amp;Inst,<sp/>Callback-&gt;Aux);</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_CALLBACK:</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRUCT:</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ENUM:</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_OBJECT:<sp/>{</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Callback-&gt;Aux[(Inst++)-&gt;Aux];</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(%s)&quot;</highlight><highlight class="normal">,<sp/>Type-&gt;Name);</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"></highlight></codeline>
<codeline lineno="3791"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;list&quot;</highlight><highlight class="normal">,<sp/>GirCallbackT)<sp/>{</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcallback__t" kindref="compound">callback_t</ref><sp/>*Callback<sp/>=<sp/>(<ref refid="structcallback__t" kindref="compound">callback_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/>callback_list(Buffer,<sp/>Callback,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_to_string(Buffer);</highlight></codeline>
<codeline lineno="3796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"></highlight></codeline>
<codeline lineno="3798"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;list&quot;</highlight><highlight class="normal">,<sp/>GirFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structgir__function__t" kindref="compound">gir_function_t</ref><sp/>*Function<sp/>=<sp/>(<ref refid="structgir__function__t" kindref="compound">gir_function_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\tinputs<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>Function-&gt;NumInputs);</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\toutputs<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>Function-&gt;NumResults);</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>*Inst<sp/>=<sp/>Function-&gt;InstIn;<sp/>Inst-&gt;Opcode<sp/>!=<sp/>GIB_DONE;)<sp/>{</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gi_opcode_t<sp/>Opcode<sp/>=<sp/>(Inst++)-&gt;Opcode;</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\tin<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>GIBInstNames[Opcode]);</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Opcode)<sp/>{</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY_LENGTH:</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_VALUE:</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_OUTPUT_ARRAY_LENGTH:</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>(Inst++)-&gt;Aux);</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>GIBInstNames[(Inst++)-&gt;Opcode]);</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY_ZERO:</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY:</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_LIST:</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_SLIST:</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_list(Buffer,<sp/>&amp;Inst,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_HASH:</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_list(Buffer,<sp/>&amp;Inst,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_list(Buffer,<sp/>&amp;Inst,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_CALLBACK:<sp/>{</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcallback__t" kindref="compound">callback_t</ref><sp/>*Callback<sp/>=<sp/>(<ref refid="structcallback__t" kindref="compound">callback_t</ref><sp/>*)Function-&gt;Aux[(Inst++)-&gt;Aux];</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(%s)\n&quot;</highlight><highlight class="normal">,<sp/>Callback-&gt;Base.Name);</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callback_list(Buffer,<sp/>Callback,<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRUCT:</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ENUM:</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_OBJECT:</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_OUTPUT_STRUCT:<sp/>{</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Function-&gt;Aux[(Inst++)-&gt;Aux];</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(%s)&quot;</highlight><highlight class="normal">,<sp/>Type-&gt;Name);</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>g_base_info_get_name((GIBaseInfo<sp/>*)Function-&gt;Info);</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\t%s(%d,<sp/>%d)\n&quot;</highlight><highlight class="normal">,<sp/>Name,<sp/>Function-&gt;NumArgsIn,<sp/>Function-&gt;NumArgsOut);</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="uniongi__inst__t" kindref="compound">gi_inst_t</ref><sp/>*Inst<sp/>=<sp/>Function-&gt;InstOut;<sp/>Inst-&gt;Opcode<sp/>!=<sp/>GIB_DONE;)<sp/>{</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gi_opcode_t<sp/>Opcode<sp/>=<sp/>(Inst++)-&gt;Opcode;</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\tout<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>GIBInstNames[Opcode]);</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Opcode)<sp/>{</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY_LENGTH:</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_VALUE:</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>(Inst++)-&gt;Aux);</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>GIBInstNames[(Inst++)-&gt;Opcode]);</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY_ZERO:</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ARRAY:</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_LIST:</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_SLIST:</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_list(Buffer,<sp/>&amp;Inst,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_HASH:</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_list(Buffer,<sp/>&amp;Inst,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_list(Buffer,<sp/>&amp;Inst,<sp/>Function-&gt;Aux);</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_CALLBACK:</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_STRUCT:</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_ENUM:</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GIB_OBJECT:<sp/>{</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Function-&gt;Aux[(Inst++)-&gt;Aux];</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(%s)&quot;</highlight><highlight class="normal">,<sp/>Type-&gt;Name);</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>strlen(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_to_string(Buffer);</highlight></codeline>
<codeline lineno="3873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"></highlight></codeline>
<codeline lineno="3875"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_gir_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals)<sp/>{</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//g_setenv(&quot;G_SLICE&quot;,<sp/>&quot;always-malloc&quot;,<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/>GError<sp/>*Error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/>g_irepository_require(NULL,<sp/></highlight><highlight class="stringliteral">&quot;GLib&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>0,<sp/>&amp;Error);</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/>g_irepository_require(NULL,<sp/></highlight><highlight class="stringliteral">&quot;GObject&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>0,<sp/>&amp;Error);</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/>DestroyNotifyInfo<sp/>=<sp/>g_irepository_find_by_name(NULL,<sp/></highlight><highlight class="stringliteral">&quot;GLib&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;DestroyNotify&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/>GValueInfo<sp/>=<sp/>g_irepository_find_by_name(NULL,<sp/></highlight><highlight class="stringliteral">&quot;GObject&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_typed_fn_set(GirTypelibT,<sp/>ml_iterate,<sp/>typelib_iterate);</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_typed_fn_set(TypelibIterT,<sp/>ml_iter_next,<sp/>typelib_iter_next);</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_typed_fn_set(TypelibIterT,<sp/>ml_iter_value,<sp/>typelib_iter_value);</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_typed_fn_set(TypelibIterT,<sp/>ml_iter_key,<sp/>typelib_iter_key);</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/>MLQuark<sp/>=<sp/>g_quark_from_static_string(</highlight><highlight class="stringliteral">&quot;&lt;&lt;minilang&gt;&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/>MLType<sp/>=<sp/>g_pointer_type_register_static(</highlight><highlight class="stringliteral">&quot;minilang&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/>ObjectInstanceNil<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structobject__instance__t" kindref="compound">object_instance_t</ref>);</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/>ObjectInstanceNil-&gt;Type<sp/>=<sp/>(<ref refid="structobject__t" kindref="compound">object_t</ref><sp/>*)GirObjectInstanceT;</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ml_typed_fn_set(EnumT,<sp/>ml_iterate,<sp/>enum_iterate);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/>GirObjectT-&gt;call<sp/>=<sp/>MLTypeT-&gt;call;</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/>GirStructT-&gt;call<sp/>=<sp/>MLTypeT-&gt;call;</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_gir_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_parent((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)GInputStreamT,<sp/>MLStreamT);</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_parent((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)GOutputStreamT,<sp/>MLStreamT);</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_SCHEDULER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;sleep&quot;</highlight><highlight class="normal">,<sp/>MLSleep);</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(GirTypelibT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;install&quot;</highlight><highlight class="normal">,<sp/>GirInstall);</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;gir&quot;</highlight><highlight class="normal">,<sp/>GirTypelibT);</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_LIBRARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_library_register(</highlight><highlight class="stringliteral">&quot;gir&quot;</highlight><highlight class="normal">,<sp/>GirModule);</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3904"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_gir.c"/>
  </compounddef>
</doxygen>
