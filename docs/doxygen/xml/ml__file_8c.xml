<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__file_8c" kind="file" language="C++">
    <compoundname>ml_file.c</compoundname>
    <includes refid="ml__file_8h" local="yes">ml_file.h</includes>
    <includes refid="ml__object_8h" local="yes">ml_object.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes refid="ml__stream_8h" local="yes">ml_stream.h</includes>
    <includes refid="ml__time_8h" local="yes">ml_time.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">dirent.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="yes">ml_file_init.c</includes>
    <incdepgraph>
      <node id="14">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_file.c</label>
        <link refid="ml__file_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ml_file.h</label>
        <link refid="ml__file_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ml_object.h</label>
        <link refid="ml__object_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ml_stream.h</label>
        <link refid="ml__stream_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>ml_time.h</label>
        <link refid="ml__time_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="25">
        <label>dirent.h</label>
      </node>
      <node id="24">
        <label>errno.h</label>
      </node>
      <node id="20">
        <label>gc/gc.h</label>
      </node>
      <node id="17">
        <label>limits.h</label>
      </node>
      <node id="16">
        <label>ml_config.h</label>
      </node>
      <node id="27">
        <label>ml_file_init.c</label>
      </node>
      <node id="8">
        <label>setjmp.h</label>
      </node>
      <node id="12">
        <label>stdarg.h</label>
      </node>
      <node id="15">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
      <node id="26">
        <label>sys/stat.h</label>
      </node>
      <node id="23">
        <label>time.h</label>
      </node>
      <node id="6">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__file__t" prot="public">ml_file_t</innerclass>
    <innerclass refid="structml__file__stat__t" prot="public">ml_file_stat_t</innerclass>
    <innerclass refid="structml__dir__t" prot="public">ml_dir_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__file_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;file&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="14" column="10" bodyfile="src/ml_file.c" bodystart="14" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ml__file_8c_1ab7a7faa8fe8cd6bce49b6eef557c6e00" prot="public" static="no">
        <type>struct ml_file_t</type>
        <definition>typedef struct ml_file_t ml_file_t</definition>
        <argsstring></argsstring>
        <name>ml_file_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="19" column="11"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ml__file_8c_1a544dc6ee2538da2927290563fdc51d00" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLFileStatT[1]</definition>
        <argsstring>[1]</argsstring>
        <name>MLFileStatT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="191" column="18" declfile="src/ml_file.c" declline="191" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__file_8c_1ab8f75feeb31f38b9b1952184b19a4c51" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLDirT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLDirT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="267" column="18" declfile="src/ml_file.c" declline="267" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="ml__file_8c_1a3f7ac0b4a7458cd55f4cd8a78f2f3c14" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLPOpenT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLPOpenT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="364" column="18" declfile="src/ml_file.c" declline="364" declcolumn="18"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__file_8c_1a3a8c9178f93ecf0d6f8b56c2cb2f2ef5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_file_finalize</definition>
        <argsstring>(ml_file_t *File, void *Data)</argsstring>
        <name>ml_file_finalize</name>
        <param>
          <type><ref refid="structml__file__t" kindref="compound">ml_file_t</ref> *</type>
          <declname>File</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="21" column="13" bodyfile="src/ml_file.c" bodystart="21" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a2e46e05833768630961aa68b62740e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLFileOpen)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLFileOpen</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>file</para>
        </inbodydescription>
        <location file="src/ml_file.c" line="28" column="1" bodyfile="src/ml_file.c" bodystart="28" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a63a5b91d8245caa5b106ad0df6318811" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLFileT,(MLStreamT), &quot;file&quot;,.Constructor=(ml_value_t *) MLFileOpen)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLFileT</type>
        </param>
        <param>
          <type>(MLStreamT)</type>
        </param>
        <param>
          <type>&quot;file&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLFileOpen</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="53" column="1" declfile="src/ml_file.c" declline="53" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1ad3ecfa9dce3f661d7a2d359d5018757a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE * ml_file_handle</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_file_handle</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="58" column="6" bodyfile="src/ml_file.c" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a1010ff20836645637f994ad6dbe3306b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_stream_read, MLFileT, ml_state_t *Caller, ml_file_t *File, void *Address, int Count)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_stream_read</type>
        </param>
        <param>
          <type>MLFileT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__file__t" kindref="compound">ml_file_t</ref> *</type>
          <declname>File</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="87" column="13" bodyfile="src/ml_file.c" bodystart="87" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a715e47171263272ed6e81d58a8ad41de" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_stream_write, MLFileT, ml_state_t *Caller, ml_file_t *File, const void *Address, int Count)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_stream_write</type>
        </param>
        <param>
          <type>MLFileT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__file__t" kindref="compound">ml_file_t</ref> *</type>
          <declname>File</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="94" column="13" bodyfile="src/ml_file.c" bodystart="94" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1af7193bdc97fa3058a699f9b3ae967e6a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_stream_seek, MLFileT, ml_state_t *Caller, ml_file_t *File, int64_t Offset, int Mode)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_stream_seek</type>
        </param>
        <param>
          <type>MLFileT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__file__t" kindref="compound">ml_file_t</ref> *</type>
          <declname>File</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>Offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="101" column="13" bodyfile="src/ml_file.c" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a437c18fa109d8660e482119293c14249" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_stream_tell, MLFileT, ml_state_t *Caller, ml_file_t *File)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_stream_tell</type>
        </param>
        <param>
          <type>MLFileT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__file__t" kindref="compound">ml_file_t</ref> *</type>
          <declname>File</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="106" column="13" bodyfile="src/ml_file.c" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a172a4123b7b10ab67d60d488f8066e27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;eof&quot;, MLFileT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;eof&quot;</type>
        </param>
        <param>
          <type>MLFileT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="111" column="1" bodyfile="src/ml_file.c" bodystart="111" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a1931c7df5bc302bec6017479ee59f354" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;flush&quot;, MLFileT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;flush&quot;</type>
        </param>
        <param>
          <type>MLFileT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="121" column="1" bodyfile="src/ml_file.c" bodystart="121" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a4534e258c5bb8d0149592c19c62a5e8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;close&quot;, MLFileT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;close&quot;</type>
        </param>
        <param>
          <type>MLFileT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="129" column="1" bodyfile="src/ml_file.c" bodystart="129" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1af850074c5112afbacd4f339bf50b228a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_file</definition>
        <argsstring>(FILE *Handle)</argsstring>
        <name>ml_file</name>
        <param>
          <type>FILE *</type>
          <declname>Handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="139" column="12" bodyfile="src/ml_file.c" bodystart="139" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a87356080046ff387eb336a5bb956dbf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLFileExists)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLFileExists</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>file</para>
        </inbodydescription>
        <location file="src/ml_file.c" line="147" column="1" bodyfile="src/ml_file.c" bodystart="147" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1ae630aeaf1875d25fd4dd182e820a69bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLFileRename)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLFileRename</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>file</para>
        </inbodydescription>
        <location file="src/ml_file.c" line="160" column="1" bodyfile="src/ml_file.c" bodystart="160" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a0e6f210d9115bd462bb88597c6bda08b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLFileUnlink)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLFileUnlink</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>file</para>
        </inbodydescription>
        <location file="src/ml_file.c" line="177" column="1" bodyfile="src/ml_file.c" bodystart="177" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a90bbd7d2fa238f49bcb01f6c6727eefb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLFileStat)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLFileStat</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="198" column="1" bodyfile="src/ml_file.c" bodystart="198" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a45a2ce2f351a97b346dd2abf13cc4e29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLFileStatT,(), &quot;file::stat&quot;,.Constructor=(ml_value_t *) MLFileStat)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLFileStatT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;file::stat&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLFileStat</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="213" column="1" declfile="src/ml_file.c" declline="213" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a64b9b9fee31c7e0eea8c9b66bf1b0679" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;size&quot;, MLFileStatT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;size&quot;</type>
        </param>
        <param>
          <type>MLFileStatT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="218" column="1" bodyfile="src/ml_file.c" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a849b1010c3059b1d08c2929763eaaca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;atime&quot;, MLFileStatT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;atime&quot;</type>
        </param>
        <param>
          <type>MLFileStatT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="223" column="1" bodyfile="src/ml_file.c" bodystart="223" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a26076e828cfff77be78c7ab17a8c8744" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;mtime&quot;, MLFileStatT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;mtime&quot;</type>
        </param>
        <param>
          <type>MLFileStatT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="228" column="1" bodyfile="src/ml_file.c" bodystart="228" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a9e7c9c1b4100cede1671b674dfb17961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;ctime&quot;, MLFileStatT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;ctime&quot;</type>
        </param>
        <param>
          <type>MLFileStatT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="233" column="1" bodyfile="src/ml_file.c" bodystart="233" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a2b7586cf31d2c5c3eebafc77c2bb1a0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ENUM2</definition>
        <argsstring>(MLFileModeT, &quot;file::mode&quot;, &quot;DIR&quot;, S_IFDIR, &quot;CHR&quot;, S_IFCHR, &quot;BLK&quot;, S_IFBLK, &quot;REG&quot;, S_IFREG, &quot;LNK&quot;, S_IFLNK, &quot;SOCK&quot;, S_IFSOCK, &quot;FIFO&quot;, S_IFIFO)</argsstring>
        <name>ML_ENUM2</name>
        <param>
          <type>MLFileModeT</type>
        </param>
        <param>
          <type>&quot;file::mode&quot;</type>
        </param>
        <param>
          <type>&quot;DIR&quot;</type>
        </param>
        <param>
          <type>S_IFDIR</type>
        </param>
        <param>
          <type>&quot;CHR&quot;</type>
        </param>
        <param>
          <type>S_IFCHR</type>
        </param>
        <param>
          <type>&quot;BLK&quot;</type>
        </param>
        <param>
          <type>S_IFBLK</type>
        </param>
        <param>
          <type>&quot;REG&quot;</type>
        </param>
        <param>
          <type>S_IFREG</type>
        </param>
        <param>
          <type>&quot;LNK&quot;</type>
        </param>
        <param>
          <type>S_IFLNK</type>
        </param>
        <param>
          <type>&quot;SOCK&quot;</type>
        </param>
        <param>
          <type>S_IFSOCK</type>
        </param>
        <param>
          <type>&quot;FIFO&quot;</type>
        </param>
        <param>
          <type>S_IFIFO</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="238" column="1" declfile="src/ml_file.c" declline="238" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1acac8df392b51863e05acb5c9471b505d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;mode&quot;, MLFileStatT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;mode&quot;</type>
        </param>
        <param>
          <type>MLFileStatT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="248" column="1" bodyfile="src/ml_file.c" bodystart="248" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a52fcbe500dd3a6d52bff6e59f54575a9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_dir_finalize</definition>
        <argsstring>(ml_dir_t *Dir, void *Data)</argsstring>
        <name>ml_dir_finalize</name>
        <param>
          <type><ref refid="structml__dir__t" kindref="compound">ml_dir_t</ref> *</type>
          <declname>Dir</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="260" column="13" bodyfile="src/ml_file.c" bodystart="260" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a8be89b9f61d1ee9b96a0aa3578615f15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLDirOpen)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLDirOpen</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="269" column="1" bodyfile="src/ml_file.c" bodystart="269" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a40efad983e0f9fad841038398de9237b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLDirT,(MLSequenceT), &quot;directory&quot;,.Constructor=(ml_value_t *) MLDirOpen)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLDirT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;directory&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLDirOpen</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="285" column="1" declfile="src/ml_file.c" declline="285" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a41d2932994f84d1c4deaf9bee776a6c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;read&quot;, MLDirT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;read&quot;</type>
        </param>
        <param>
          <type>MLDirT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="289" column="1" bodyfile="src/ml_file.c" bodystart="289" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a9013458081457dede0da2a99e74de193" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLDirT, ml_state_t *Caller, ml_dir_t *Dir)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLDirT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__dir__t" kindref="compound">ml_dir_t</ref> *</type>
          <declname>Dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="298" column="13" bodyfile="src/ml_file.c" bodystart="298" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1aa85283e0bb9f7c92f8d3a2441bbdd0f8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLDirT, ml_state_t *Caller, ml_dir_t *Dir)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLDirT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__dir__t" kindref="compound">ml_dir_t</ref> *</type>
          <declname>Dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="302" column="13" bodyfile="src/ml_file.c" bodystart="302" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1aea1b0229b49d397d10a10ddb4321f83c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLDirT, ml_state_t *Caller, ml_dir_t *Dir)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLDirT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__dir__t" kindref="compound">ml_dir_t</ref> *</type>
          <declname>Dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="306" column="13" bodyfile="src/ml_file.c" bodystart="306" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a63bb42694f93c52f1e37430a287e44e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLDirT, ml_state_t *Caller, ml_dir_t *Dir)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLDirT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__dir__t" kindref="compound">ml_dir_t</ref> *</type>
          <declname>Dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="318" column="13" bodyfile="src/ml_file.c" bodystart="318" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1aeb227bdeae08cc3eb5be65420ce1d0be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLDirCreate)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLDirCreate</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="330" column="1" bodyfile="src/ml_file.c" bodystart="330" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a37b7f4bb7aa6bd8bff6574365b4a4588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLDirRemove)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLDirRemove</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="345" column="1" bodyfile="src/ml_file.c" bodystart="345" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a2651f22772730f096292eebc0cc9b19b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_popen_finalize</definition>
        <argsstring>(ml_file_t *File, void *Data)</argsstring>
        <name>ml_popen_finalize</name>
        <param>
          <type><ref refid="structml__file__t" kindref="compound">ml_file_t</ref> *</type>
          <declname>File</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="357" column="13" bodyfile="src/ml_file.c" bodystart="357" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a9e8c8ff56928856b5ed3beba36ecff49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(MLPOpen)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>MLPOpen</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="366" column="1" bodyfile="src/ml_file.c" bodystart="366" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a8c6143ecfc9dd17e5c9c7e8999d3ab6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLPOpenT,(MLFileT), &quot;popen&quot;,.Constructor=(ml_value_t *) MLPOpen)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLPOpenT</type>
        </param>
        <param>
          <type>(MLFileT)</type>
        </param>
        <param>
          <type>&quot;popen&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLPOpen</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="389" column="1" declfile="src/ml_file.c" declline="389" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a04fb218f4296a3d454a023bdd5fe0e2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;close&quot;, MLPOpenT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;close&quot;</type>
        </param>
        <param>
          <type>MLPOpenT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="394" column="1" bodyfile="src/ml_file.c" bodystart="394" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="ml__file_8c_1a685dc39423dbf4ef9f8bbb5112a9cc80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_file_init</definition>
        <argsstring>(stringmap_t *Globals)</argsstring>
        <name>ml_file_init</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_file.c" line="405" column="6" bodyfile="src/ml_file.c" bodystart="405" bodyend="419"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ml_file.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_stream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_time.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dirent.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;file&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="structml__file__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__file__t" kindref="compound">ml_file_t</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*Handle;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}<sp/><ref refid="structml__file__t" kindref="compound">ml_file_t</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_file_finalize(<ref refid="structml__file__t" kindref="compound">ml_file_t</ref><sp/>*File,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(File-&gt;Handle)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(File-&gt;Handle);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File-&gt;Handle<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">ML_FUNCTION(MLFileOpen)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//@file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//&lt;Path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//&lt;Mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//&gt;file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Opens<sp/>the<sp/>file<sp/>at<sp/>:mini:`Path`<sp/>depending<sp/>on<sp/>:mini:`Mode`,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`&quot;r&quot;`:<sp/>opens<sp/>the<sp/>file<sp/>for<sp/>reading,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`&quot;w&quot;`:<sp/>opens<sp/>the<sp/>file<sp/>for<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`&quot;a&quot;`:<sp/>opens<sp/>the<sp/>file<sp/>for<sp/>appending.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Path<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Mode<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*Handle<sp/>=<sp/>fopen(Path,<sp/>Mode);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Handle)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;FileError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>open<sp/>%s<sp/>in<sp/>mode<sp/>%s:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Path,<sp/>Mode,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__file__t" kindref="compound">ml_file_t</ref><sp/>*File<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__file__t" kindref="compound">ml_file_t</ref>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>File-&gt;Type<sp/>=<sp/>MLFileT;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>File-&gt;Handle<sp/>=<sp/>Handle;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_register_finalizer(File,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_file_finalize,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)File;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">ML_TYPE(MLFileT,<sp/>(MLStreamT),<sp/></highlight><highlight class="stringliteral">&quot;file&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>file<sp/>handle<sp/>for<sp/>reading<sp/>/<sp/>writing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLFileOpen</highlight></codeline>
<codeline lineno="56"><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">FILE<sp/>*ml_file_handle(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__file__t" kindref="compound">ml_file_t</ref><sp/>*)Value)-&gt;Handle;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_thread.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_is_threadsafe,<sp/>MLFileT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__MINGW32__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ssize_t<sp/>ml_read_line(FILE<sp/>*File,<sp/>ssize_t<sp/>Offset,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**Result)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Buffer[129];</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fgets(Buffer,<sp/>129,<sp/>File)<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>strlen(Buffer);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>==<sp/>128)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssize_t<sp/>Total<sp/>=<sp/>ml_read_line(File,<sp/>Offset<sp/>+<sp/>128,<sp/>Result);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(*Result<sp/>+<sp/>Offset,<sp/>Buffer,<sp/>128);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Total;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Result<sp/>=<sp/>snew(Offset<sp/>+<sp/>Length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(*Result<sp/>+<sp/>Offset,<sp/>Buffer);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Offset<sp/>+<sp/>Length;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_stream_read,<sp/>MLFileT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__file__t" kindref="compound">ml_file_t</ref><sp/>*File,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!File-&gt;Handle)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;FileError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;reading<sp/>from<sp/>closed<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>Result<sp/>=<sp/>fread(Address,<sp/>1,<sp/>Count,<sp/>File-&gt;Handle);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>&lt;<sp/>0)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;FileError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;error<sp/>reading<sp/>from<sp/>file:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Result));</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_stream_write,<sp/>MLFileT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__file__t" kindref="compound">ml_file_t</ref><sp/>*File,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!File-&gt;Handle)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;FileError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;wrtiting<sp/>to<sp/>closed<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>Result<sp/>=<sp/>fwrite(Address,<sp/>1,<sp/>Count,<sp/>File-&gt;Handle);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>&lt;<sp/>0)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;FileError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;error<sp/>writing<sp/>to<sp/>file:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Result));</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_stream_seek,<sp/>MLFileT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__file__t" kindref="compound">ml_file_t</ref><sp/>*File,<sp/>int64_t<sp/>Offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Mode)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!File-&gt;Handle)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;FileError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;file<sp/>already<sp/>closed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(fseek(File-&gt;Handle,<sp/>Offset,<sp/>Mode)));</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_stream_tell,<sp/>MLFileT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__file__t" kindref="compound">ml_file_t</ref><sp/>*File)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!File-&gt;Handle)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;FileError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;file<sp/>already<sp/>closed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(ftell(File-&gt;Handle)));</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;eof&quot;</highlight><highlight class="normal">,<sp/>MLFileT)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//&lt;File</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//&gt;File<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`File`<sp/>if<sp/>:mini:`File`<sp/>is<sp/>closed,<sp/>otherwise<sp/>return<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__file__t" kindref="compound">ml_file_t</ref><sp/>*File<sp/>=<sp/>(<ref refid="structml__file__t" kindref="compound">ml_file_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!File-&gt;Handle)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;FileError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;file<sp/>already<sp/>closed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(feof(File-&gt;Handle))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;flush&quot;</highlight><highlight class="normal">,<sp/>MLFileT)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//&lt;File</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Flushes<sp/>any<sp/>pending<sp/>writes<sp/>to<sp/>:mini:`File`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__file__t" kindref="compound">ml_file_t</ref><sp/>*File<sp/>=<sp/>(<ref refid="structml__file__t" kindref="compound">ml_file_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(File-&gt;Handle)<sp/>fflush(File-&gt;Handle);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)File;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;close&quot;</highlight><highlight class="normal">,<sp/>MLFileT)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//&lt;File</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Closes<sp/>:mini:`File`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__file__t" kindref="compound">ml_file_t</ref><sp/>*File<sp/>=<sp/>(<ref refid="structml__file__t" kindref="compound">ml_file_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!File-&gt;Handle)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;FileError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;File<sp/>already<sp/>closed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(File-&gt;Handle);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>File-&gt;Handle<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_file(FILE<sp/>*Handle)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__file__t" kindref="compound">ml_file_t</ref><sp/>*File<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__file__t" kindref="compound">ml_file_t</ref>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>File-&gt;Type<sp/>=<sp/>MLFileT;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>File-&gt;Handle<sp/>=<sp/>Handle;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_register_finalizer(File,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_file_finalize,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)File;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">ML_FUNCTION(MLFileExists)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="comment">//@file::exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//&lt;Path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Path<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>Stat[1];</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stat(Path,<sp/>Stat))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">ML_FUNCTION(MLFileRename)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="comment">//@file::rename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//&lt;Old</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//&lt;New</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Renames<sp/>the<sp/>file<sp/>:mini:`Old`<sp/>to<sp/>:mini:`New`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*OldName<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*NewName<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rename(OldName,<sp/>NewName))<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;FileError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>rename<sp/>%s<sp/>to<sp/>%s:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>OldName,<sp/>NewName,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">ML_FUNCTION(MLFileUnlink)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="comment">//@file::unlink</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//&lt;Path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Removes<sp/>the<sp/>file<sp/>at<sp/>:mini:`Path`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlink(Name))<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;FileError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>unlink<sp/>%s:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Name,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLFileStatT[1];</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="structml__file__stat__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>Handle[1];</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}<sp/><ref refid="structml__file__stat__t" kindref="compound">ml_file_stat_t</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">ML_FUNCTION(MLFileStat)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//@file::stat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//&lt;Path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//&gt;file::stat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__file__stat__t" kindref="compound">ml_file_stat_t</ref><sp/>*Stat<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__file__stat__t" kindref="compound">ml_file_stat_t</ref>);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>Stat-&gt;Type<sp/>=<sp/>MLFileStatT;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stat(Name,<sp/>Stat-&gt;Handle))<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;FileError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>stat<sp/>%s:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Name,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Stat;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">ML_TYPE(MLFileStatT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;file::stat&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//@file::stat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLFileStat</highlight></codeline>
<codeline lineno="216"><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;size&quot;</highlight><highlight class="normal">,<sp/>MLFileStatT)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__file__stat__t" kindref="compound">ml_file_stat_t</ref><sp/>*Stat<sp/>=<sp/>(<ref refid="structml__file__stat__t" kindref="compound">ml_file_stat_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Stat-&gt;Handle-&gt;st_size);</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;atime&quot;</highlight><highlight class="normal">,<sp/>MLFileStatT)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__file__stat__t" kindref="compound">ml_file_stat_t</ref><sp/>*Stat<sp/>=<sp/>(<ref refid="structml__file__stat__t" kindref="compound">ml_file_stat_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_time(Stat-&gt;Handle-&gt;st_atim.tv_sec,<sp/>Stat-&gt;Handle-&gt;st_atim.tv_nsec);</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;mtime&quot;</highlight><highlight class="normal">,<sp/>MLFileStatT)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__file__stat__t" kindref="compound">ml_file_stat_t</ref><sp/>*Stat<sp/>=<sp/>(<ref refid="structml__file__stat__t" kindref="compound">ml_file_stat_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_time(Stat-&gt;Handle-&gt;st_mtim.tv_sec,<sp/>Stat-&gt;Handle-&gt;st_mtim.tv_nsec);</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;ctime&quot;</highlight><highlight class="normal">,<sp/>MLFileStatT)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__file__stat__t" kindref="compound">ml_file_stat_t</ref><sp/>*Stat<sp/>=<sp/>(<ref refid="structml__file__stat__t" kindref="compound">ml_file_stat_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_time(Stat-&gt;Handle-&gt;st_ctim.tv_sec,<sp/>Stat-&gt;Handle-&gt;st_ctim.tv_nsec);</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">ML_ENUM2(MLFileModeT,<sp/></highlight><highlight class="stringliteral">&quot;file::mode&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DIR&quot;</highlight><highlight class="normal">,<sp/>S_IFDIR,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CHR&quot;</highlight><highlight class="normal">,<sp/>S_IFCHR,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;BLK&quot;</highlight><highlight class="normal">,<sp/>S_IFBLK,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;REG&quot;</highlight><highlight class="normal">,<sp/>S_IFREG,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;LNK&quot;</highlight><highlight class="normal">,<sp/>S_IFLNK,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SOCK&quot;</highlight><highlight class="normal">,<sp/>S_IFSOCK,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FIFO&quot;</highlight><highlight class="normal">,<sp/>S_IFIFO</highlight></codeline>
<codeline lineno="246"><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;mode&quot;</highlight><highlight class="normal">,<sp/>MLFileStatT)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__file__stat__t" kindref="compound">ml_file_stat_t</ref><sp/>*Stat<sp/>=<sp/>(<ref refid="structml__file__stat__t" kindref="compound">ml_file_stat_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_enum_value(MLFileModeT,<sp/>Stat-&gt;Handle-&gt;st_mode<sp/>&amp;<sp/>S_IFMT);</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="structml__dir__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>DIR<sp/>*Handle;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Entry;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}<sp/><ref refid="structml__dir__t" kindref="compound">ml_dir_t</ref>;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_dir_finalize(<ref refid="structml__dir__t" kindref="compound">ml_dir_t</ref><sp/>*Dir,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Dir-&gt;Handle)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closedir(Dir-&gt;Handle);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dir-&gt;Handle<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLDirT[];</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal">ML_FUNCTION(MLDirOpen)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//@dir</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//&lt;Path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//&gt;dir</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Path<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>DIR<sp/>*Handle<sp/>=<sp/>opendir(Path);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Handle)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;FileError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>open<sp/>%s:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Path,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__dir__t" kindref="compound">ml_dir_t</ref><sp/>*Dir<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__dir__t" kindref="compound">ml_dir_t</ref>);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>Dir-&gt;Type<sp/>=<sp/>MLDirT;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>Dir-&gt;Handle<sp/>=<sp/>Handle;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_register_finalizer(Dir,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_dir_finalize,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Dir;</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal">ML_TYPE(MLDirT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;directory&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLDirOpen</highlight></codeline>
<codeline lineno="287"><highlight class="normal">);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;read&quot;</highlight><highlight class="normal">,<sp/>MLDirT)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//&lt;Dir</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">//&gt;string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__dir__t" kindref="compound">ml_dir_t</ref><sp/>*Dir<sp/>=<sp/>(<ref refid="structml__dir__t" kindref="compound">ml_dir_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dirent<sp/>*Entry<sp/>=<sp/>readdir(Dir-&gt;Handle);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Entry)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string(GC_strdup(Entry-&gt;d_name),<sp/>-1);</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLDirT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__dir__t" kindref="compound">ml_dir_t</ref><sp/>*Dir)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Dir-&gt;Index));</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLDirT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__dir__t" kindref="compound">ml_dir_t</ref><sp/>*Dir)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Dir-&gt;Entry);</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLDirT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__dir__t" kindref="compound">ml_dir_t</ref><sp/>*Dir)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dirent<sp/>*Entry<sp/>=<sp/>readdir(Dir-&gt;Handle);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Entry)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closedir(Dir-&gt;Handle);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dir-&gt;Handle<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>++Dir-&gt;Index;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>Dir-&gt;Entry<sp/>=<sp/>ml_string(GC_strdup(Entry-&gt;d_name),<sp/>-1);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Dir);</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLDirT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__dir__t" kindref="compound">ml_dir_t</ref><sp/>*Dir)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dirent<sp/>*Entry<sp/>=<sp/>readdir(Dir-&gt;Handle);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Entry)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closedir(Dir-&gt;Handle);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dir-&gt;Handle<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>Dir-&gt;Index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>Dir-&gt;Entry<sp/>=<sp/>ml_string(GC_strdup(Entry-&gt;d_name),<sp/>-1);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Dir);</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">ML_FUNCTION(MLDirCreate)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">//@dir::create</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">//&lt;Path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//&lt;Mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Mode<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mkdir(Name,<sp/>Mode))<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;FileError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>directory<sp/>%s:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Name,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">ML_FUNCTION(MLDirRemove)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">//@dir::remove</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//&lt;Path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rmdir(Name))<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;FileError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>remove<sp/>directory<sp/>%s:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Name,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_popen_finalize(<ref refid="structml__file__t" kindref="compound">ml_file_t</ref><sp/>*File,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(File-&gt;Handle)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pclose(File-&gt;Handle);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>File-&gt;Handle<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLPOpenT[];</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">ML_FUNCTION(MLPOpen)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//@popen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//&lt;Command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//&lt;Mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//&gt;popen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Executes<sp/>:mini:`Command`<sp/>with<sp/>the<sp/>shell<sp/>and<sp/>returns<sp/>an<sp/>open<sp/>file<sp/>to<sp/>communicate<sp/>with<sp/>the<sp/>subprocess<sp/>depending<sp/>on<sp/>:mini:`Mode`,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`&quot;r&quot;`:<sp/>opens<sp/>the<sp/>file<sp/>for<sp/>reading,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>:mini:`&quot;w&quot;`:<sp/>opens<sp/>the<sp/>file<sp/>for<sp/>writing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Command<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Mode<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*Handle<sp/>=<sp/>popen(Command,<sp/>Mode);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Handle)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;FileError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>run<sp/>%s<sp/>in<sp/>mode<sp/>%s:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Command,<sp/>Mode,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__file__t" kindref="compound">ml_file_t</ref><sp/>*File<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__file__t" kindref="compound">ml_file_t</ref>);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>File-&gt;Type<sp/>=<sp/>MLPOpenT;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>File-&gt;Handle<sp/>=<sp/>Handle;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_register_finalizer(File,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_popen_finalize,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)File;</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">ML_TYPE(MLPOpenT,<sp/>(MLFileT),<sp/></highlight><highlight class="stringliteral">&quot;popen&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>file<sp/>that<sp/>reads<sp/>or<sp/>writes<sp/>to<sp/>a<sp/>running<sp/>subprocess.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLPOpen</highlight></codeline>
<codeline lineno="392"><highlight class="normal">);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;close&quot;</highlight><highlight class="normal">,<sp/>MLPOpenT)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//&lt;File</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Waits<sp/>for<sp/>the<sp/>subprocess<sp/>to<sp/>finish<sp/>and<sp/>returns<sp/>the<sp/>exit<sp/>status.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__file__t" kindref="compound">ml_file_t</ref><sp/>*File<sp/>=<sp/>(<ref refid="structml__file__t" kindref="compound">ml_file_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!File-&gt;Handle)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;FileError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;File<sp/>already<sp/>closed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Result<sp/>=<sp/>pclose(File-&gt;Handle);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>File-&gt;Handle<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Result);</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_file_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_file_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLFileT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;stat&quot;</highlight><highlight class="normal">,<sp/>MLFileStat);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLFileT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;mode&quot;</highlight><highlight class="normal">,<sp/>MLFileModeT);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLFileT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;exists&quot;</highlight><highlight class="normal">,<sp/>MLFileExists);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLFileT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;rename&quot;</highlight><highlight class="normal">,<sp/>MLFileRename);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLFileT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;unlink&quot;</highlight><highlight class="normal">,<sp/>MLFileUnlink);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLDirT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;create&quot;</highlight><highlight class="normal">,<sp/>MLDirCreate);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLDirT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;remove&quot;</highlight><highlight class="normal">,<sp/>MLDirRemove);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Globals)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;file&quot;</highlight><highlight class="normal">,<sp/>MLFileT);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;dir&quot;</highlight><highlight class="normal">,<sp/>MLDirT);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;popen&quot;</highlight><highlight class="normal">,<sp/>MLPOpenT);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_file.c"/>
  </compounddef>
</doxygen>
