<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__polynomial_8c" kind="file" language="C++">
    <compoundname>ml_polynomial.c</compoundname>
    <includes refid="ml__polynomial_8h" local="yes">ml_polynomial.h</includes>
    <includes refid="minilang_8h" local="yes">minilang.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">float.h</includes>
    <includes refid="ml__sequence_8h" local="yes">ml_sequence.h</includes>
    <includes local="yes">ml_polynomial_init.c</includes>
    <incdepgraph>
      <node id="9">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_polynomial.c</label>
        <link refid="ml__polynomial_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ml_polynomial.h</label>
        <link refid="ml__polynomial_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>ml_sequence.h</label>
        <link refid="ml__sequence_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="21">
        <label>float.h</label>
      </node>
      <node id="19">
        <label>gc/gc.h</label>
      </node>
      <node id="17">
        <label>limits.h</label>
      </node>
      <node id="20">
        <label>math.h</label>
      </node>
      <node id="12">
        <label>ml_config.h</label>
      </node>
      <node id="23">
        <label>ml_polynomial_init.c</label>
      </node>
      <node id="15">
        <label>setjmp.h</label>
      </node>
      <node id="7">
        <label>stdarg.h</label>
      </node>
      <node id="11">
        <label>stdint.h</label>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
      <node id="10">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
      <node id="8">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__substitution__t" prot="public">ml_substitution_t</innerclass>
    <innerclass refid="structml__polynomial__call__state__t" prot="public">ml_polynomial_call_state_t</innerclass>
    <innerclass refid="structml__quotient__t" prot="public">ml_quotient_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__polynomial_8c_1a7eee275c4550a21c03be987913256c82" prot="public" static="no">
        <name>abs</name>
        <initializer>fabs</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="16" column="10" bodyfile="src/ml_polynomial.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__polynomial_8c_1a62c17d4336265d2959697ffc409418e2" prot="public" static="no">
        <name>ml_coeff</name>
        <initializer>ml_real</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="17" column="9" bodyfile="src/ml_polynomial.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__polynomial_8c_1ac66a27c5a5aac74c50da0de0300368ca" prot="public" static="no">
        <name>ml_coeff_value</name>
        <initializer>ml_real_value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="18" column="9" bodyfile="src/ml_polynomial.c" bodystart="18" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ml__polynomial_8c_1ac390a222776bdde8b8169df0e2931a8d" prot="public" static="no">
        <type>struct ml_substitution_t</type>
        <definition>typedef struct ml_substitution_t ml_substitution_t</definition>
        <argsstring></argsstring>
        <name>ml_substitution_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="224" column="32" bodyfile="src/ml_polynomial.c" bodystart="224" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ml__polynomial_8c_1a64a023adc7b6029c2a506b59adade4b4" prot="public" static="yes" mutable="no">
        <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref></type>
        <definition>stringmap_t Variables[1]</definition>
        <argsstring>[1]</argsstring>
        <name>Variables</name>
        <initializer>= {STRINGMAP_INIT}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="21" column="20" bodyfile="src/ml_polynomial.c" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="variable" id="ml__polynomial_8c_1a4c753fe35658ffd05a71d564a357455c" prot="public" static="yes" mutable="no">
        <type>const char **</type>
        <definition>const char** Names</definition>
        <argsstring></argsstring>
        <name>Names</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="22" column="19" bodyfile="src/ml_polynomial.c" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__polynomial_8c_1a629efb1621db65c240ba74cce7485481" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref></type>
        <definition>ml_factors_t Constant[1]</definition>
        <argsstring>[1]</argsstring>
        <name>Constant</name>
        <initializer>= {{0, 0}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="29" column="21" bodyfile="src/ml_polynomial.c" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="variable" id="ml__polynomial_8c_1a4317966664cd9f428f74bae5f641974b" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* MulMethod</definition>
        <argsstring></argsstring>
        <name>MulMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="240" column="19" declfile="src/ml_polynomial.c" declline="240" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="ml__polynomial_8c_1a9710848706b25b0786cc8252fc5008b5" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* AddMethod</definition>
        <argsstring></argsstring>
        <name>AddMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="241" column="19" declfile="src/ml_polynomial.c" declline="241" declcolumn="19"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__polynomial_8c_1aa9829b029e1682cda3d9d21cb9fc7af2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ml_polynomial_name</definition>
        <argsstring>(int Index)</argsstring>
        <name>ml_polynomial_name</name>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="24" column="12" bodyfile="src/ml_polynomial.c" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a34ddea3de11ea1545c77c0e7e884a620" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_factors_cmp</definition>
        <argsstring>(const ml_factors_t *A, const ml_factors_t *B)</argsstring>
        <name>ml_factors_cmp</name>
        <param>
          <type>const <ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="31" column="12" bodyfile="src/ml_polynomial.c" bodystart="31" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a222a3b4351c8783d600d40129a54d484" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref> *</type>
        <definition>static const ml_factors_t * ml_factors_mul</definition>
        <argsstring>(const ml_factors_t *A, const ml_factors_t *B)</argsstring>
        <name>ml_factors_mul</name>
        <param>
          <type>const <ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="62" column="27" bodyfile="src/ml_polynomial.c" bodystart="62" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1acb55816f61d2d2b27760dc3bf137b1d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_polynomial_value</definition>
        <argsstring>(ml_polynomial_t *P)</argsstring>
        <name>ml_polynomial_value</name>
        <param>
          <type><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>P</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="104" column="19" bodyfile="src/ml_polynomial.c" bodystart="104" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a10eef4218e8c259cd90d362849ab39fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_polynomial_write</definition>
        <argsstring>(ml_stringbuffer_t *Buffer, ml_polynomial_t *Poly)</argsstring>
        <name>ml_polynomial_write</name>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>Poly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="110" column="6" bodyfile="src/ml_polynomial.c" bodystart="110" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1af509889293facfda4a1b07b73ec0511a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_polynomial_factor_run</definition>
        <argsstring>(ml_polynomial_call_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_polynomial_factor_run</name>
        <param>
          <type><ref refid="structml__polynomial__call__state__t" kindref="compound">ml_polynomial_call_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="295" column="13" bodyfile="src/ml_polynomial.c" bodystart="295" bodyend="299" declfile="src/ml_polynomial.c" declline="243" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1ab74186d2344bc894d1009015aad049a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_polynomial_term_run</definition>
        <argsstring>(ml_polynomial_call_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_polynomial_term_run</name>
        <param>
          <type><ref refid="structml__polynomial__call__state__t" kindref="compound">ml_polynomial_call_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="348" column="13" bodyfile="src/ml_polynomial.c" bodystart="348" bodyend="352" declfile="src/ml_polynomial.c" declline="244" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1ab169f508431d76f1cfa860f6fde9bcb1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_polynomial_call_term</definition>
        <argsstring>(ml_polynomial_call_state_t *State)</argsstring>
        <name>ml_polynomial_call_term</name>
        <param>
          <type><ref refid="structml__polynomial__call__state__t" kindref="compound">ml_polynomial_call_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="301" column="13" bodyfile="src/ml_polynomial.c" bodystart="301" bodyend="346" declfile="src/ml_polynomial.c" declline="245" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a0a5ffa0e09ae18afd960bbd762810cc2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_polynomial_call_factor</definition>
        <argsstring>(ml_polynomial_call_state_t *State)</argsstring>
        <name>ml_polynomial_call_factor</name>
        <param>
          <type><ref refid="structml__polynomial__call__state__t" kindref="compound">ml_polynomial_call_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="247" column="13" bodyfile="src/ml_polynomial.c" bodystart="247" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a283d2beb44fa7be1ec62cbb320909e0f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_polynomial_compute_powers</definition>
        <argsstring>(ml_polynomial_call_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_polynomial_compute_powers</name>
        <param>
          <type><ref refid="structml__polynomial__call__state__t" kindref="compound">ml_polynomial_call_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="354" column="13" bodyfile="src/ml_polynomial.c" bodystart="354" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1aaadb40c329efaededdbb8bf0db52254a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_polynomial_call</definition>
        <argsstring>(ml_state_t *Caller, ml_polynomial_t *P, int Count, ml_value_t **Args)</argsstring>
        <name>ml_polynomial_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>P</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="382" column="13" bodyfile="src/ml_polynomial.c" bodystart="382" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1abd34c8184d0d75f351aa9bfb3b55aaba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLPolynomialT,(MLFunctionT), &quot;polynomial&quot;,.call=(void *) ml_polynomial_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;polynomial&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_polynomial_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="470" column="1" declfile="src/ml_polynomial.c" declline="470" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1ac4d9a8f6bc42c21d82beca1c00b13c62" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ML_TYPED_FN</definition>
        <argsstring>(ml_value_is_constant, MLPolynomialT, ml_value_t *Value)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_is_constant</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="476" column="12" bodyfile="src/ml_polynomial.c" bodystart="476" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a21592f9195f30e31293c192f192ccfca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
        <definition>static ml_polynomial_t * ml_polynomial_const</definition>
        <argsstring>(ml_coeff_t Value)</argsstring>
        <name>ml_polynomial_const</name>
        <param>
          <type>ml_coeff_t</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="480" column="24" bodyfile="src/ml_polynomial.c" bodystart="480" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1adbf9c5779803842a52ba4813cb60d28b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
        <definition>static ml_polynomial_t * ml_polynomial_add</definition>
        <argsstring>(const ml_polynomial_t *A, const ml_polynomial_t *B)</argsstring>
        <name>ml_polynomial_add</name>
        <param>
          <type>const <ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="489" column="24" bodyfile="src/ml_polynomial.c" bodystart="489" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a54c4fbbf1db33214f53a47f0ec0c3a27" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
        <definition>static ml_polynomial_t * ml_polynomial_sub</definition>
        <argsstring>(const ml_polynomial_t *A, const ml_polynomial_t *B)</argsstring>
        <name>ml_polynomial_sub</name>
        <param>
          <type>const <ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="526" column="24" bodyfile="src/ml_polynomial.c" bodystart="526" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a2dbfce6daf66d33539cafda01970e698" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_polynomial_cmp</definition>
        <argsstring>(const ml_polynomial_t *A, const ml_polynomial_t *B)</argsstring>
        <name>ml_polynomial_cmp</name>
        <param>
          <type>const <ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="569" column="12" bodyfile="src/ml_polynomial.c" bodystart="569" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a2617883e8089a40c269b861125680c3a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_terms_sort</definition>
        <argsstring>(ml_term_t *Lo, ml_term_t *Hi)</argsstring>
        <name>ml_terms_sort</name>
        <param>
          <type><ref refid="structml__term__t" kindref="compound">ml_term_t</ref> *</type>
          <declname>Lo</declname>
        </param>
        <param>
          <type><ref refid="structml__term__t" kindref="compound">ml_term_t</ref> *</type>
          <declname>Hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="584" column="13" bodyfile="src/ml_polynomial.c" bodystart="584" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1ae2ea186e036439998d0681f9942ab80c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
        <definition>static ml_polynomial_t * ml_polynomial_mul</definition>
        <argsstring>(const ml_polynomial_t *A, const ml_polynomial_t *B)</argsstring>
        <name>ml_polynomial_mul</name>
        <param>
          <type>const <ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="607" column="24" bodyfile="src/ml_polynomial.c" bodystart="607" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a5fd4992cf421f0328ae981b9303dceaa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_term_div</definition>
        <argsstring>(ml_term_t *A, ml_term_t *B, ml_term_t *C)</argsstring>
        <name>ml_term_div</name>
        <param>
          <type><ref refid="structml__term__t" kindref="compound">ml_term_t</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="structml__term__t" kindref="compound">ml_term_t</ref> *</type>
          <declname>B</declname>
        </param>
        <param>
          <type><ref refid="structml__term__t" kindref="compound">ml_term_t</ref> *</type>
          <declname>C</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="627" column="12" bodyfile="src/ml_polynomial.c" bodystart="627" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a91e8ae1136025c84c8e764ee83fdbd94" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__quotient__t" kindref="compound">ml_quotient_t</ref></type>
        <definition>static ml_quotient_t ml_polynomial_quotient</definition>
        <argsstring>(ml_polynomial_t *A, ml_polynomial_t *B)</argsstring>
        <name>ml_polynomial_quotient</name>
        <param>
          <type><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="672" column="22" bodyfile="src/ml_polynomial.c" bodystart="672" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1aa8db959a5a0618a6ae835012b8833505" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
        <definition>static ml_polynomial_t * ml_polynomial_spol</definition>
        <argsstring>(ml_polynomial_t *A, ml_polynomial_t *B)</argsstring>
        <name>ml_polynomial_spol</name>
        <param>
          <type><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="718" column="24" bodyfile="src/ml_polynomial.c" bodystart="718" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a19a135c51218eb43850daf74cf191f92" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
        <definition>static ml_polynomial_t * ml_polynomial_reduce</definition>
        <argsstring>(ml_polynomial_t *A, ml_polynomial_t *B)</argsstring>
        <name>ml_polynomial_reduce</name>
        <param>
          <type><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="786" column="24" bodyfile="src/ml_polynomial.c" bodystart="786" bodyend="835"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1ac686ab420d9bf00c66f78e1247b8619a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int variable_id</definition>
        <argsstring>(const char *Name)</argsstring>
        <name>variable_id</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="837" column="12" bodyfile="src/ml_polynomial.c" bodystart="837" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a97ae0e00ad60cccf1f87a7ae3186b2be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLPolynomialT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="847" column="1" bodyfile="src/ml_polynomial.c" bodystart="847" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1ab0731f8558a93219923ab171b64c8b7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;degree&quot;, MLPolynomialT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;degree&quot;</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="867" column="1" bodyfile="src/ml_polynomial.c" bodystart="867" bodyend="888"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1ac8b6c8527e90e32b0f0e3879f12cf7c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;coeff&quot;, MLPolynomialT, MLStringT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;coeff&quot;</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="890" column="1" bodyfile="src/ml_polynomial.c" bodystart="890" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a57018cce70350d23788dcf1e77457404" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;d&quot;, MLPolynomialT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;d&quot;</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="981" column="1" bodyfile="src/ml_polynomial.c" bodystart="981" bodyend="1024"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a1a71f12dcb0638faf3ce7c40f4bda476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;+&quot;, MLPolynomialT, MLNumberT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;+&quot;</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1026" column="1" bodyfile="src/ml_polynomial.c" bodystart="1026" bodyend="1084"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a3f31de792214afdfea20820042dd6ca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;+&quot;, MLNumberT, MLPolynomialT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;+&quot;</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1086" column="1" bodyfile="src/ml_polynomial.c" bodystart="1086" bodyend="1144"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1aafdd28d9c599f9cfa09c4cbf376d3ae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;+&quot;, MLPolynomialT, MLPolynomialT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;+&quot;</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1146" column="1" bodyfile="src/ml_polynomial.c" bodystart="1146" bodyend="1167"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a0e68567c9260f595ddbb656e15b3ad0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&quot;, MLPolynomialT, MLNumberT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&quot;</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1169" column="1" bodyfile="src/ml_polynomial.c" bodystart="1169" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1ac3384c4b884f7713ad8ea178d892bd6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&quot;, MLNumberT, MLPolynomialT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&quot;</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1229" column="1" bodyfile="src/ml_polynomial.c" bodystart="1229" bodyend="1312"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a3f56e9da1972d568c44b1fbbc5e8ad17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&quot;, MLPolynomialT, MLPolynomialT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&quot;</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1314" column="1" bodyfile="src/ml_polynomial.c" bodystart="1314" bodyend="1335"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1aef1966724dfe4101612d6819dd3c6f84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;*&quot;, MLPolynomialT, MLNumberT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;*&quot;</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1337" column="1" bodyfile="src/ml_polynomial.c" bodystart="1337" bodyend="1362"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a1cda1f788a763da9e88da7db9edcb322" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;*&quot;, MLNumberT, MLPolynomialT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;*&quot;</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1364" column="1" bodyfile="src/ml_polynomial.c" bodystart="1364" bodyend="1389"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a0a32323d14f9613dafd1df5d34cec8e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;*&quot;, MLPolynomialT, MLPolynomialT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;*&quot;</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1391" column="1" bodyfile="src/ml_polynomial.c" bodystart="1391" bodyend="1410"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1afbe151766ad7f24b87045d4f7d38c1f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;^&quot;, MLPolynomialT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;^&quot;</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1412" column="1" bodyfile="src/ml_polynomial.c" bodystart="1412" bodyend="1443"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a2bf85aad8f0a5d95ca4a2b08f1d012c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLPolynomialT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1445" column="1" bodyfile="src/ml_polynomial.c" bodystart="1445" bodyend="1453"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1ab5497024d4ca4738af62e30900f2edd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;/&quot;, MLPolynomialT, MLNumberT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;/&quot;</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1455" column="1" bodyfile="src/ml_polynomial.c" bodystart="1455" bodyend="1479"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a8d6043c8a7d31754c35c85626f44d5a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLPolynomialRationalT,(), &quot;polynomial::rational&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;polynomial::rational&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1481" column="1" declfile="src/ml_polynomial.c" declline="1481" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1ad268155a67b7aac589ec19b8a8b0ae2d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_polynomial_div</definition>
        <argsstring>(ml_polynomial_t *A, ml_polynomial_t *B)</argsstring>
        <name>ml_polynomial_div</name>
        <param>
          <type><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1483" column="19" bodyfile="src/ml_polynomial.c" bodystart="1483" bodyend="1538"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a73d16edf7d895ad3b315f25017770875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;/&quot;, MLNumberT, MLPolynomialT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;/&quot;</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1540" column="1" bodyfile="src/ml_polynomial.c" bodystart="1540" bodyend="1548"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a629e0d734ed6c469dbe78f1d72abcc78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;/&quot;, MLPolynomialT, MLPolynomialT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;/&quot;</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1550" column="1" bodyfile="src/ml_polynomial.c" bodystart="1550" bodyend="1558"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a1fb65ce2fef58a5ff349d41257b730c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;=&quot;, MLPolynomialT, MLPolynomialT)</argsstring>
        <name>ML_METHOD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1560" column="1" bodyfile="src/ml_polynomial.c" bodystart="1560" bodyend="1569"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a3a5531b6a526be4072ba1eb52319364f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;spol&quot;, MLPolynomialT, MLPolynomialT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;spol&quot;</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1582" column="1" bodyfile="src/ml_polynomial.c" bodystart="1582" bodyend="1586"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a55aebe7cfa7fe79e9856aaa66569f3ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;red&quot;, MLPolynomialT, MLPolynomialT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;red&quot;</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1588" column="1" bodyfile="src/ml_polynomial.c" bodystart="1588" bodyend="1592"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1ad245c3dcf8ee0334a45bd06c661c333f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;+&quot;, MLNumberT, MLPolynomialRationalT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;+&quot;</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1594" column="1" bodyfile="src/ml_polynomial.c" bodystart="1594" bodyend="1602"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a2c130b519e801f907d77224330616226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;+&quot;, MLPolynomialRationalT, MLNumberT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;+&quot;</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1604" column="1" bodyfile="src/ml_polynomial.c" bodystart="1604" bodyend="1612"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a522dc9e3ca013787e17cd2a773d4e5d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;+&quot;, MLPolynomialT, MLPolynomialRationalT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;+&quot;</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1614" column="1" bodyfile="src/ml_polynomial.c" bodystart="1614" bodyend="1622"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1aa1c0bea7a868caecc89c1c2706b271ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;+&quot;, MLPolynomialRationalT, MLPolynomialT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;+&quot;</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1624" column="1" bodyfile="src/ml_polynomial.c" bodystart="1624" bodyend="1632"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1ab8b2e896294a8f7c7917cf33cbf43efc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;+&quot;, MLPolynomialRationalT, MLPolynomialRationalT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;+&quot;</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1634" column="1" bodyfile="src/ml_polynomial.c" bodystart="1634" bodyend="1645"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a490976a6421b32c5431cc9989480e73b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&quot;, MLNumberT, MLPolynomialRationalT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&quot;</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1647" column="1" bodyfile="src/ml_polynomial.c" bodystart="1647" bodyend="1655"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a6cf4e7e2284b4a6ccd1230f99c1b7e55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&quot;, MLPolynomialRationalT, MLNumberT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&quot;</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1657" column="1" bodyfile="src/ml_polynomial.c" bodystart="1657" bodyend="1665"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a5150aca9a74eef856bd86c00f90d30ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&quot;, MLPolynomialT, MLPolynomialRationalT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&quot;</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1667" column="1" bodyfile="src/ml_polynomial.c" bodystart="1667" bodyend="1675"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a48fe88c185b55369bc21f47757c5e7fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&quot;, MLPolynomialRationalT, MLPolynomialT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&quot;</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1677" column="1" bodyfile="src/ml_polynomial.c" bodystart="1677" bodyend="1685"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1aa8d855fa2921399eb7087d10a58f4680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&quot;, MLPolynomialRationalT, MLPolynomialRationalT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&quot;</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1687" column="1" bodyfile="src/ml_polynomial.c" bodystart="1687" bodyend="1698"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1ac09b8552ba7f33857f25b2df21f6ee36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;*&quot;, MLNumberT, MLPolynomialRationalT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;*&quot;</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1700" column="1" bodyfile="src/ml_polynomial.c" bodystart="1700" bodyend="1708"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a907031cd72f8abd83e599e9946fe6548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;*&quot;, MLPolynomialRationalT, MLNumberT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;*&quot;</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1710" column="1" bodyfile="src/ml_polynomial.c" bodystart="1710" bodyend="1718"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a91dad0d88fd698682d8e2b7c112e77a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;*&quot;, MLPolynomialT, MLPolynomialRationalT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;*&quot;</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1720" column="1" bodyfile="src/ml_polynomial.c" bodystart="1720" bodyend="1728"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1af0c564f84b751e0a455bbadc600149f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;*&quot;, MLPolynomialRationalT, MLPolynomialT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;*&quot;</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1730" column="1" bodyfile="src/ml_polynomial.c" bodystart="1730" bodyend="1738"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a42329477f209e685f369725d68d2d0f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;*&quot;, MLPolynomialRationalT, MLPolynomialRationalT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;*&quot;</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1740" column="1" bodyfile="src/ml_polynomial.c" bodystart="1740" bodyend="1751"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a130fc09228c494f46abe8463a5f8ae0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;/&quot;, MLNumberT, MLPolynomialRationalT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;/&quot;</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1753" column="1" bodyfile="src/ml_polynomial.c" bodystart="1753" bodyend="1761"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a3e545a03877fe07687eeb26d3b6af06d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;/&quot;, MLPolynomialRationalT, MLNumberT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;/&quot;</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1763" column="1" bodyfile="src/ml_polynomial.c" bodystart="1763" bodyend="1771"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a36b86d6f7b545d31c9098172ab94b55d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;/&quot;, MLPolynomialT, MLPolynomialRationalT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;/&quot;</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1773" column="1" bodyfile="src/ml_polynomial.c" bodystart="1773" bodyend="1781"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1ad7bf43f6212d71c813deaf7f88bd9da1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;/&quot;, MLPolynomialRationalT, MLPolynomialT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;/&quot;</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1783" column="1" bodyfile="src/ml_polynomial.c" bodystart="1783" bodyend="1791"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a63a31eb07696e2eeb69eb40e761cfadc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;/&quot;, MLPolynomialRationalT, MLPolynomialRationalT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;/&quot;</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1793" column="1" bodyfile="src/ml_polynomial.c" bodystart="1793" bodyend="1804"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a33ee4605a7538cc04d7cc67371977666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLPolynomialRationalT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLPolynomialRationalT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1806" column="1" bodyfile="src/ml_polynomial.c" bodystart="1806" bodyend="1818"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a9bec1cc0f59c48db26c42d4001d5c152" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_serialize, MLPolynomialT, ml_polynomial_t *Polynomial)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_serialize</type>
        </param>
        <param>
          <type>MLPolynomialT</type>
        </param>
        <param>
          <type><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref> *</type>
          <declname>Polynomial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="1968" column="19" bodyfile="src/ml_polynomial.c" bodystart="1968" bodyend="2011"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a691e8e33679748380dd44d77edd7e2ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_DESERIALIZER</definition>
        <argsstring>(&quot;polynomial&quot;)</argsstring>
        <name>ML_DESERIALIZER</name>
        <param>
          <type>&quot;polynomial&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="2013" column="1" bodyfile="src/ml_polynomial.c" bodystart="2013" bodyend="2071"/>
      </memberdef>
      <memberdef kind="function" id="ml__polynomial_8c_1a5d8c857ec56b4f7fb931323f3e56999b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_polynomial_init</definition>
        <argsstring>(stringmap_t *Globals)</argsstring>
        <name>ml_polynomial_init</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_polynomial.c" line="2073" column="6" bodyfile="src/ml_polynomial.c" bodystart="2073" bodyend="2081"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ml_polynomial.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;minilang.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_sequence.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>abs<sp/>cabs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_coeff<sp/>ml_complex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_coeff_value<sp/>ml_complex_value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>abs<sp/>fabs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_coeff<sp/>ml_real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_coeff_value<sp/>ml_real_value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>Variables[1]<sp/>=<sp/>{STRINGMAP_INIT};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**Names<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_polynomial_name(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>0<sp/>||<sp/>Index<sp/>&gt;=<sp/>Variables-&gt;Size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Names[Index];</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>Constant[1]<sp/>=<sp/>{{0,<sp/>0}};</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_factors_cmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*B)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Degree<sp/>&lt;<sp/>B-&gt;Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Degree<sp/>&gt;<sp/>B-&gt;Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*FA<sp/>=<sp/>A-&gt;Factors,<sp/>*FB<sp/>=<sp/>B-&gt;Factors;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Count<sp/>&lt;<sp/>B-&gt;Count)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>A-&gt;Count;<sp/>++I,<sp/>++FA,<sp/>++FB)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Variable<sp/>&gt;<sp/>FB-&gt;Variable)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Variable<sp/>&lt;<sp/>FB-&gt;Variable)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Degree<sp/>&lt;<sp/>FB-&gt;Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Degree<sp/>&gt;<sp/>FB-&gt;Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Count<sp/>&gt;<sp/>B-&gt;Count)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>B-&gt;Count;<sp/>++I,<sp/>++FA,<sp/>++FB)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Variable<sp/>&gt;<sp/>FB-&gt;Variable)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Variable<sp/>&lt;<sp/>FB-&gt;Variable)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Degree<sp/>&lt;<sp/>FB-&gt;Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Degree<sp/>&gt;<sp/>FB-&gt;Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>A-&gt;Count;<sp/>++I,<sp/>++FA,<sp/>++FB)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Variable<sp/>&gt;<sp/>FB-&gt;Variable)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Variable<sp/>&lt;<sp/>FB-&gt;Variable)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Degree<sp/>&lt;<sp/>FB-&gt;Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Degree<sp/>&gt;<sp/>FB-&gt;Degree)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*ml_factors_mul(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*B)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Count<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>B;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(B-&gt;Count<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*C<sp/>=<sp/>xnew(<ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref>,<sp/>A-&gt;Count<sp/>+<sp/>B-&gt;Count,<sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*FA<sp/>=<sp/>A-&gt;Factors,<sp/>*FB<sp/>=<sp/>B-&gt;Factors;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*FC<sp/>=<sp/>C-&gt;Factors;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CA<sp/>=<sp/>A-&gt;Count,<sp/>CB<sp/>=<sp/>B-&gt;Count;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(CA<sp/>&amp;&amp;<sp/>CB)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Variable<sp/>&lt;<sp/>FB-&gt;Variable)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Degree<sp/>+=<sp/>FA-&gt;Degree;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*FC++<sp/>=<sp/>*FA++;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Variable<sp/>&gt;<sp/>FB-&gt;Variable)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Degree<sp/>+=<sp/>FB-&gt;Degree;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*FC++<sp/>=<sp/>*FB++;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CB;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((FC-&gt;Degree<sp/>=<sp/>FA-&gt;Degree<sp/>+<sp/>FB-&gt;Degree))<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Degree<sp/>+=<sp/>FC-&gt;Degree;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FC-&gt;Variable<sp/>=<sp/>FA-&gt;Variable;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++FC;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++FA;<sp/>++FB;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;<sp/>--CB;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(CA)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Degree<sp/>+=<sp/>FA-&gt;Degree;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*FC++<sp/>=<sp/>*FA++;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(CB)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Degree<sp/>+=<sp/>FB-&gt;Degree;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*FC++<sp/>=<sp/>*FB++;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CB;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Count<sp/>=<sp/>FC<sp/>-<sp/>C-&gt;Factors;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Degree<sp/>=<sp/>Degree;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>C;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_polynomial_value(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*P)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(P-&gt;Count<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(0);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(P-&gt;Count<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>P-&gt;Terms-&gt;Factors-&gt;Count<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(P-&gt;Terms-&gt;Coeff);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)P;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_polynomial_write(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*Poly)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*Terms<sp/>=<sp/>Poly-&gt;Terms;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Poly-&gt;Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*Term<sp/>=<sp/>Terms<sp/>+<sp/>I;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_coeff_t<sp/>Coeff<sp/>=<sp/>Term-&gt;Coeff;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Term-&gt;Factors-&gt;Count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Real<sp/>=<sp/>creal(Coeff),<sp/>Imag<sp/>=<sp/>cimag(Coeff);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(Real)<sp/>&gt;<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I<sp/>&amp;&amp;<sp/>Real<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>%g&quot;</highlight><highlight class="normal">,<sp/>-Real);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>%g&quot;</highlight><highlight class="normal">,<sp/>Real);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%g&quot;</highlight><highlight class="normal">,<sp/>Real);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Imag<sp/>&lt;<sp/>-DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>%gi&quot;</highlight><highlight class="normal">,<sp/>-Imag);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Imag<sp/>&gt;<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>%gi&quot;</highlight><highlight class="normal">,<sp/>Imag);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I<sp/>&amp;&amp;<sp/>Imag<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>%gi&quot;</highlight><highlight class="normal">,<sp/>-Imag);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>%gi&quot;</highlight><highlight class="normal">,<sp/>Imag);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%gi&quot;</highlight><highlight class="normal">,<sp/>Imag);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I<sp/>&amp;&amp;<sp/>Coeff<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>%g&quot;</highlight><highlight class="normal">,<sp/>-Coeff);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>%g&quot;</highlight><highlight class="normal">,<sp/>Coeff);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%g&quot;</highlight><highlight class="normal">,<sp/>Coeff);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(Coeff<sp/>-<sp/>1)<sp/>&lt;<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>&quot;</highlight><highlight class="normal">,<sp/>3);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(Coeff<sp/>+<sp/>1)<sp/>&lt;<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal">,<sp/>3);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Real<sp/>=<sp/>creal(Coeff),<sp/>Imag<sp/>=<sp/>cimag(Coeff);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(Real)<sp/>&gt;<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(Imag)<sp/>&gt;<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I<sp/>&amp;&amp;<sp/>Real<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>(%g&quot;</highlight><highlight class="normal">,<sp/>-Real);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>(%g&quot;</highlight><highlight class="normal">,<sp/>Real);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(%g&quot;</highlight><highlight class="normal">,<sp/>Real);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Imag<sp/>&lt;<sp/>-DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>%gi)&quot;</highlight><highlight class="normal">,<sp/>-Imag);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Imag<sp/>&gt;<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>%gi)&quot;</highlight><highlight class="normal">,<sp/>Imag);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I<sp/>&amp;&amp;<sp/>Real<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>%g&quot;</highlight><highlight class="normal">,<sp/>-Real);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>%g&quot;</highlight><highlight class="normal">,<sp/>Real);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%g&quot;</highlight><highlight class="normal">,<sp/>Real);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Imag<sp/>&lt;<sp/>-DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>%gi&quot;</highlight><highlight class="normal">,<sp/>-Imag);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Imag<sp/>&gt;<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>%gi&quot;</highlight><highlight class="normal">,<sp/>Imag);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I<sp/>&amp;&amp;<sp/>Imag<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>%gi&quot;</highlight><highlight class="normal">,<sp/>-Imag);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>%gi&quot;</highlight><highlight class="normal">,<sp/>Imag);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%gi&quot;</highlight><highlight class="normal">,<sp/>Imag);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I<sp/>&amp;&amp;<sp/>Coeff<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>%g&quot;</highlight><highlight class="normal">,<sp/>-Coeff);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>+<sp/>%g&quot;</highlight><highlight class="normal">,<sp/>Coeff);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%g&quot;</highlight><highlight class="normal">,<sp/>Coeff);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*Factor<sp/>=<sp/>Term-&gt;Factors-&gt;Factors;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>Term-&gt;Factors-&gt;Count;<sp/>--J<sp/>&gt;=<sp/>0;<sp/>++Factor)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>Names[Factor-&gt;Variable<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Factor-&gt;Degree<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Degree[16];</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(Degree,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>Factor-&gt;Degree);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Exponents[10]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;⁰&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;¹&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;²&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;³&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;⁴&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;⁵&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;⁶&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;⁷&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;⁸&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;⁹&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*D<sp/>=<sp/>Degree;<sp/>*D;<sp/>++D)<sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>Exponents[*D<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__substitution__t" kindref="compound">ml_substitution_t</ref><sp/><ref refid="structml__substitution__t" kindref="compound">ml_substitution_t</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="structml__substitution__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__substitution__t" kindref="compound">ml_substitution_t</ref><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Variable,<sp/>Degree;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Values[];</highlight></codeline>
<codeline lineno="229"><highlight class="normal">};</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="structml__polynomial__call__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[3];</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*P;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*F;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>Subs[1];</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I1,<sp/>I2;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}<sp/><ref refid="structml__polynomial__call__state__t" kindref="compound">ml_polynomial_call_state_t</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*MulMethod;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*AddMethod;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_polynomial_factor_run(<ref refid="structml__polynomial__call__state__t" kindref="compound">ml_polynomial_call_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_polynomial_term_run(<ref refid="structml__polynomial__call__state__t" kindref="compound">ml_polynomial_call_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_polynomial_call_term(<ref refid="structml__polynomial__call__state__t" kindref="compound">ml_polynomial_call_state_t</ref><sp/>*State);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_polynomial_call_factor(<ref refid="structml__polynomial__call__state__t" kindref="compound">ml_polynomial_call_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*P<sp/>=<sp/>State-&gt;P;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>Term<sp/>=<sp/>P-&gt;Terms[State-&gt;I1];</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*F<sp/>=<sp/>Term.Factors;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;I2<sp/>&gt;<sp/>F-&gt;Count)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++State-&gt;I1;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Args[0])<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_polynomial_term_run;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>AddMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_term_run(State,<sp/>State-&gt;Args[1]);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*F2<sp/>=<sp/>State-&gt;F;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>State-&gt;I2;<sp/>I<sp/>&lt;<sp/>F-&gt;Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__substitution__t" kindref="compound">ml_substitution_t</ref><sp/>*Sub<sp/>=<sp/>inthash_search(State-&gt;Subs,<sp/>F-&gt;Factors[I].Variable);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Sub)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;I2<sp/>=<sp/>I<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[2]<sp/>=<sp/>Sub-&gt;Values[F-&gt;Factors[I].Degree<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_polynomial_factor_run;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>MulMethod,<sp/>2,<sp/>State-&gt;Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(F2)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F2-&gt;Factors[F2-&gt;Count++]<sp/>=<sp/>F-&gt;Factors[I];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F2-&gt;Degree<sp/>+=<sp/>F-&gt;Factors[I].Degree;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F2<sp/>=<sp/>State-&gt;F<sp/>=<sp/>xnew(<ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref>,<sp/>F-&gt;Count<sp/>-<sp/>I,<sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref>);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F2-&gt;Factors[0]<sp/>=<sp/>F-&gt;Factors[I];</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F2-&gt;Degree<sp/>+=<sp/>F-&gt;Factors[I].Degree;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F2-&gt;Count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;I2<sp/>=<sp/>F-&gt;Count<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(F2)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*Q<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>1,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q-&gt;Count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q-&gt;Terms-&gt;Coeff<sp/>=<sp/>Term.Coeff;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q-&gt;Terms-&gt;Factors<sp/>=<sp/>F2;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[2]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Q;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_polynomial_factor_run;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>MulMethod,<sp/>2,<sp/>State-&gt;Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[2]<sp/>=<sp/>ml_real(Term.Coeff);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_polynomial_factor_run;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>MulMethod,<sp/>2,<sp/>State-&gt;Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_polynomial_factor_run(<ref refid="structml__polynomial__call__state__t" kindref="compound">ml_polynomial_call_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_call_factor(State);</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_polynomial_call_term(<ref refid="structml__polynomial__call__state__t" kindref="compound">ml_polynomial_call_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*P<sp/>=<sp/>State-&gt;P;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;I1<sp/>==<sp/>P-&gt;Count)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State-&gt;Args[0]);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>Term<sp/>=<sp/>P-&gt;Terms[State-&gt;I1];</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Term.Factors-&gt;Count)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Args[0])<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>ml_real(Term.Coeff);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State-&gt;Base.Caller,<sp/>AddMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_real(Term.Coeff));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;F<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*F<sp/>=<sp/>Term.Factors;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>F-&gt;Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__substitution__t" kindref="compound">ml_substitution_t</ref><sp/>*Sub<sp/>=<sp/>inthash_search(State-&gt;Subs,<sp/>F-&gt;Factors[I].Variable);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Sub)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*F2<sp/>=<sp/>State-&gt;F<sp/>=<sp/>xnew(<ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref>,<sp/>F-&gt;Count<sp/>-<sp/>1,<sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;<sp/>I;<sp/>++J)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F2-&gt;Factors[J]<sp/>=<sp/>F-&gt;Factors[J];</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Degree<sp/>+=<sp/>F-&gt;Factors[J].Degree;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F2-&gt;Degree<sp/>=<sp/>Degree;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F2-&gt;Count<sp/>=<sp/>I;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>Sub-&gt;Values[F-&gt;Factors[I].Degree<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;I2<sp/>=<sp/>I<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_call_factor(State);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>++State-&gt;I1;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*Q<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>1,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>Q-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>Q-&gt;Count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>Q-&gt;Terms[0]<sp/>=<sp/>Term;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Args[0])<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Q;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_polynomial_term_run;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>AddMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Q;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_call_term(State);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_polynomial_term_run(<ref refid="structml__polynomial__call__state__t" kindref="compound">ml_polynomial_call_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_call_term(State);</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_polynomial_compute_powers(<ref refid="structml__polynomial__call__state__t" kindref="compound">ml_polynomial_call_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__substitution__t" kindref="compound">ml_substitution_t</ref><sp/>*Sub<sp/>=<sp/>State-&gt;Subs-&gt;Values[State-&gt;I1];</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I2<sp/>=<sp/>State-&gt;I2;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>Sub-&gt;Values[I2]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>++I2;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I2<sp/>&lt;<sp/>Sub-&gt;Degree)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;I2<sp/>=<sp/>I2;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Sub-&gt;Values[0];</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>MulMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I1<sp/>=<sp/>State-&gt;I1<sp/>+<sp/>1;<sp/>I1<sp/>&lt;<sp/>State-&gt;Subs-&gt;Size;<sp/>++I1)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__substitution__t" kindref="compound">ml_substitution_t</ref><sp/>*Sub<sp/>=<sp/>State-&gt;Subs-&gt;Values[I1];</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Sub<sp/>&amp;&amp;<sp/>Sub-&gt;Degree<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;I1<sp/>=<sp/>I1;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;I2<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Sub-&gt;Values[0];</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>Sub-&gt;Values[0];</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_polynomial_compute_powers;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>MulMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;I1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_call_term(State);</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_polynomial_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*P,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Count)<sp/>ML_RETURN(P);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!P-&gt;Count)<sp/>ML_RETURN(ml_real(0));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Args[0])<sp/>==<sp/>MLNamesT)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_NAMES_CHECKX_ARG_COUNT(0);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__call__state__t" kindref="compound">ml_polynomial_call_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__polynomial__call__state__t" kindref="compound">ml_polynomial_call_state_t</ref>,<sp/>Count,<sp/><ref refid="structml__substitution__t" kindref="compound">ml_substitution_t</ref>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[0],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Variable<sp/>=<sp/>(intptr_t)stringmap_search(Variables,<sp/>ml_string_value(Iter-&gt;Value));</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Variable)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MaxDegree<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;<sp/>P-&gt;Count;<sp/>++J)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*F<sp/>=<sp/>P-&gt;Terms[J].Factors;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>0;<sp/>K<sp/>&lt;<sp/>F-&gt;Count;<sp/>++K)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(F-&gt;Factors[K].Variable<sp/>==<sp/>Variable)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MaxDegree<sp/>&lt;<sp/>F-&gt;Factors[K].Degree)<sp/>MaxDegree<sp/>=<sp/>F-&gt;Factors[K].Degree;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MaxDegree)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__substitution__t" kindref="compound">ml_substitution_t</ref><sp/>*Sub<sp/>=<sp/>xnew(<ref refid="structml__substitution__t" kindref="compound">ml_substitution_t</ref>,<sp/>MaxDegree,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sub-&gt;Variable<sp/>=<sp/>Variable;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sub-&gt;Degree<sp/>=<sp/>MaxDegree;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sub-&gt;Values[0]<sp/>=<sp/>ml_deref(Args[I<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inthash_insert(State-&gt;Subs,<sp/>Variable,<sp/>Sub);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++I;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!State-&gt;Subs-&gt;Size)<sp/>ML_RETURN(P);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;P<sp/>=<sp/>P;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I1<sp/>=<sp/>0;<sp/>I1<sp/>&lt;<sp/>State-&gt;Subs-&gt;Size;<sp/>++I1)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__substitution__t" kindref="compound">ml_substitution_t</ref><sp/>*Sub<sp/>=<sp/>State-&gt;Subs-&gt;Values[I1];</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Sub<sp/>&amp;&amp;<sp/>Sub-&gt;Degree<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;I1<sp/>=<sp/>I1;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;I2<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Sub-&gt;Values[0];</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>Sub-&gt;Values[0];</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_polynomial_compute_powers;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>MulMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;I1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_call_term(State);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*Term<sp/>=<sp/>P-&gt;Terms;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Term-&gt;Factors-&gt;Count<sp/>!=<sp/>1)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;CallError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Can<sp/>not<sp/>call<sp/>multivariate<sp/>polynomial<sp/>without<sp/>named<sp/>arguments&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Variable<sp/>=<sp/>Term-&gt;Factors-&gt;Factors[0].Variable;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MaxDegree<sp/>=<sp/>Term-&gt;Factors-&gt;Factors[0].Degree;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>P-&gt;Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Term;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Term-&gt;Factors-&gt;Count<sp/>&gt;<sp/>1)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;CallError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Can<sp/>not<sp/>call<sp/>multivariate<sp/>polynomial<sp/>without<sp/>named<sp/>arguments&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Term-&gt;Factors-&gt;Count<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Term-&gt;Factors-&gt;Factors[0].Variable<sp/>!=<sp/>Variable)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;CallError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Can<sp/>not<sp/>call<sp/>multivariate<sp/>polynomial<sp/>without<sp/>named<sp/>arguments&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MaxDegree<sp/>&lt;<sp/>Term-&gt;Factors-&gt;Factors[0].Degree)<sp/>MaxDegree<sp/>=<sp/>Term-&gt;Factors-&gt;Factors[0].Degree;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__call__state__t" kindref="compound">ml_polynomial_call_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__polynomial__call__state__t" kindref="compound">ml_polynomial_call_state_t</ref>,<sp/>1,<sp/><ref refid="structml__substitution__t" kindref="compound">ml_substitution_t</ref>);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__substitution__t" kindref="compound">ml_substitution_t</ref><sp/>*Sub<sp/>=<sp/>xnew(<ref refid="structml__substitution__t" kindref="compound">ml_substitution_t</ref>,<sp/>MaxDegree,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sub-&gt;Variable<sp/>=<sp/>Variable;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sub-&gt;Degree<sp/>=<sp/>MaxDegree;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sub-&gt;Values[0]<sp/>=<sp/>ml_deref(Args[0]);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inthash_insert(State-&gt;Subs,<sp/>Variable,<sp/>Sub);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;P<sp/>=<sp/>P;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I1<sp/>=<sp/>0;<sp/>I1<sp/>&lt;<sp/>State-&gt;Subs-&gt;Size;<sp/>++I1)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__substitution__t" kindref="compound">ml_substitution_t</ref><sp/>*Sub<sp/>=<sp/>State-&gt;Subs-&gt;Values[I1];</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Sub<sp/>&amp;&amp;<sp/>Sub-&gt;Degree<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;I1<sp/>=<sp/>I1;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;I2<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Sub-&gt;Values[0];</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>Sub-&gt;Values[0];</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_polynomial_compute_powers;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>MulMethod,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;I1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_call_term(State);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;ImplementationError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">ML_TYPE(MLPolynomialT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;polynomial&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>polynomial<sp/>with<sp/>numeric<sp/>(real<sp/>or<sp/>complex)<sp/>coefficients.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calling<sp/>a<sp/>polynomial<sp/>with<sp/>named<sp/>arguments<sp/>returns<sp/>the<sp/>result<sp/>of<sp/>substituting<sp/>the<sp/>named<sp/>variables<sp/>with<sp/>the<sp/>corresponding<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_polynomial_call</highlight></codeline>
<codeline lineno="474"><highlight class="normal">);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_is_constant,<sp/>MLPolynomialT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*ml_polynomial_const(ml_coeff_t<sp/>Value)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*C<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>1,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Terms-&gt;Coeff<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Terms-&gt;Factors<sp/>=<sp/>Constant;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>C;</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*ml_polynomial_add(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*C<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>A-&gt;Count<sp/>+<sp/>B-&gt;Count,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*TA<sp/>=<sp/>A-&gt;Terms,<sp/>*TB<sp/>=<sp/>B-&gt;Terms;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*TC<sp/>=<sp/>C-&gt;Terms;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CA<sp/>=<sp/>A-&gt;Count,<sp/>CB<sp/>=<sp/>B-&gt;Count;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(CA<sp/>&amp;&amp;<sp/>CB)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Cmp<sp/>=<sp/>ml_factors_cmp(TA-&gt;Factors,<sp/>TB-&gt;Factors);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Cmp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*TC++<sp/>=<sp/>*TB++;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CB;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Cmp<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*TC++<sp/>=<sp/>*TA++;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_coeff_t<sp/>Coeff<sp/>=<sp/>TA-&gt;Coeff<sp/>+<sp/>TB-&gt;Coeff;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(Coeff)<sp/>&gt;=<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TC-&gt;Coeff<sp/>=<sp/>Coeff;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TC-&gt;Factors<sp/>=<sp/>TA-&gt;Factors;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++TC;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++TA;<sp/>++TB;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;<sp/>--CB;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(CA)<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*TC++<sp/>=<sp/>*TA++;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(CB)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*TC++<sp/>=<sp/>*TB++;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CB;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Count<sp/>=<sp/>TC<sp/>-<sp/>C-&gt;Terms;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>C;</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*ml_polynomial_sub(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*C<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>A-&gt;Count<sp/>+<sp/>B-&gt;Count,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*TA<sp/>=<sp/>A-&gt;Terms,<sp/>*TB<sp/>=<sp/>B-&gt;Terms;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*TC<sp/>=<sp/>C-&gt;Terms;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CA<sp/>=<sp/>A-&gt;Count,<sp/>CB<sp/>=<sp/>B-&gt;Count;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(CA<sp/>&amp;&amp;<sp/>CB)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Cmp<sp/>=<sp/>ml_factors_cmp(TA-&gt;Factors,<sp/>TB-&gt;Factors);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Cmp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TC-&gt;Factors<sp/>=<sp/>TB-&gt;Factors;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TC-&gt;Coeff<sp/>=<sp/>-TB-&gt;Coeff;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++TC;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++TB;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CB;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Cmp<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*TC++<sp/>=<sp/>*TA++;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_coeff_t<sp/>Coeff<sp/>=<sp/>TA-&gt;Coeff<sp/>-<sp/>TB-&gt;Coeff;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(Coeff)<sp/>&gt;=<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TC-&gt;Coeff<sp/>=<sp/>Coeff;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TC-&gt;Factors<sp/>=<sp/>TA-&gt;Factors;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++TC;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++TA;<sp/>++TB;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;<sp/>--CB;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(CA)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*TC++<sp/>=<sp/>*TA++;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(CB)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TC-&gt;Factors<sp/>=<sp/>TB-&gt;Factors;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TC-&gt;Coeff<sp/>=<sp/>-TB-&gt;Coeff;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++TB;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++TC;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CB;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Count<sp/>=<sp/>TC<sp/>-<sp/>C-&gt;Terms;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>C;</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_polynomial_cmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*TA<sp/>=<sp/>A-&gt;Terms,<sp/>*TB<sp/>=<sp/>B-&gt;Terms;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CA<sp/>=<sp/>A-&gt;Count,<sp/>CB<sp/>=<sp/>B-&gt;Count;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(CA<sp/>&amp;&amp;<sp/>CB)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Cmp<sp/>=<sp/>ml_factors_cmp(TA-&gt;Factors,<sp/>TB-&gt;Factors);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Cmp)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_coeff_t<sp/>Coeff<sp/>=<sp/>TA-&gt;Coeff<sp/>-<sp/>TB-&gt;Coeff;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(Coeff)<sp/>&gt;=<sp/>DBL_EPSILON)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++TA;<sp/>++TB;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;<sp/>--CB;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CA<sp/>||<sp/>CB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_terms_sort(<ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*Lo,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*Hi)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*A<sp/>=<sp/>Lo,<sp/>*B<sp/>=<sp/>Hi;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>P<sp/>=<sp/>*A,<sp/>T<sp/>=<sp/>*B;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(A<sp/>&lt;<sp/>B)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Cmp<sp/>=<sp/>ml_factors_cmp(P.Factors,<sp/>T.Factors);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Cmp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*A++<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>=<sp/>*A;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Cmp<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*B--<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>=<sp/>*B;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P.Coeff<sp/>+=<sp/>T.Coeff;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T.Coeff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*B--<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>=<sp/>*B;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>*A<sp/>=<sp/>P;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Lo<sp/>&lt;<sp/>A<sp/>-<sp/>1)<sp/>ml_terms_sort(Lo,<sp/>A<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(B<sp/>+<sp/>1<sp/>&lt;<sp/>Hi)<sp/>ml_terms_sort(B<sp/>+<sp/>1,<sp/>Hi);</highlight></codeline>
<codeline lineno="605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*ml_polynomial_mul(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>A-&gt;Count<sp/>*<sp/>B-&gt;Count;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*C<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>Count,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*TA<sp/>=<sp/>A-&gt;Terms,<sp/>*TB<sp/>=<sp/>B-&gt;Terms;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*TC<sp/>=<sp/>C-&gt;Terms;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CA<sp/>=<sp/>A-&gt;Count,<sp/>CB<sp/>=<sp/>B-&gt;Count;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IA<sp/>=<sp/>0;<sp/>IA<sp/>&lt;<sp/>CA;<sp/>++IA)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IB<sp/>=<sp/>0;<sp/>IB<sp/>&lt;<sp/>CB;<sp/>++IB)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TC-&gt;Coeff<sp/>=<sp/>TA[IA].Coeff<sp/>*<sp/>TB[IB].Coeff;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TC-&gt;Factors<sp/>=<sp/>ml_factors_mul(TA[IA].Factors,<sp/>TB[IB].Factors);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++TC;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_terms_sort(C-&gt;Terms,<sp/>TC<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>TC<sp/>=<sp/>C-&gt;Terms;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*TC2<sp/>=<sp/>TC;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I,<sp/>++TC2)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TC2-&gt;Coeff)<sp/>*TC++<sp/>=<sp/>*TC2;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Count<sp/>=<sp/>TC<sp/>-<sp/>C-&gt;Terms;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>C;</highlight></codeline>
<codeline lineno="625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_term_div(<ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*A,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*B,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*C)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*FA<sp/>=<sp/>A-&gt;Factors-&gt;Factors,<sp/>*FB<sp/>=<sp/>B-&gt;Factors-&gt;Factors;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CA<sp/>=<sp/>A-&gt;Factors-&gt;Count,<sp/>CB<sp/>=<sp/>B-&gt;Factors-&gt;Count;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*Factors<sp/>=<sp/>xnew(<ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref>,<sp/>CA,<sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref>);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*FC<sp/>=<sp/>Factors-&gt;Factors;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(CA<sp/>&amp;&amp;<sp/>CB)<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Variable<sp/>&gt;<sp/>FB-&gt;Variable)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Variable<sp/>&lt;<sp/>FB-&gt;Variable)<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Degree<sp/>+=<sp/>FA-&gt;Degree;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*FC++<sp/>=<sp/>*FA++;<sp/>--CA;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D<sp/>=<sp/>FA-&gt;Degree<sp/>-<sp/>FB-&gt;Degree;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(D<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(D<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Degree<sp/>+=<sp/>D;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FC-&gt;Degree<sp/>=<sp/>D;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FC-&gt;Variable<sp/>=<sp/>FA-&gt;Variable;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++FC;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++FA;<sp/>++FB;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;<sp/>--CB;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(CA)<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Degree<sp/>+=<sp/>FA-&gt;Degree;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*FC++<sp/>=<sp/>*FA++;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Factors-&gt;Degree<sp/>=<sp/>Degree;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Factors-&gt;Count<sp/>=<sp/>FC<sp/>-<sp/>Factors-&gt;Factors;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Factors<sp/>=<sp/>Factors;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;Factors<sp/>=<sp/>Constant;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Coeff<sp/>=<sp/>A-&gt;Coeff<sp/>/<sp/>B-&gt;Coeff;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668" refid="structml__quotient__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*Q,<sp/>*R;</highlight></codeline>
<codeline lineno="670"><highlight class="normal">}<sp/><ref refid="structml__quotient__t" kindref="compound">ml_quotient_t</ref>;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__quotient__t" kindref="compound">ml_quotient_t</ref><sp/>ml_polynomial_quotient(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A,<sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>optimize<sp/>this<sp/>code<sp/>to<sp/>prevent<sp/>unneccessary<sp/>allocations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*D<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>1,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>D-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>D-&gt;Count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*Q<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>A-&gt;Count;)<sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>=<sp/>(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>B<sp/>=<sp/>(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>Q<sp/>=<sp/>(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Q)<sp/>ml_polynomial_write(Buffer,<sp/>Q);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_term_div(A-&gt;Terms<sp/>+<sp/>I,<sp/>B-&gt;Terms,<sp/>D-&gt;Terms))<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Q)<sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q<sp/>=<sp/>ml_polynomial_add(Q,<sp/>D);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>1,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q-&gt;Count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q-&gt;Terms[0]<sp/>=<sp/>D-&gt;Terms[0];</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>=<sp/>ml_polynomial_sub(A,<sp/>ml_polynomial_mul(B,<sp/>D));</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++I;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>=<sp/>(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>B<sp/>=<sp/>(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>Q<sp/>=<sp/>(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Q)<sp/>ml_polynomial_write(Buffer,<sp/>Q);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__quotient__t" kindref="compound">ml_quotient_t</ref>){Q,<sp/>A-&gt;Count<sp/>?<sp/>A<sp/>:<sp/>NULL};</highlight></codeline>
<codeline lineno="716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*ml_polynomial_spol(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A,<sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CA<sp/>=<sp/>A-&gt;Terms[0].Factors-&gt;Count;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CB<sp/>=<sp/>B-&gt;Terms[0].Factors-&gt;Count;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*FA<sp/>=<sp/>A-&gt;Terms[0].Factors-&gt;Factors;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*FB<sp/>=<sp/>B-&gt;Terms[0].Factors-&gt;Factors;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*MA<sp/>=<sp/>xnew(<ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref>,<sp/>CB,<sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref>);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*MB<sp/>=<sp/>xnew(<ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref>,<sp/>CA,<sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref>);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*MFA<sp/>=<sp/>MA-&gt;Factors,<sp/>*MFB<sp/>=<sp/>MB-&gt;Factors;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(CA<sp/>&amp;&amp;<sp/>CB)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Variable<sp/>&lt;<sp/>FB-&gt;Variable)<sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MB-&gt;Degree<sp/>+=<sp/>FA-&gt;Degree;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*MFB++<sp/>=<sp/>*FA++;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Variable<sp/>&gt;<sp/>FB-&gt;Variable)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MA-&gt;Degree<sp/>+=<sp/>FB-&gt;Degree;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*MFA++<sp/>=<sp/>*FB++;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CB;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Degree<sp/>&gt;<sp/>FB-&gt;Degree)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MFB-&gt;Variable<sp/>=<sp/>FA-&gt;Variable;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MFB-&gt;Degree<sp/>=<sp/>FA-&gt;Degree<sp/>-<sp/>FB-&gt;Degree;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MB-&gt;Degree<sp/>+=<sp/>MFB-&gt;Degree;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++MFB;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++FA;<sp/>++FB;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;<sp/>--CB;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Degree<sp/>&lt;<sp/>FB-&gt;Degree)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MFA-&gt;Variable<sp/>=<sp/>FB-&gt;Variable;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MFA-&gt;Degree<sp/>=<sp/>FB-&gt;Degree<sp/>-<sp/>FA-&gt;Degree;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MA-&gt;Degree<sp/>+=<sp/>MFA-&gt;Degree;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++MFA;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++FA;<sp/>++FB;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;<sp/>--CB;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++FA;<sp/>++FB;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;<sp/>--CB;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(CA)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MB-&gt;Degree<sp/>+=<sp/>FA-&gt;Degree;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*MFB++<sp/>=<sp/>*FA++;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(CB)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MA-&gt;Degree<sp/>+=<sp/>FB-&gt;Degree;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*MFA++<sp/>=<sp/>*FB++;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CB;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>MA-&gt;Count<sp/>=<sp/>MFA<sp/>-<sp/>MA-&gt;Factors;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>MB-&gt;Count<sp/>=<sp/>MFB<sp/>-<sp/>MB-&gt;Factors;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_coeff_t<sp/>X<sp/>=<sp/>B-&gt;Terms[0].Coeff<sp/>/<sp/>A-&gt;Terms[0].Coeff;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*XA<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>A-&gt;Count,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>XA-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>XA-&gt;Count<sp/>=<sp/>A-&gt;Count;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>A-&gt;Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XA-&gt;Terms[I].Coeff<sp/>=<sp/>A-&gt;Terms[I].Coeff<sp/>*<sp/>X;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XA-&gt;Terms[I].Factors<sp/>=<sp/>ml_factors_mul(A-&gt;Terms[I].Factors,<sp/>MA);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_terms_sort(XA-&gt;Terms,<sp/>XA-&gt;Terms<sp/>+<sp/>XA-&gt;Count<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*XB<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>B-&gt;Count,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>XB-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>XB-&gt;Count<sp/>=<sp/>B-&gt;Count;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>B-&gt;Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XB-&gt;Terms[I].Coeff<sp/>=<sp/>B-&gt;Terms[I].Coeff;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XB-&gt;Terms[I].Factors<sp/>=<sp/>ml_factors_mul(B-&gt;Terms[I].Factors,<sp/>MB);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_terms_sort(XB-&gt;Terms,<sp/>XB-&gt;Terms<sp/>+<sp/>XB-&gt;Count<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_sub(XA,<sp/>XB);</highlight></codeline>
<codeline lineno="784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*ml_polynomial_reduce(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A,<sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B)<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>A-&gt;Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CA<sp/>=<sp/>A-&gt;Terms[I].Factors-&gt;Count;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CB<sp/>=<sp/>B-&gt;Terms[0].Factors-&gt;Count;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*FA<sp/>=<sp/>A-&gt;Terms[I].Factors-&gt;Factors;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*FB<sp/>=<sp/>B-&gt;Terms[0].Factors-&gt;Factors;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*MB<sp/>=<sp/>xnew(<ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref>,<sp/>CA,<sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref>);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*MFB<sp/>=<sp/>MB-&gt;Factors;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(CA<sp/>&amp;&amp;<sp/>CB)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Variable<sp/>&lt;<sp/>FB-&gt;Variable)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MB-&gt;Degree<sp/>+=<sp/>FA-&gt;Degree;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*MFB++<sp/>=<sp/>*FA++;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Variable<sp/>&gt;<sp/>FB-&gt;Variable)<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>next;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Degree<sp/>&gt;<sp/>FB-&gt;Degree)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MFB-&gt;Variable<sp/>=<sp/>FA-&gt;Variable;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MFB-&gt;Degree<sp/>=<sp/>FA-&gt;Degree<sp/>-<sp/>FB-&gt;Degree;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MB-&gt;Degree<sp/>+=<sp/>MFB-&gt;Degree;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++MFB;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++FA;<sp/>++FB;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;<sp/>--CB;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Degree<sp/>&lt;<sp/>FB-&gt;Degree)<sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>next;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++FA;<sp/>++FB;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;<sp/>--CB;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CB)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>next;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(CA)<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MB-&gt;Degree<sp/>+=<sp/>FA-&gt;Degree;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*MFB++<sp/>=<sp/>*FA++;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--CA;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MB-&gt;Count<sp/>=<sp/>MFB<sp/>-<sp/>MB-&gt;Factors;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*XB<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>B-&gt;Count,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XB-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XB-&gt;Count<sp/>=<sp/>B-&gt;Count;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_coeff_t<sp/>X<sp/>=<sp/>A-&gt;Terms[I].Coeff<sp/>/<sp/>B-&gt;Terms[0].Coeff;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>B-&gt;Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XB-&gt;Terms[I].Coeff<sp/>=<sp/>X<sp/>*<sp/>B-&gt;Terms[I].Coeff;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XB-&gt;Terms[I].Factors<sp/>=<sp/>ml_factors_mul(B-&gt;Terms[I].Factors,<sp/>MB);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_terms_sort(XB-&gt;Terms,<sp/>XB-&gt;Terms<sp/>+<sp/>XB-&gt;Count<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_sub(A,<sp/>XB);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>next:;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>variable_id(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*Slot<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)stringmap_slot(Variables,<sp/>Name);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Slot[0]<sp/>=<sp/>Variables-&gt;Size;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Names<sp/>=<sp/>GC_realloc(Names,<sp/>Index<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Names[Index<sp/>-<sp/>1]<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Slot[0];</highlight></codeline>
<codeline lineno="845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal">ML_METHOD(MLPolynomialT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="comment">//&lt;Var</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>polynomial<sp/>corresponding<sp/>to<sp/>the<sp/>variable<sp/>:mini:`Var`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>X<sp/>:=<sp/>polynomial(&quot;x&quot;),<sp/>Y<sp/>:=<sp/>polynomial(&quot;y&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>P<sp/>:=<sp/>(X<sp/>-<sp/>Y)<sp/>^<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>P(y<sp/>is<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*Factors<sp/>=<sp/>xnew(<ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref>,<sp/>1,<sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref>);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>Factors-&gt;Degree<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>Factors-&gt;Count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>Factors-&gt;Factors-&gt;Variable<sp/>=<sp/>variable_id(ml_string_value(Args[0]));</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>Factors-&gt;Factors-&gt;Degree<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*Poly<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>1,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>Poly-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>Poly-&gt;Count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>Poly-&gt;Terms-&gt;Factors<sp/>=<sp/>Factors;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>Poly-&gt;Terms-&gt;Coeff<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Poly;</highlight></codeline>
<codeline lineno="865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;degree&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="comment">//&lt;Poly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="comment">//&lt;Var</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>highest<sp/>degree<sp/>of<sp/>:mini:`Var`<sp/>in<sp/>:mini:`Poly`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>X<sp/>:=<sp/>polynomial(&quot;x&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>(X<sp/>^<sp/>2<sp/>+<sp/>(3<sp/>*<sp/>X)<sp/>+<sp/>2):degree(&quot;x&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Variable<sp/>=<sp/>(intptr_t)stringmap_search(Variables,<sp/>ml_string_value(Args[1]));</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Variable)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(0);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*TA<sp/>=<sp/>A-&gt;Terms;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>A-&gt;Count;<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++TA)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*FA<sp/>=<sp/>TA-&gt;Factors-&gt;Factors;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>TA-&gt;Factors-&gt;Count;<sp/>--J<sp/>&gt;=<sp/>0;<sp/>++FA)<sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Variable<sp/>==<sp/>Variable)<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree<sp/>&lt;<sp/>FA-&gt;Degree)<sp/>Degree<sp/>=<sp/>FA-&gt;Degree;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Degree);</highlight></codeline>
<codeline lineno="888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;coeff&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLStringT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="comment">//&lt;Poly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="comment">//&lt;Var</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="comment">//&lt;Degree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="comment">//&gt;number|polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>coefficient<sp/>of<sp/>:mini:`Var<sp/>^<sp/>Degree`<sp/>in<sp/>:mini:`Poly`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>X<sp/>:=<sp/>polynomial(&quot;x&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>(X<sp/>^<sp/>2<sp/>+<sp/>(3<sp/>*<sp/>X)<sp/>+<sp/>2):coeff(&quot;x&quot;,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Variable<sp/>=<sp/>(intptr_t)stringmap_search(Variables,<sp/>ml_string_value(Args[1]));</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Variable)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(0);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*TA<sp/>=<sp/>A-&gt;Terms;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*TB<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_coeff_t<sp/>Coeff<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree)<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>A-&gt;Count;<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++TA)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*FA<sp/>=<sp/>TA-&gt;Factors-&gt;Factors;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>TA-&gt;Factors-&gt;Count;<sp/>--J<sp/>&gt;=<sp/>0;<sp/>++FA)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Variable<sp/>==<sp/>Variable<sp/>&amp;&amp;<sp/>FA-&gt;Degree<sp/>==<sp/>Degree)<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TA-&gt;Factors-&gt;Count<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TB)<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TB-&gt;Coeff<sp/>=<sp/>TA-&gt;Coeff;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TB-&gt;Factors<sp/>=<sp/>Constant;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++TB;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Coeff<sp/>=<sp/>TA-&gt;Coeff;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!TB)<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(Coeff)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>I<sp/>+<sp/>2,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TB<sp/>=<sp/>B-&gt;Terms;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TB-&gt;Coeff<sp/>=<sp/>Coeff;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TB-&gt;Factors<sp/>=<sp/>Constant;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++TB;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>I<sp/>+<sp/>1,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TB<sp/>=<sp/>B-&gt;Terms;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*Factors<sp/>=<sp/>xnew(<ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref>,<sp/>TA-&gt;Factors-&gt;Count<sp/>-<sp/>1,<sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref>);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*FB<sp/>=<sp/>Factors-&gt;Factors;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*FA2<sp/>=<sp/>TA-&gt;Factors-&gt;Factors;<sp/>FA2<sp/>!=<sp/>FA;<sp/>++FA2)<sp/>*FB++<sp/>=<sp/>*FA2;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*EA<sp/>=<sp/>TA-&gt;Factors-&gt;Factors<sp/>+<sp/>TA-&gt;Factors-&gt;Count;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*FA2<sp/>=<sp/>FA<sp/>+<sp/>1;<sp/>FA2<sp/>!=<sp/>EA;<sp/>++FA2)<sp/>*FB++<sp/>=<sp/>*FA2;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Factors-&gt;Count<sp/>=<sp/>TA-&gt;Factors-&gt;Count<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Factors-&gt;Degree<sp/>=<sp/>TA-&gt;Factors-&gt;Degree<sp/>-<sp/>Degree;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TB-&gt;Coeff<sp/>=<sp/>TA-&gt;Coeff;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TB-&gt;Factors<sp/>=<sp/>Factors;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++TB;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>A-&gt;Count;<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++TA)<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*FA<sp/>=<sp/>TA-&gt;Factors-&gt;Factors;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>TA-&gt;Factors-&gt;Count;<sp/>--J<sp/>&gt;=<sp/>0;<sp/>++FA)<sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Variable<sp/>==<sp/>Variable)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>next;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TB)<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*TB++<sp/>=<sp/>*TA;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TA-&gt;Factors<sp/>==<sp/>Constant)<sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Coeff<sp/>=<sp/>TA-&gt;Coeff;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(Coeff)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>I<sp/>+<sp/>2,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TB<sp/>=<sp/>B-&gt;Terms;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TB-&gt;Coeff<sp/>=<sp/>Coeff;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TB-&gt;Factors<sp/>=<sp/>Constant;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++TB;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>I<sp/>+<sp/>1,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TB<sp/>=<sp/>B-&gt;Terms;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*TB++<sp/>=<sp/>*TA;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next:;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(B)<sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Count<sp/>=<sp/>TB<sp/>-<sp/>B-&gt;Terms;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_coeff(Coeff);</highlight></codeline>
<codeline lineno="979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="comment">//&lt;Poly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="comment">//&lt;Var</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="comment">//&gt;number|polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>derivative<sp/>of<sp/>:mini:`Poly`<sp/>w.r.t.<sp/>:mini:`Var`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>X<sp/>:=<sp/>polynomial(&quot;x&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>(X<sp/>^<sp/>2<sp/>+<sp/>(3<sp/>*<sp/>X)<sp/>+<sp/>2):d(&quot;x&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Variable<sp/>=<sp/>(intptr_t)stringmap_search(Variables,<sp/>ml_string_value(Args[1]));</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Variable)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(0);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*C<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>A-&gt;Count,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*TA<sp/>=<sp/>A-&gt;Terms;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*TC<sp/>=<sp/>C-&gt;Terms;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>A-&gt;Count;<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++TA)<sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>TA-&gt;Factors-&gt;Count;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;<sp/>N;<sp/>++J)<sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*FA<sp/>=<sp/>TA-&gt;Factors-&gt;Factors<sp/>+<sp/>J;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Variable<sp/>==<sp/>Variable)<sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TC-&gt;Coeff<sp/>=<sp/>TA-&gt;Coeff<sp/>*<sp/>FA-&gt;Degree;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FA-&gt;Degree<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*F<sp/>=<sp/>xnew(<ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref>,<sp/>N<sp/>-<sp/>1,<sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref>);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>0;<sp/>K<sp/>&lt;<sp/>J;<sp/>++K)<sp/>F-&gt;Factors[K]<sp/>=<sp/>TA-&gt;Factors-&gt;Factors[K];</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>J<sp/>+<sp/>1;<sp/>K<sp/>&lt;<sp/>N;<sp/>++K)<sp/>F-&gt;Factors[K<sp/><sp/>-<sp/>1]<sp/>=<sp/>TA-&gt;Factors-&gt;Factors[K];</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F-&gt;Count<sp/>=<sp/>N<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F-&gt;Degree<sp/>=<sp/>TA-&gt;Factors-&gt;Degree<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TC-&gt;Factors<sp/>=<sp/>F;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*F<sp/>=<sp/>xnew(<ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref>,<sp/>N,<sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref>);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>0;<sp/>K<sp/>&lt;<sp/>N;<sp/>++K)<sp/>F-&gt;Factors[K]<sp/>=<sp/>TA-&gt;Factors-&gt;Factors[K];</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--F-&gt;Factors[J].Degree;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F-&gt;Count<sp/>=<sp/>N;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F-&gt;Degree<sp/>=<sp/>TA-&gt;Factors-&gt;Degree<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TC-&gt;Factors<sp/>=<sp/>F;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++TC;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Count<sp/>=<sp/>TC<sp/>-<sp/>C-&gt;Terms;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!C-&gt;Count)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(0);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(C-&gt;Count<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>C-&gt;Terms-&gt;Factors-&gt;Count<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(C-&gt;Terms-&gt;Coeff);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLNumberT)<sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>+<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_coeff_t<sp/>N<sp/>=<sp/>ml_coeff_value(Args[1]);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(N)<sp/>&lt;<sp/>DBL_EPSILON)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CA<sp/>=<sp/>A-&gt;Count;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Terms[CA<sp/>-<sp/>1].Factors-&gt;Count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_coeff_t<sp/>Sum<sp/>=<sp/>A-&gt;Terms[CA<sp/>-<sp/>1].Coeff<sp/>+<sp/>N;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(Sum)<sp/>&gt;<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>CA,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Count<sp/>=<sp/>CA;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(B-&gt;Terms,<sp/>A-&gt;Terms,<sp/>CA<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__term__t" kindref="compound">ml_term_t</ref>));</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[CA<sp/>-<sp/>1].Coeff<sp/>=<sp/>Sum;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>+<sp/>(%g)<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>N);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>CA<sp/>-<sp/>1,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Count<sp/>=<sp/>CA<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(B-&gt;Terms,<sp/>A-&gt;Terms,<sp/>(CA<sp/>-<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__term__t" kindref="compound">ml_term_t</ref>));</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>+<sp/>(%g)<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>N);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>CA<sp/>+<sp/>1,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Count<sp/>=<sp/>CA<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(B-&gt;Terms,<sp/>A-&gt;Terms,<sp/>CA<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__term__t" kindref="compound">ml_term_t</ref>));</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[CA].Factors<sp/>=<sp/>Constant;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[CA].Coeff<sp/>=<sp/>N;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>+<sp/>(%g)<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>N);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>MLNumberT,<sp/>MLPolynomialT)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>+<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_coeff_t<sp/>N<sp/>=<sp/>ml_coeff_value(Args[0]);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(N)<sp/>&lt;<sp/>DBL_EPSILON)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CA<sp/>=<sp/>A-&gt;Count;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Terms[CA<sp/>-<sp/>1].Factors-&gt;Count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_coeff_t<sp/>Sum<sp/>=<sp/>A-&gt;Terms[CA<sp/>-<sp/>1].Coeff<sp/>+<sp/>N;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(Sum)<sp/>&gt;<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>CA,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Count<sp/>=<sp/>CA;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(B-&gt;Terms,<sp/>A-&gt;Terms,<sp/>CA<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__term__t" kindref="compound">ml_term_t</ref>));</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[CA<sp/>-<sp/>1].Coeff<sp/>=<sp/>Sum;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(%g)<sp/>+<sp/>(&quot;</highlight><highlight class="normal">,<sp/>N);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>=<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>CA<sp/>-<sp/>1,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Count<sp/>=<sp/>CA<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(B-&gt;Terms,<sp/>A-&gt;Terms,<sp/>(CA<sp/>-<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__term__t" kindref="compound">ml_term_t</ref>));</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(%g)<sp/>+<sp/>(&quot;</highlight><highlight class="normal">,<sp/>N);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>=<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>CA<sp/>+<sp/>1,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Count<sp/>=<sp/>CA<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(B-&gt;Terms,<sp/>A-&gt;Terms,<sp/>CA<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__term__t" kindref="compound">ml_term_t</ref>));</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[CA].Factors<sp/>=<sp/>Constant;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[CA].Coeff<sp/>=<sp/>N;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(%g)<sp/>+<sp/>(&quot;</highlight><highlight class="normal">,<sp/>N);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>=<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLPolynomialT)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>+<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*C<sp/>=<sp/>ml_polynomial_add(A,<sp/>B);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>+<sp/>(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>=<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>C);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!C-&gt;Count)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(0);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(C-&gt;Count<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>C-&gt;Terms-&gt;Factors-&gt;Count<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(C-&gt;Terms-&gt;Coeff);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLNumberT)<sp/>{</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>-<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_coeff_t<sp/>N<sp/>=<sp/>ml_coeff_value(Args[1]);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(N)<sp/>&lt;<sp/>DBL_EPSILON)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)A;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CA<sp/>=<sp/>A-&gt;Count;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Terms[CA<sp/>-<sp/>1].Factors-&gt;Count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_coeff_t<sp/>Sum<sp/>=<sp/>A-&gt;Terms[CA<sp/>-<sp/>1].Coeff<sp/>-<sp/>N;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(Sum)<sp/>&gt;<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>CA,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Count<sp/>=<sp/>CA;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(B-&gt;Terms,<sp/>A-&gt;Terms,<sp/>CA<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__term__t" kindref="compound">ml_term_t</ref>));</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[CA<sp/>-<sp/>1].Coeff<sp/>=<sp/>Sum;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>-<sp/>(%g)<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>N);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>CA<sp/>-<sp/>1,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Count<sp/>=<sp/>CA<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(B-&gt;Terms,<sp/>A-&gt;Terms,<sp/>(CA<sp/>-<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__term__t" kindref="compound">ml_term_t</ref>));</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>-<sp/>(%g)<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>N);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>CA<sp/>+<sp/>1,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Count<sp/>=<sp/>CA<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(B-&gt;Terms,<sp/>A-&gt;Terms,<sp/>CA<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__term__t" kindref="compound">ml_term_t</ref>));</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[CA].Factors<sp/>=<sp/>Constant;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[CA].Coeff<sp/>=<sp/>-N;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>-<sp/>(%g)<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>N);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>MLNumberT,<sp/>MLPolynomialT)<sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>-<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_coeff_t<sp/>N<sp/>=<sp/>ml_coeff_value(Args[0]);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CA<sp/>=<sp/>A-&gt;Count;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(N)<sp/>&lt;<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>CA,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Count<sp/>=<sp/>CA;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>CA;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[I].Factors<sp/>=<sp/>A-&gt;Terms[I].Factors;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[I].Coeff<sp/>=<sp/>-A-&gt;Terms[I].Coeff;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(%g)<sp/>-<sp/>(&quot;</highlight><highlight class="normal">,<sp/>N);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>=<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Terms[CA<sp/>-<sp/>1].Factors-&gt;Count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_coeff_t<sp/>Sum<sp/>=<sp/>N<sp/>-<sp/>A-&gt;Terms[CA<sp/>-<sp/>1].Coeff;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(Sum)<sp/>&gt;<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>CA,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Count<sp/>=<sp/>CA;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>CA;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[I].Factors<sp/>=<sp/>A-&gt;Terms[I].Factors;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[I].Coeff<sp/>=<sp/>-A-&gt;Terms[I].Coeff;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[CA<sp/>-<sp/>1].Coeff<sp/>=<sp/>Sum;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(%g)<sp/>-<sp/>(&quot;</highlight><highlight class="normal">,<sp/>N);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>=<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>CA<sp/>-<sp/>1,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Count<sp/>=<sp/>CA<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>CA<sp/>-<sp/>1;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[I].Factors<sp/>=<sp/>A-&gt;Terms[I].Factors;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[I].Coeff<sp/>=<sp/>-A-&gt;Terms[I].Coeff;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(%g)<sp/>-<sp/>(&quot;</highlight><highlight class="normal">,<sp/>N);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>=<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>CA<sp/>+<sp/>1,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Count<sp/>=<sp/>CA<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>CA;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[I].Factors<sp/>=<sp/>A-&gt;Terms[I].Factors;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[I].Coeff<sp/>=<sp/>-A-&gt;Terms[I].Coeff;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[CA].Factors<sp/>=<sp/>Constant;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[CA].Coeff<sp/>=<sp/>N;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(%g)<sp/>-<sp/>(&quot;</highlight><highlight class="normal">,<sp/>N);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>=<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLPolynomialT)<sp/>{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>-<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*C<sp/>=<sp/>ml_polynomial_sub(A,<sp/>B);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>-<sp/>(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>=<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>C);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!C-&gt;Count)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(0);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(C-&gt;Count<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>C-&gt;Terms-&gt;Factors-&gt;Count<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(C-&gt;Terms-&gt;Coeff);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLNumberT)<sp/>{</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>*<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_coeff_t<sp/>N<sp/>=<sp/>ml_coeff_value(Args[1]);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(N)<sp/>&lt;<sp/>DBL_EPSILON)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CA<sp/>=<sp/>A-&gt;Count;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>(CA<sp/>+<sp/>1),<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>B-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>B-&gt;Count<sp/>=<sp/>CA;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>CA;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[I].Factors<sp/>=<sp/>A-&gt;Terms[I].Factors;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[I].Coeff<sp/>=<sp/>A-&gt;Terms[I].Coeff<sp/>*<sp/>N;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>*<sp/>(%g)<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>N);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/>MLNumberT,<sp/>MLPolynomialT)<sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>*<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_coeff_t<sp/>N<sp/>=<sp/>ml_coeff_value(Args[0]);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(N)<sp/>&lt;<sp/>DBL_EPSILON)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CA<sp/>=<sp/>A-&gt;Count;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>(CA<sp/>+<sp/>1),<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>B-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>B-&gt;Count<sp/>=<sp/>CA;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>CA;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[I].Factors<sp/>=<sp/>A-&gt;Terms[I].Factors;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[I].Coeff<sp/>=<sp/>N<sp/>*<sp/>A-&gt;Terms[I].Coeff;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(%g)<sp/>*<sp/>(&quot;</highlight><highlight class="normal">,<sp/>N);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>=<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLPolynomialT)<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>*<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*C<sp/>=<sp/>ml_polynomial_mul(A,<sp/>B);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>*<sp/>(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>=<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>C);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;^&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>^<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Negative<sp/>powers<sp/>not<sp/>implemented<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(1);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Count<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C<sp/>=<sp/>A-&gt;Terms-&gt;Factors-&gt;Count;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*FA<sp/>=<sp/>A-&gt;Terms-&gt;Factors;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*FB<sp/>=<sp/>xnew(<ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref>,<sp/>C,<sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref>);</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FB-&gt;Count<sp/>=<sp/>C;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FB-&gt;Degree<sp/>=<sp/>FA-&gt;Degree<sp/>*<sp/>N;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(FB-&gt;Factors,<sp/>FA-&gt;Factors,<sp/>C<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref>));</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>C;<sp/>++I)<sp/>FB-&gt;Factors[I].Degree<sp/>*=<sp/>N;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>1,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms-&gt;Coeff<sp/>=<sp/>pow(A-&gt;Terms-&gt;Coeff,<sp/>N);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms-&gt;Factors<sp/>=<sp/>FB;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*S<sp/>=<sp/>A,<sp/>*B<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(N)<sp/>{</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>%<sp/>2)<sp/>B<sp/>=<sp/>B<sp/>?<sp/>ml_polynomial_mul(B,<sp/>S)<sp/>:<sp/>S;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>/=<sp/>2;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>=<sp/>ml_polynomial_mul(S,<sp/>S);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLPolynomialT)<sp/>{</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight><highlight class="comment">//&lt;Poly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>a<sp/>representation<sp/>of<sp/>:mini:`Poly`<sp/>to<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*Poly<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>Poly);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLNumberT)<sp/>{</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>/<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_coeff_t<sp/>N<sp/>=<sp/>ml_coeff_value(Args[1]);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CA<sp/>=<sp/>A-&gt;Count;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>(CA<sp/>+<sp/>1),<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>B-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>B-&gt;Count<sp/>=<sp/>CA;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>CA;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[I].Factors<sp/>=<sp/>A-&gt;Terms[I].Factors;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;Terms[I].Coeff<sp/>=<sp/>A-&gt;Terms[I].Coeff<sp/>/<sp/>N;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>/<sp/>(%g)<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>N);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal">ML_TYPE(MLPolynomialRationalT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;polynomial::rational&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_polynomial_div(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A,<sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B)<sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*T<sp/>=<sp/>A,<sp/>*G<sp/>=<sp/>B;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Cycle<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;T<sp/>=<sp/>(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>T);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>G<sp/>=<sp/>(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>G);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__quotient__t" kindref="compound">ml_quotient_t</ref><sp/>D<sp/>=<sp/>ml_polynomial_quotient(T,<sp/>G);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!D.R)<sp/>{</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(G<sp/>==<sp/>B)<sp/>{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(D.Q-&gt;Count<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>D.Q-&gt;Terms-&gt;Factors-&gt;Count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(D.Q-&gt;Terms-&gt;Coeff);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)D.Q;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!D.Q)<sp/>{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Cycle<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G<sp/>=<sp/>ml_polynomial_const(1);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cycle<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>=<sp/>G;<sp/>G<sp/>=<sp/>D.R;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_POLY_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>=<sp/>(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>A);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>B<sp/>=<sp/>(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>B);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>G<sp/>=<sp/>(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>G);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>puts(ml_stringbuffer_get_string(Buffer));</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*C<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref>);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Type<sp/>=<sp/>MLPolynomialRationalT;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(G-&gt;Count<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>G-&gt;Terms-&gt;Factors-&gt;Count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;A<sp/>=<sp/>A;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;B<sp/>=<sp/>B;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;A<sp/>=<sp/>ml_polynomial_quotient(A,<sp/>G).Q;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C-&gt;B<sp/>=<sp/>ml_polynomial_quotient(B,<sp/>G).Q;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>MLNumberT,<sp/>MLPolynomialT)<sp/>{</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>/<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>ml_polynomial_const(ml_coeff_value(Args[0]));</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(A,<sp/>B);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLPolynomialT)<sp/>{</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>/<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(A,<sp/>B);</highlight></codeline>
<codeline lineno="1558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLPolynomialT)<sp/>{</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`B`<sp/>if<sp/>:mini:`A<sp/>=<sp/>B`<sp/>and<sp/>:mini:`nil`<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_polynomial_cmp(A,<sp/>B))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLPolynomialT)<sp/>{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`B`<sp/>if<sp/>:mini:`A<sp/>!=<sp/>B`<sp/>and<sp/>:mini:`nil`<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_polynomial_cmp(A,<sp/>B))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;spol&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLPolynomialT)<sp/>{</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)ml_polynomial_spol(A,<sp/>B);</highlight></codeline>
<codeline lineno="1586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLPolynomialT)<sp/>{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)ml_polynomial_reduce(A,<sp/>B)<sp/>?:<sp/>MLNil;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>MLNumberT,<sp/>MLPolynomialRationalT)<sp/>{</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>+<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>ml_polynomial_const(ml_coeff_value(Args[0]));</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(ml_polynomial_add(ml_polynomial_mul(A,<sp/>B-&gt;B),<sp/>B-&gt;A),<sp/>B-&gt;B);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialRationalT,<sp/>MLNumberT)<sp/>{</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>+<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>ml_polynomial_const(ml_coeff_value(Args[1]));</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(ml_polynomial_add(A-&gt;A,<sp/>ml_polynomial_mul(A-&gt;B,<sp/>B)),<sp/>A-&gt;B);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLPolynomialRationalT)<sp/>{</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>+<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(ml_polynomial_add(ml_polynomial_mul(A,<sp/>B-&gt;B),<sp/>B-&gt;A),<sp/>B-&gt;B);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialRationalT,<sp/>MLPolynomialT)<sp/>{</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>+<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(ml_polynomial_add(A-&gt;A,<sp/>ml_polynomial_mul(A-&gt;B,<sp/>B)),<sp/>A-&gt;B);</highlight></codeline>
<codeline lineno="1632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialRationalT,<sp/>MLPolynomialRationalT)<sp/>{</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>+<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_add(ml_polynomial_mul(A-&gt;A,<sp/>B-&gt;B),<sp/>ml_polynomial_mul(A-&gt;B,<sp/>B-&gt;A)),</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_mul(A-&gt;B,<sp/>B-&gt;B)</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>MLNumberT,<sp/>MLPolynomialRationalT)<sp/>{</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>-<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>ml_polynomial_const(ml_coeff_value(Args[0]));</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(ml_polynomial_sub(ml_polynomial_mul(A,<sp/>B-&gt;B),<sp/>B-&gt;A),<sp/>B-&gt;B);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialRationalT,<sp/>MLNumberT)<sp/>{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>-<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>ml_polynomial_const(ml_coeff_value(Args[1]));</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(ml_polynomial_sub(A-&gt;A,<sp/>ml_polynomial_mul(A-&gt;B,<sp/>B)),<sp/>A-&gt;B);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLPolynomialRationalT)<sp/>{</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>-<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(ml_polynomial_sub(ml_polynomial_mul(A,<sp/>B-&gt;B),<sp/>B-&gt;A),<sp/>B-&gt;B);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialRationalT,<sp/>MLPolynomialT)<sp/>{</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>-<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(ml_polynomial_sub(A-&gt;A,<sp/>ml_polynomial_mul(A-&gt;B,<sp/>B)),<sp/>A-&gt;B);</highlight></codeline>
<codeline lineno="1685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialRationalT,<sp/>MLPolynomialRationalT)<sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>-<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_sub(ml_polynomial_mul(A-&gt;A,<sp/>B-&gt;B),<sp/>ml_polynomial_mul(A-&gt;B,<sp/>B-&gt;A)),</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_mul(A-&gt;B,<sp/>B-&gt;B)</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/>MLNumberT,<sp/>MLPolynomialRationalT)<sp/>{</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>*<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>ml_polynomial_const(ml_coeff_value(Args[0]));</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(ml_polynomial_mul(A,<sp/>B-&gt;A),<sp/>B-&gt;B);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialRationalT,<sp/>MLNumberT)<sp/>{</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>*<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>ml_polynomial_const(ml_coeff_value(Args[1]));</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(ml_polynomial_mul(A-&gt;A,<sp/>B),<sp/>A-&gt;B);</highlight></codeline>
<codeline lineno="1718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLPolynomialRationalT)<sp/>{</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>*<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(ml_polynomial_mul(A,<sp/>B-&gt;A),<sp/>B-&gt;B);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialRationalT,<sp/>MLPolynomialT)<sp/>{</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>*<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(ml_polynomial_mul(A-&gt;A,<sp/>B),<sp/>A-&gt;B);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialRationalT,<sp/>MLPolynomialRationalT)<sp/>{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>*<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_mul(A-&gt;A,<sp/>B-&gt;A),</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_mul(A-&gt;B,<sp/>B-&gt;B)</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>MLNumberT,<sp/>MLPolynomialRationalT)<sp/>{</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>/<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>ml_polynomial_const(ml_coeff_value(Args[0]));</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(ml_polynomial_mul(A,<sp/>B-&gt;B),<sp/>B-&gt;A);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialRationalT,<sp/>MLNumberT)<sp/>{</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>/<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>ml_polynomial_const(ml_coeff_value(Args[1]));</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(A-&gt;A,<sp/>ml_polynomial_mul(A-&gt;B,<sp/>B));</highlight></codeline>
<codeline lineno="1771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT,<sp/>MLPolynomialRationalT)<sp/>{</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>/<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(ml_polynomial_mul(A,<sp/>B-&gt;B),<sp/>B-&gt;A);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialRationalT,<sp/>MLPolynomialT)<sp/>{</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>/<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(A-&gt;A,<sp/>ml_polynomial_mul(A-&gt;B,<sp/>B));</highlight></codeline>
<codeline lineno="1791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialRationalT,<sp/>MLPolynomialRationalT)<sp/>{</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight><highlight class="comment">//&gt;polynomial::rational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>/<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_polynomial_div(</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_mul(A-&gt;A,<sp/>B-&gt;B),</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_polynomial_mul(A-&gt;B,<sp/>B-&gt;A)</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLPolynomialRationalT)<sp/>{</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight><highlight class="comment">//&lt;Poly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>a<sp/>representation<sp/>of<sp/>:mini:`Poly`<sp/>to<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*Rat<sp/>=<sp/>(<ref refid="structml__polynomial__rational__t" kindref="compound">ml_polynomial_rational_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>Rat-&gt;A);</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>/<sp/>&quot;</highlight><highlight class="normal">,<sp/>3);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_polynomial_write(Buffer,<sp/>Rat-&gt;B);</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_roots_linear(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Coeffs[],<sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Roots[])<sp/>{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/>Roots[0]<sp/>=<sp/>-Coeffs[0]<sp/>/<sp/>Coeffs[1];</highlight></codeline>
<codeline lineno="1824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_roots_quadratic(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Coeffs[],<sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Roots[])<sp/>{</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A<sp/>=<sp/>Coeffs[1]<sp/>/<sp/>Coeffs[2];</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>B<sp/>=<sp/>Coeffs[0]<sp/>/<sp/>Coeffs[2];</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A0<sp/>=<sp/>-A<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>D<sp/>=<sp/>(A0<sp/>*<sp/>A0)<sp/>-<sp/>B;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SD<sp/>=<sp/>csqrt(D);</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>Roots[0]<sp/>=<sp/>A0<sp/>-<sp/>SD;</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>Roots[1]<sp/>=<sp/>A0<sp/>+<sp/>SD;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ccbrt(complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X)<sp/>{</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(creal(X)<sp/>&gt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cpow(X,<sp/>1.0<sp/>/<sp/>3.0);</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-cpow(-X,<sp/>1.0<sp/>/<sp/>3.0);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_roots_cubic(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Coeffs[],<sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Roots[])<sp/>{</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A<sp/>=<sp/>Coeffs[2]<sp/>/<sp/>Coeffs[3];</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>B<sp/>=<sp/>Coeffs[1]<sp/>/<sp/>Coeffs[3];</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C<sp/>=<sp/>Coeffs[0]<sp/>/<sp/>Coeffs[3];</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A13<sp/>=<sp/>A<sp/>/<sp/>3;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>F<sp/>=<sp/>B<sp/>/<sp/>3<sp/>-<sp/>A13<sp/>*<sp/>A13;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>G<sp/>=<sp/>A13<sp/>*<sp/>B<sp/>/<sp/>2<sp/>-<sp/>C<sp/>/<sp/>2<sp/>-<sp/>A13<sp/>*<sp/>A13<sp/>*<sp/>A13;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>H<sp/>=<sp/>G<sp/>*<sp/>G<sp/>+<sp/>F<sp/>*<sp/>F<sp/>*<sp/>F;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cabs(F)<sp/>&lt;<sp/>DBL_EPSILON<sp/>&amp;&amp;<sp/>cabs(G)<sp/>&lt;<sp/>DBL_EPSILON<sp/>&amp;&amp;<sp/>cabs(H)<sp/>&lt;<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(cimag(C))<sp/>&lt;<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Roots[0]<sp/>=<sp/>Roots[1]<sp/>=<sp/>Roots[2]<sp/>=<sp/>-cbrt(creal(C));</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Roots[0]<sp/>=<sp/>Roots[1]<sp/>=<sp/>Roots[2]<sp/>=<sp/>-ccbrt(C);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SqrtH<sp/>=<sp/>csqrt(H);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>S<sp/>=<sp/>ccbrt(G<sp/>+<sp/>SqrtH);</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>ccbrt(G<sp/>-<sp/>SqrtH);</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SaddT<sp/>=<sp/>S<sp/>+<sp/>T;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SsubT<sp/>=<sp/>(S<sp/>-<sp/>T)<sp/>*<sp/>sqrt(3)<sp/>*<sp/>_Complex_I<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Roots[0]<sp/>=<sp/>SaddT<sp/>-<sp/>A13;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Roots[1]<sp/>=<sp/>-SaddT<sp/>/<sp/>2<sp/>+<sp/>SsubT<sp/>-<sp/>A13;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Roots[2]<sp/>=<sp/>-SaddT<sp/>/<sp/>2<sp/>-<sp/>SsubT<sp/>-<sp/>A13;</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_roots_quartic(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Coeffs[],<sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Roots[])<sp/>{</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A<sp/>=<sp/>Coeffs[3]<sp/>/<sp/>Coeffs[4];</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>B<sp/>=<sp/>Coeffs[2]<sp/>/<sp/>Coeffs[4];</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C<sp/>=<sp/>Coeffs[1]<sp/>/<sp/>Coeffs[4];</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>D<sp/>=<sp/>Coeffs[0]<sp/>/<sp/>Coeffs[4];</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A0<sp/>=<sp/>A<sp/>/<sp/>4;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A02<sp/>=<sp/>A0<sp/>*<sp/>A0;</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>P<sp/>=<sp/>3<sp/>*<sp/>A02<sp/>-<sp/>B<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Q<sp/>=<sp/>A<sp/>*<sp/>A02<sp/>-<sp/>B<sp/>*<sp/>A0<sp/>+<sp/>C<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>R<sp/>=<sp/>3<sp/>*<sp/>A02<sp/>*<sp/>A02<sp/>-<sp/>B<sp/>*<sp/>A02<sp/>+<sp/>C<sp/>*<sp/>A0<sp/>-<sp/>D;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Cubic[4]<sp/>=<sp/>{P<sp/>*<sp/>R<sp/>-<sp/>Q<sp/>*<sp/>Q<sp/>/<sp/>2,<sp/>R,<sp/>P,<sp/>1};</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_roots_cubic(Cubic,<sp/>Roots);</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Z0<sp/>=<sp/>Roots[0];</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>S<sp/>=<sp/>csqrt(2<sp/>*<sp/>P<sp/>+<sp/>2<sp/>*<sp/>creal(Z0));</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>cabs(S)<sp/>&lt;<sp/>DBL_EPSILON<sp/>?<sp/>Z0<sp/>*<sp/>Z0<sp/>+<sp/>R<sp/>:<sp/>-Q<sp/>/<sp/>S;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Quadratic1[3]<sp/>=<sp/>{Z0<sp/>+<sp/>T,<sp/>S,<sp/>1};</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_roots_quadratic(Quadratic1,<sp/>Roots);</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Quadratic2[3]<sp/>=<sp/>{Z0<sp/>-<sp/>T,<sp/>-S,<sp/>1};</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_roots_quadratic(Quadratic2,<sp/>Roots<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/>Roots[0]<sp/>-=<sp/>A0;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/>Roots[1]<sp/>-=<sp/>A0;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/>Roots[2]<sp/>-=<sp/>A0;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/>Roots[3]<sp/>-=<sp/>A0;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_roots_general(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Coeffs[],<sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Roots[])<sp/>{</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Deriv[N];</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Deriv[I]<sp/>=<sp/>(I<sp/>+<sp/>1)<sp/>*<sp/>Coeffs[I<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Roots[I]<sp/>=<sp/>(double)rand()<sp/>/<sp/>RAND_MAX<sp/>+<sp/>(double)rand()<sp/>*<sp/>_Complex_I<sp/>/<sp/>RAND_MAX;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;=<sp/>N;<sp/>++I)<sp/>printf(</highlight><highlight class="stringliteral">&quot;Coeff[%d]<sp/>=<sp/>%f<sp/>+<sp/>%fi\n&quot;</highlight><highlight class="normal">,<sp/>I,<sp/>creal(Coeffs[I]),<sp/>cimag(Coeffs[I]));</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>printf(</highlight><highlight class="stringliteral">&quot;Deriv[%d]<sp/>=<sp/>%f<sp/>+<sp/>%fi\n&quot;</highlight><highlight class="normal">,<sp/>I,<sp/>creal(Deriv[I]),<sp/>cimag(Deriv[I]));</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K<sp/>=<sp/>0;<sp/>K<sp/>&lt;<sp/>100;<sp/>++K)<sp/>{</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Iteration<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>K);</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>printf(</highlight><highlight class="stringliteral">&quot;\tZ[%d]<sp/>=<sp/>%f<sp/>+<sp/>%fi\n&quot;</highlight><highlight class="normal">,<sp/>I,<sp/>creal(Roots[I]),<sp/>cimag(Roots[I]));</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>P[N],<sp/>Q[N],<sp/>R[N];</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>PI<sp/>=<sp/>Coeffs[0];</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>QI<sp/>=<sp/>Deriv[0];</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X<sp/>=<sp/>Roots[I];</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>1;<sp/>J<sp/>&lt;<sp/>N;<sp/>++J)<sp/>{</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PI<sp/>+=<sp/>X<sp/>*<sp/>Coeffs[J];</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QI<sp/>+=<sp/>X<sp/>*<sp/>Deriv[J];</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X<sp/>*=<sp/>Roots[I];</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PI<sp/>+=<sp/>X<sp/>*<sp/>Coeffs[N];</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P[I]<sp/>=<sp/>PI;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q[I]<sp/>=<sp/>QI;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RI<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;<sp/>N;<sp/>++J)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(J<sp/>!=<sp/>I)<sp/>{</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RI<sp/>+=<sp/>1<sp/>/<sp/>(Roots[I]<sp/>-<sp/>Roots[J]);</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R[I]<sp/>=<sp/>RI;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Delta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>N;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>W<sp/>=<sp/>P[I]<sp/>/<sp/>(Q[I]<sp/>-<sp/>P[I]<sp/>*<sp/>R[I]);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Roots[I]<sp/>-=<sp/>W;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Delta<sp/>+=<sp/>cabs(W);</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\tDelta<sp/>=<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>Delta);</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isnan(Delta))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Delta<sp/>&lt;<sp/>1e-9)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal">ML_FUNCTION(MLPolynomialRoots)<sp/>{</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight><highlight class="comment">//@polynomial::roots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight><highlight class="comment">//&lt;Coeffs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"></highlight><highlight class="comment">//&gt;list[complex]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>roots<sp/>of<sp/>the<sp/>single<sp/>variable<sp/>polynomial<sp/>:math:`Coeff_{0}<sp/>+<sp/>Coeff_{1}x<sp/>+<sp/>Coeff_{2}x^{2}<sp/>+<sp/>...`.<sp/>If<sp/>the<sp/>degree<sp/>is<sp/>less<sp/>than<sp/>5,<sp/>the<sp/>relevant<sp/>formula<sp/>is<sp/>used<sp/>to<sp/>calculate<sp/>the<sp/>roots,<sp/>otherwise<sp/>the<sp/>roots<sp/>are<sp/>estimated<sp/>using<sp/>an<sp/>iterative<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>polynomial::roots([2,<sp/>-3,<sp/>1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLListT);</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>ml_list_length(Args[0]),<sp/>M<sp/>=<sp/>N<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Coeffs[N],<sp/>*C<sp/>=<sp/>Coeffs;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Roots[M],<sp/>*R<sp/>=<sp/>Roots;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[0],<sp/>Iter)<sp/>Coeffs[I++]<sp/>=<sp/>ml_complex_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*CEnd<sp/>=<sp/>Coeffs<sp/>+<sp/>N;<sp/>C<sp/>&lt;<sp/>CEnd<sp/>&amp;&amp;<sp/>cabs(*C)<sp/>&lt;<sp/>DBL_EPSILON;<sp/>++C)<sp/>{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*R++<sp/>=<sp/>0;<sp/>--N;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(N<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>cabs(C[N<sp/>-<sp/>1])<sp/>&lt;<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--N;<sp/>--M;</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(N)<sp/>{</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/>M<sp/>=<sp/>0;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/>ml_roots_linear(C,<sp/>R);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/>ml_roots_quadratic(C,<sp/>R);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/>ml_roots_cubic(C,<sp/>R);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:<sp/>ml_roots_quartic(C,<sp/>R);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>ml_roots_general(N<sp/>-<sp/>1,<sp/>C,<sp/>R);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>M;<sp/>++I)<sp/>ml_list_put(Result,<sp/>ml_complex(Roots[I]));</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_serialize,<sp/>MLPolynomialT,<sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*Polynomial)<sp/>{</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(Result,<sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;polynomial&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinthash__t" kindref="compound">inthash_t</ref><sp/>VarIds[1]<sp/>=<sp/>{INTHASH_INIT};</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*VarNames<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(Result,<sp/>VarNames);</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumVars<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*Term<sp/>=<sp/>Polynomial-&gt;Terms;</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Polynomial-&gt;Count;<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Term)<sp/>{</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*Factor<sp/>=<sp/>Term-&gt;Factors-&gt;Factors;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>Term-&gt;Factors-&gt;Count;<sp/>--J<sp/>&gt;=<sp/>0;<sp/>++Factor)<sp/>{</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinthash__result__t" kindref="compound">inthash_result_t</ref><sp/>Result<sp/>=<sp/>inthash_search2(VarIds,<sp/>(uintptr_t)Factor-&gt;Variable);</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Result.Present)<sp/>{</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inthash_insert(VarIds,<sp/>(uintptr_t)Factor-&gt;Variable,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(uintptr_t)(NumVars++));</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(VarNames,<sp/>ml_string(Names[Factor-&gt;Variable<sp/>-<sp/>1],<sp/>-1));</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Coefficients<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(Result,<sp/>Coefficients);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Degrees<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(Result,<sp/>Degrees);</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/>Term<sp/>=<sp/>Polynomial-&gt;Terms;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FactorDegrees[NumVars];</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Polynomial-&gt;Count;<sp/>--I<sp/>&gt;=<sp/>0;<sp/>++Term)<sp/>{</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(cimag(Term-&gt;Coeff))<sp/>&lt;=<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Coefficients,<sp/>ml_real(creal(Term-&gt;Coeff)));</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Coefficients,<sp/>ml_complex(Term-&gt;Coeff));</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Coefficients,<sp/>ml_real(Term-&gt;Coeff));</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*Factor<sp/>=<sp/>Term-&gt;Factors-&gt;Factors;</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;<sp/>NumVars;<sp/>++J)<sp/>FactorDegrees[J]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>Term-&gt;Factors-&gt;Count;<sp/>--J<sp/>&gt;=<sp/>0;<sp/>++Factor)<sp/>{</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Var<sp/>=<sp/>(uintptr_t)inthash_search(VarIds,<sp/>(uintptr_t)Factor-&gt;Variable);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FactorDegrees[Var]<sp/>=<sp/>Factor-&gt;Degree;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;<sp/>NumVars;<sp/>++J)<sp/>ml_list_put(Degrees,<sp/>ml_integer(FactorDegrees[J]));</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal">ML_DESERIALIZER(</highlight><highlight class="stringliteral">&quot;polynomial&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(3);</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLListT);</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLListT);</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(2,<sp/>MLListT);</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumVars<sp/>=<sp/>ml_list_length(Args[0]);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VarIds[NumVars];</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[0],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Value,<sp/>MLStringT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SerializationError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>polynomial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarIds[Index++]<sp/>=<sp/>variable_id(ml_string_value(Iter-&gt;Value));</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>List<sp/>of<sp/>coefficients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumTerms<sp/>=<sp/>ml_list_length(Args[1]);</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref><sp/>*Polynomial<sp/>=<sp/>xnew(<ref refid="structml__polynomial__t" kindref="compound">ml_polynomial_t</ref>,<sp/>NumTerms,<sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref>);</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/>Polynomial-&gt;Type<sp/>=<sp/>MLPolynomialT;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/>Polynomial-&gt;Count<sp/>=<sp/>NumTerms;</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__term__t" kindref="compound">ml_term_t</ref><sp/>*Term<sp/>=<sp/>Polynomial-&gt;Terms;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[1],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Value,<sp/>MLNumberT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SerializationError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>polynomial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Term-&gt;Coeff<sp/>=<sp/>ml_complex_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Term-&gt;Coeff<sp/>=<sp/>ml_real_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Term;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_list_length(Args[2])<sp/>!=<sp/>NumTerms<sp/>*<sp/>NumVars)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SerializationError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>polynomial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>List<sp/>of<sp/>variable<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degrees[NumVars];</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/>Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/>Term<sp/>=<sp/>Polynomial-&gt;Terms;</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumFactors<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[2],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Value,<sp/>MLIntegerT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;SerializationError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>polynomial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Degree<sp/>=<sp/>Degrees[Index++]<sp/>=<sp/>ml_integer_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degree)<sp/>++NumFactors;</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>==<sp/>NumVars)<sp/>{</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NumFactors)<sp/>{</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref><sp/>*Factors<sp/>=<sp/>xnew(<ref refid="structml__factors__t" kindref="compound">ml_factors_t</ref>,<sp/>NumFactors,<sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref>);</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Factors-&gt;Count<sp/>=<sp/>NumFactors;</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__factor__t" kindref="compound">ml_factor_t</ref><sp/>*Factor<sp/>=<sp/>Factors-&gt;Factors;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>NumVars;<sp/>++I)<sp/><sp/>{</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Degrees[I])<sp/>{</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Factor-&gt;Variable<sp/>=<sp/>VarIds[I];</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Factors-&gt;Degree<sp/>+=<sp/>(Factor-&gt;Degree<sp/>=<sp/>Degrees[I]);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Factor;</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Term++)-&gt;Factors<sp/>=<sp/>Factors;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Term++)-&gt;Factors<sp/>=<sp/>Constant;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumFactors<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Polynomial;</highlight></codeline>
<codeline lineno="2071"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_polynomial_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals)<sp/>{</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_polynomial_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLPolynomialT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;roots&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialRoots);</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Globals)<sp/>{</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;polynomial&quot;</highlight><highlight class="normal">,<sp/>MLPolynomialT);</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2081"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_polynomial.c"/>
  </compounddef>
</doxygen>
