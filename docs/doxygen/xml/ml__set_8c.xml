<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__set_8c" kind="file" language="C++">
    <compoundname>ml_set.c</compoundname>
    <includes refid="ml__set_8h" local="yes">ml_set.h</includes>
    <includes refid="minilang_8h" local="yes">minilang.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="ml__sequence_8h" local="yes">ml_sequence.h</includes>
    <includes refid="ml__method_8h" local="yes">ml_method.h</includes>
    <includes refid="ml__object_8h" local="yes">ml_object.h</includes>
    <includes local="yes">ml_set_init.c</includes>
    <incdepgraph>
      <node id="14">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ml_method.h</label>
        <link refid="ml__method_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>ml_object.h</label>
        <link refid="ml__object_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>ml_sequence.h</label>
        <link refid="ml__sequence_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_set.c</label>
        <link refid="ml__set_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ml_set.h</label>
        <link refid="ml__set_8h_source"/>
      </node>
      <node id="9">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="19">
        <label>gc/gc.h</label>
      </node>
      <node id="17">
        <label>limits.h</label>
      </node>
      <node id="16">
        <label>ml_config.h</label>
      </node>
      <node id="23">
        <label>ml_set_init.c</label>
      </node>
      <node id="7">
        <label>setjmp.h</label>
      </node>
      <node id="12">
        <label>stdarg.h</label>
      </node>
      <node id="15">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__set__from__t" prot="public">ml_set_from_t</innerclass>
    <innerclass refid="structml__set__stringer__t" prot="public">ml_set_stringer_t</innerclass>
    <innerclass refid="structml__set__sort__state__t" prot="public">ml_set_sort_state_t</innerclass>
    <innerclass refid="structml__set__visit__t" prot="public">ml_set_visit_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__set_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;set&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="10" column="10" bodyfile="src/ml_set.c" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__set_8c_1ab0b9b644cad7956eb2daa34bb2540897" prot="public" static="no">
        <name>MLSetMutableT</name>
        <initializer>MLSetT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="21" column="10" bodyfile="src/ml_set.c" bodystart="21" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ml__set_8c_1a4ebdc4de9b17a75417888a408b724ce4" prot="public" static="no">
        <type>struct ml_set_stringer_t</type>
        <definition>typedef struct ml_set_stringer_t ml_set_stringer_t</definition>
        <argsstring></argsstring>
        <name>ml_set_stringer_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="727" column="19"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ml__set_8c_1a20dc064cf479d34aa8d57bcaf537a023" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* CompareMethod</definition>
        <argsstring></argsstring>
        <name>CompareMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="117" column="19" declfile="src/ml_set.c" declline="117" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="ml__set_8c_1aada8bb1dfcc7c082a782b327d0b46059" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t* LessMethod</definition>
        <argsstring></argsstring>
        <name>LessMethod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="1046" column="19" declfile="src/ml_set.c" declline="1046" declcolumn="19"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__set_8c_1a2255d8326ee0d9724b1f82d5ec7caa88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLSetT,(MLSequenceT), &quot;set&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLSetT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;set&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="12" column="1" declfile="src/ml_set.c" declline="12" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a1f93b4b11b8169f58ee1d0a00009002e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ENUM2</definition>
        <argsstring>(MLSetOrderT, &quot;set::order&quot;, &quot;Insert&quot;, SET_ORDER_INSERT, &quot;LRU&quot;, SET_ORDER_LRU, &quot;MRU&quot;, SET_ORDER_MRU, &quot;Ascending&quot;, SET_ORDER_ASC, &quot;Descending&quot;, SET_ORDER_DESC)</argsstring>
        <name>ML_ENUM2</name>
        <param>
          <type>MLSetOrderT</type>
        </param>
        <param>
          <type>&quot;set::order&quot;</type>
        </param>
        <param>
          <type>&quot;Insert&quot;</type>
        </param>
        <param>
          <type>SET_ORDER_INSERT</type>
        </param>
        <param>
          <type>&quot;LRU&quot;</type>
        </param>
        <param>
          <type>SET_ORDER_LRU</type>
        </param>
        <param>
          <type>&quot;MRU&quot;</type>
        </param>
        <param>
          <type>SET_ORDER_MRU</type>
        </param>
        <param>
          <type>&quot;Ascending&quot;</type>
        </param>
        <param>
          <type>SET_ORDER_ASC</type>
        </param>
        <param>
          <type>&quot;Descending&quot;</type>
        </param>
        <param>
          <type>SET_ORDER_DESC</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="44" column="1" declfile="src/ml_set.c" declline="44" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1af3a28d6801a70ace005f99ec6e74b4e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_value_find_all, MLSetT, ml_value_t *Value, void *Data, ml_value_find_fn RefFn)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_find_all</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>ml_value_find_fn</type>
          <declname>RefFn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="52" column="13" bodyfile="src/ml_set.c" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a43258a71f896ba30c33c9c38b5f4fd86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLSetNodeT,(), &quot;set::node&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLSetNodeT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;set::node&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="57" column="1" declfile="src/ml_set.c" declline="57" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1abb0f046af346eadc239d92979f17da33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_set</definition>
        <argsstring>()</argsstring>
        <name>ml_set</name>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="60" column="12" bodyfile="src/ml_set.c" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a112524ae0eee0c3e67ff98fd94b1a893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="66" column="1" bodyfile="src/ml_set.c" bodystart="66" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a7b69c779ac902eeab47875aa669c7546" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void set_iterate</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>set_iterate</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="83" column="13" bodyfile="src/ml_set.c" bodystart="83" bodyend="88" declfile="src/ml_set.c" declline="73" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a15062428d58377c4de07905714314361" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void set_iter_value</definition>
        <argsstring>(ml_iter_state_t *State, ml_value_t *Value)</argsstring>
        <name>set_iter_value</name>
        <param>
          <type><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="75" column="13" bodyfile="src/ml_set.c" bodystart="75" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1afc028afb4b893d9b05740ab3e87a6fe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODVX</definition>
        <argsstring>(MLSetT, MLSequenceT)</argsstring>
        <name>ML_METHODVX</name>
        <param>
          <type>MLSetT</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="90" column="1" bodyfile="src/ml_set.c" bodystart="90" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1aa87f479f23a535f7c062df38c0e432b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODVX</definition>
        <argsstring>(&quot;grow&quot;, MLSetMutableT, MLSequenceT)</argsstring>
        <name>ML_METHODVX</name>
        <param>
          <type>&quot;grow&quot;</type>
        </param>
        <param>
          <type>MLSetMutableT</type>
        </param>
        <param>
          <type>MLSequenceT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="103" column="1" bodyfile="src/ml_set.c" bodystart="103" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a9ca93cbd00299472c6b98ff771f99164" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_set_compare</definition>
        <argsstring>(ml_set_t *Set, ml_value_t **Args)</argsstring>
        <name>ml_set_compare</name>
        <param>
          <type><ref refid="structml__set__t" kindref="compound">ml_set_t</ref> *</type>
          <declname>Set</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="119" column="26" bodyfile="src/ml_set.c" bodystart="119" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1aba5b209ca5dfbc700b0c75a86f7f3843" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> *</type>
        <definition>static ml_set_node_t * ml_set_find_node</definition>
        <argsstring>(ml_set_t *Set, ml_value_t *Key)</argsstring>
        <name>ml_set_find_node</name>
        <param>
          <type><ref refid="structml__set__t" kindref="compound">ml_set_t</ref> *</type>
          <declname>Set</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="134" column="22" bodyfile="src/ml_set.c" bodystart="134" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1ace9f11ffe8e802aa308b85b8f7b8f3e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_set_search</definition>
        <argsstring>(ml_value_t *Set0, ml_value_t *Key)</argsstring>
        <name>ml_set_search</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Set0</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="162" column="12" bodyfile="src/ml_set.c" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a5946b5bc686813825b4b10a0a198c3b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_set_search0</definition>
        <argsstring>(ml_value_t *Set0, ml_value_t *Key)</argsstring>
        <name>ml_set_search0</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Set0</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="167" column="12" bodyfile="src/ml_set.c" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1ae3cdc624d220b9942ddc8afad2c4768f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_set_balance</definition>
        <argsstring>(ml_set_node_t *Node)</argsstring>
        <name>ml_set_balance</name>
        <param>
          <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="172" column="12" bodyfile="src/ml_set.c" bodystart="172" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a18828a2c30fe8191a12b852748fb6777" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_set_update_depth</definition>
        <argsstring>(ml_set_node_t *Node)</argsstring>
        <name>ml_set_update_depth</name>
        <param>
          <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="179" column="13" bodyfile="src/ml_set.c" bodystart="179" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a441c8058cb3e7d5fee39bc71487f9c07" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_set_rotate_left</definition>
        <argsstring>(ml_set_node_t **Slot)</argsstring>
        <name>ml_set_rotate_left</name>
        <param>
          <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> **</type>
          <declname>Slot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="186" column="13" bodyfile="src/ml_set.c" bodystart="186" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a4fc7abb2d49067444ebf2738b1bbab29" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_set_rotate_right</definition>
        <argsstring>(ml_set_node_t **Slot)</argsstring>
        <name>ml_set_rotate_right</name>
        <param>
          <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> **</type>
          <declname>Slot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="195" column="13" bodyfile="src/ml_set.c" bodystart="195" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a68c553f04acdba57609324c7a8ed2210" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_set_rebalance</definition>
        <argsstring>(ml_set_node_t **Slot)</argsstring>
        <name>ml_set_rebalance</name>
        <param>
          <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> **</type>
          <declname>Slot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="204" column="13" bodyfile="src/ml_set.c" bodystart="204" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1af08971aaf80fff3e4dc6706ae8df91ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_set_insert_before</definition>
        <argsstring>(ml_set_t *Set, ml_set_node_t *Parent, ml_set_node_t *Node)</argsstring>
        <name>ml_set_insert_before</name>
        <param>
          <type><ref refid="structml__set__t" kindref="compound">ml_set_t</ref> *</type>
          <declname>Set</declname>
        </param>
        <param>
          <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> *</type>
          <declname>Parent</declname>
        </param>
        <param>
          <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="215" column="13" bodyfile="src/ml_set.c" bodystart="215" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1ab8166ca8adca17dc9a35efcaa48007cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_set_insert_after</definition>
        <argsstring>(ml_set_t *Set, ml_set_node_t *Parent, ml_set_node_t *Node)</argsstring>
        <name>ml_set_insert_after</name>
        <param>
          <type><ref refid="structml__set__t" kindref="compound">ml_set_t</ref> *</type>
          <declname>Set</declname>
        </param>
        <param>
          <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> *</type>
          <declname>Parent</declname>
        </param>
        <param>
          <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="226" column="13" bodyfile="src/ml_set.c" bodystart="226" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a72fe6d364cc13f3fed5c37fe3877e469" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> *</type>
        <definition>static ml_set_node_t * ml_set_node_child</definition>
        <argsstring>(ml_set_t *Set, ml_set_node_t *Parent, long Hash, ml_value_t *Key)</argsstring>
        <name>ml_set_node_child</name>
        <param>
          <type><ref refid="structml__set__t" kindref="compound">ml_set_t</ref> *</type>
          <declname>Set</declname>
        </param>
        <param>
          <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> *</type>
          <declname>Parent</declname>
        </param>
        <param>
          <type>long</type>
          <declname>Hash</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="237" column="22" bodyfile="src/ml_set.c" bodystart="237" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1aab658db94fb2db96147de0adf1e13a75" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> *</type>
        <definition>static ml_set_node_t * ml_set_node</definition>
        <argsstring>(ml_set_t *Set, long Hash, ml_value_t *Key)</argsstring>
        <name>ml_set_node</name>
        <param>
          <type><ref refid="structml__set__t" kindref="compound">ml_set_t</ref> *</type>
          <declname>Set</declname>
        </param>
        <param>
          <type>long</type>
          <declname>Hash</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="299" column="22" bodyfile="src/ml_set.c" bodystart="299" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a8306f8218eb6d96482e4638c51aee220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> *</type>
        <definition>ml_set_node_t * ml_set_slot</definition>
        <argsstring>(ml_value_t *Set0, ml_value_t *Key)</argsstring>
        <name>ml_set_slot</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Set0</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="312" column="15" bodyfile="src/ml_set.c" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a827d588a054da29e2686ae5232d24d9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_set_insert</definition>
        <argsstring>(ml_value_t *Set0, ml_value_t *Key)</argsstring>
        <name>ml_set_insert</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Set0</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="317" column="12" bodyfile="src/ml_set.c" bodystart="317" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1ae745e041fec0c343a13ad53e142c69a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_set_remove_depth_helper</definition>
        <argsstring>(ml_set_node_t *Node)</argsstring>
        <name>ml_set_remove_depth_helper</name>
        <param>
          <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="327" column="13" bodyfile="src/ml_set.c" bodystart="327" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a0800f2c6b03eb92c2193c0ea70faf5a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_set_remove_internal</definition>
        <argsstring>(ml_set_t *Set, ml_set_node_t **Slot, long Hash, ml_value_t *Key)</argsstring>
        <name>ml_set_remove_internal</name>
        <param>
          <type><ref refid="structml__set__t" kindref="compound">ml_set_t</ref> *</type>
          <declname>Set</declname>
        </param>
        <param>
          <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> **</type>
          <declname>Slot</declname>
        </param>
        <param>
          <type>long</type>
          <declname>Hash</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="334" column="19" bodyfile="src/ml_set.c" bodystart="334" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a8e7b5b449a790899d4742215112178be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_set_delete</definition>
        <argsstring>(ml_value_t *Set0, ml_value_t *Key)</argsstring>
        <name>ml_set_delete</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Set0</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="379" column="12" bodyfile="src/ml_set.c" bodystart="379" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a7833410b0ae51fa7e6586c1bed70607e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ml_set_foreach</definition>
        <argsstring>(ml_value_t *Value, void *Data, int(*callback)(ml_value_t *, void *))</argsstring>
        <name>ml_set_foreach</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>int(*)(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *, void *)</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="384" column="5" bodyfile="src/ml_set.c" bodystart="384" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1ad92d8e21aa06c12507b3a09b74317583" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;precount&quot;, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;precount&quot;</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="392" column="1" bodyfile="src/ml_set.c" bodystart="392" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1af52c19256a03fd82738b440b1da194a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;size&quot;, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;size&quot;</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="401" column="1" bodyfile="src/ml_set.c" bodystart="401" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a2449731bc7b4f192195138c6ced1db58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;count&quot;, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;count&quot;</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="410" column="1" bodyfile="src/ml_set.c" bodystart="410" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1ab4baa7f0ed04123cd00a86d25b5e664c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;first&quot;, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;first&quot;</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="419" column="1" bodyfile="src/ml_set.c" bodystart="419" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1af9cdb197584c7dd6830a9e2c8c69ef2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;last&quot;, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;last&quot;</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="426" column="1" bodyfile="src/ml_set.c" bodystart="426" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a5c4906eb97df422cf511741bd69440d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;order&quot;, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;order&quot;</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="433" column="1" bodyfile="src/ml_set.c" bodystart="433" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a9e9efa70f3ce6890fb267cf284b2faf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;order&quot;, MLSetMutableT, MLSetOrderT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;order&quot;</type>
        </param>
        <param>
          <type>MLSetMutableT</type>
        </param>
        <param>
          <type>MLSetOrderT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="441" column="1" bodyfile="src/ml_set.c" bodystart="441" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1ab3131dee5e94c532088ea91d53bfb7a8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_set_move_node_head</definition>
        <argsstring>(ml_set_t *Set, ml_set_node_t *Node)</argsstring>
        <name>ml_set_move_node_head</name>
        <param>
          <type><ref refid="structml__set__t" kindref="compound">ml_set_t</ref> *</type>
          <declname>Set</declname>
        </param>
        <param>
          <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="451" column="13" bodyfile="src/ml_set.c" bodystart="451" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1aca99b67fe88a46af6e4f24dc3eb7cbf8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_set_move_node_tail</definition>
        <argsstring>(ml_set_t *Set, ml_set_node_t *Node)</argsstring>
        <name>ml_set_move_node_tail</name>
        <param>
          <type><ref refid="structml__set__t" kindref="compound">ml_set_t</ref> *</type>
          <declname>Set</declname>
        </param>
        <param>
          <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="468" column="13" bodyfile="src/ml_set.c" bodystart="468" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a5ee23a0358d06ebfd57ce9b11b625cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;[]&quot;, MLSetT, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&quot;</type>
          <array>[]</array>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="485" column="1" bodyfile="src/ml_set.c" bodystart="485" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a2244ac025a3cc860f08013122bdb3d45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;in&quot;, MLAnyT, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;in&quot;</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="505" column="1" bodyfile="src/ml_set.c" bodystart="505" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a4c1c26d62101d6ce46a3c7f715c47757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;empty&quot;, MLSetMutableT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;empty&quot;</type>
        </param>
        <param>
          <type>MLSetMutableT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="517" column="1" bodyfile="src/ml_set.c" bodystart="517" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a2e34c1225d24126bcd2b980b5b27fbbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;pop&quot;, MLSetMutableT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;pop&quot;</type>
        </param>
        <param>
          <type>MLSetMutableT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="532" column="1" bodyfile="src/ml_set.c" bodystart="532" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a5c229eb56b8a2cd8a206f701abb5ed80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;pull&quot;, MLSetMutableT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;pull&quot;</type>
        </param>
        <param>
          <type>MLSetMutableT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="559" column="1" bodyfile="src/ml_set.c" bodystart="559" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a6b2fb766c80b11b11c27881c67071093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;insert&quot;, MLSetMutableT, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;insert&quot;</type>
        </param>
        <param>
          <type>MLSetMutableT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="586" column="1" bodyfile="src/ml_set.c" bodystart="586" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a6d27e47cded24416d9ac18c700c6d9bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;push&quot;, MLSetMutableT, MLAnyT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;push&quot;</type>
        </param>
        <param>
          <type>MLSetMutableT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="599" column="1" bodyfile="src/ml_set.c" bodystart="599" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1ae7daf2f5ba11e117f1860d86e35c3287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(&quot;put&quot;, MLSetMutableT, MLAnyT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>&quot;put&quot;</type>
        </param>
        <param>
          <type>MLSetMutableT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="621" column="1" bodyfile="src/ml_set.c" bodystart="621" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a3bdee0f9653b6d29cdac3e6fb461ba2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;delete&quot;, MLSetMutableT, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;delete&quot;</type>
        </param>
        <param>
          <type>MLSetMutableT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="643" column="1" bodyfile="src/ml_set.c" bodystart="643" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1ac7ddb6c7423f7f6226e012f7ca9b6b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;missing&quot;, MLSetMutableT, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;missing&quot;</type>
        </param>
        <param>
          <type>MLSetMutableT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="657" column="1" bodyfile="src/ml_set.c" bodystart="657" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1ad2f2fc02374fb680c5b8f6673c64b6e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLSetFromT,(MLSequenceT), &quot;set::from&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLSetFromT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;set::from&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="678" column="1" declfile="src/ml_set.c" declline="678" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a91d6f25ab31a8cb76f423b53b0f8c9d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLSetFromT, ml_state_t *Caller, ml_set_from_t *From)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLSetFromT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__set__from__t" kindref="compound">ml_set_from_t</ref> *</type>
          <declname>From</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="681" column="13" bodyfile="src/ml_set.c" bodystart="681" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1ad8a2ade2c24260321555af9eb9fa6f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;from&quot;, MLSetT, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;from&quot;</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="685" column="1" bodyfile="src/ml_set.c" bodystart="685" bodyend="701"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a4e1ee9924a516f7eadfb2696955a5f1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="703" column="1" bodyfile="src/ml_set.c" bodystart="703" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a0d72c9d84dd7bcd3dd5788f8e1aeece3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_set_stringer</definition>
        <argsstring>(ml_value_t *Key, ml_set_stringer_t *Stringer)</argsstring>
        <name>ml_set_stringer</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Key</declname>
        </param>
        <param>
          <type><ref refid="structml__set__stringer__t" kindref="compound">ml_set_stringer_t</ref> *</type>
          <declname>Stringer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="729" column="12" bodyfile="src/ml_set.c" bodystart="729" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1ae853b121242604db4b93d7e6fb119dc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLSetT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="740" column="1" bodyfile="src/ml_set.c" bodystart="740" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a097ab33bee1ed05ea2db1d1b00290d2a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLSetNodeT, ml_state_t *Caller, ml_set_node_t *Node)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLSetNodeT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="755" column="13" bodyfile="src/ml_set.c" bodystart="755" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a70dba310d75e4142e73325b239dcb03a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLSetNodeT, ml_state_t *Caller, ml_set_node_t *Node)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLSetNodeT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="759" column="13" bodyfile="src/ml_set.c" bodystart="759" bodyend="761"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1ad8e60c49efb1c4930ab6947bde9d66e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLSetNodeT, ml_state_t *Caller, ml_set_node_t *Node)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLSetNodeT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="763" column="13" bodyfile="src/ml_set.c" bodystart="763" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a473474ac336e4203685bda95c2d154ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLSetT, ml_state_t *Caller, ml_set_t *Set)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__set__t" kindref="compound">ml_set_t</ref> *</type>
          <declname>Set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="767" column="13" bodyfile="src/ml_set.c" bodystart="767" bodyend="769"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a9603b720d6ffd62e3c31d07367dd5246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;+&quot;, MLSetT, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;+&quot;</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="771" column="1" bodyfile="src/ml_set.c" bodystart="771" bodyend="783"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1ab5cd3f21e8c938cb848047003e7613fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;\\/&quot;, MLSetT, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;\\/&quot;</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="785" column="1" bodyfile="src/ml_set.c" bodystart="785" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a3b7f323a256fb64eb7babc1bb3664282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;*&quot;, MLSetT, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;*&quot;</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="799" column="1" bodyfile="src/ml_set.c" bodystart="799" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a660845022cb7fc391ce60e70ada4c84b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;/\\&quot;, MLSetT, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;/\\&quot;</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="814" column="1" bodyfile="src/ml_set.c" bodystart="814" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1abfe2009439a94d2fe1454ed97a6b2d1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;/&quot;, MLSetT, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;/&quot;</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="829" column="1" bodyfile="src/ml_set.c" bodystart="829" bodyend="842"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1aeb0398012cdcfd4ea1254c4bf1d02fa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&gt;&lt;&quot;, MLSetT, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="844" column="1" bodyfile="src/ml_set.c" bodystart="844" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1ab7d0643acd4329464e321c155bf5d6d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;=&gt;&quot;, MLSetT, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;=</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="862" column="1" bodyfile="src/ml_set.c" bodystart="862" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1af1910d93a33b574bb6dc23a6468d84ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&quot;, MLSetT, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="884" column="1" bodyfile="src/ml_set.c" bodystart="884" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a75abc56ccb7f8366cd4e17881b2fbd08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;=&quot;, MLSetT, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;=&quot;</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="902" column="1" bodyfile="src/ml_set.c" bodystart="902" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a7c2ea0f70671596e2ef3f0a70d32f091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&gt;&quot;, MLSetT, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="920" column="1" bodyfile="src/ml_set.c" bodystart="920" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a02617995bc2091629ee81667c2c54a8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&gt;=&quot;, MLSetT, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&gt;=&quot;</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="938" column="1" bodyfile="src/ml_set.c" bodystart="938" bodyend="954"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1ace9cb2516b4b822ff2eee1c9813541e2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_set_sort_state_run</definition>
        <argsstring>(ml_set_sort_state_t *State, ml_value_t *Result)</argsstring>
        <name>ml_set_sort_state_run</name>
        <param>
          <type><ref refid="structml__set__sort__state__t" kindref="compound">ml_set_sort_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="968" column="13" bodyfile="src/ml_set.c" bodystart="968" bodyend="1044"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1aa2d06ae85860580fa538b15ac70620b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;sort&quot;, MLSetMutableT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;sort&quot;</type>
        </param>
        <param>
          <type>MLSetMutableT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="1048" column="1" bodyfile="src/ml_set.c" bodystart="1048" bodyend="1070"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a0bbeec62e8d19dad0d39494ed1d4b6a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;sort&quot;, MLSetMutableT, MLFunctionT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;sort&quot;</type>
        </param>
        <param>
          <type>MLSetMutableT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="1072" column="1" bodyfile="src/ml_set.c" bodystart="1072" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1ac05787f42b208a653c33783afef36c1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;reverse&quot;, MLSetMutableT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;reverse&quot;</type>
        </param>
        <param>
          <type>MLSetMutableT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="1097" column="1" bodyfile="src/ml_set.c" bodystart="1097" bodyend="1119"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1af11a9ed2508e9ab2eb4c16f5dbc1c2d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;random&quot;, MLSetT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;random&quot;</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="1121" column="1" bodyfile="src/ml_set.c" bodystart="1121" bodyend="1137"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a86845e91b93040c2b1d1d4a95a98dc27" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_set_visit_run</definition>
        <argsstring>(ml_set_visit_t *State, ml_value_t *Value)</argsstring>
        <name>ml_set_visit_run</name>
        <param>
          <type><ref refid="structml__set__visit__t" kindref="compound">ml_set_visit_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="1146" column="13" bodyfile="src/ml_set.c" bodystart="1146" bodyend="1154"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a91866646398b643f346f25c3473f2147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;visit&quot;, MLVisitorT, MLSetT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;visit&quot;</type>
        </param>
        <param>
          <type>MLVisitorT</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="1156" column="1" bodyfile="src/ml_set.c" bodystart="1156" bodyend="1172"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a9079f368cdc848e85aac630138e6f9b4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_set_copy_run</definition>
        <argsstring>(ml_set_visit_t *State, ml_value_t *Value)</argsstring>
        <name>ml_set_copy_run</name>
        <param>
          <type><ref refid="structml__set__visit__t" kindref="compound">ml_set_visit_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="1174" column="13" bodyfile="src/ml_set.c" bodystart="1174" bodyend="1183"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1a4fb3f128feef7e54a0d599e110fe1f4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;copy&quot;, MLVisitorT, MLSetT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;copy&quot;</type>
        </param>
        <param>
          <type>MLVisitorT</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="1185" column="1" bodyfile="src/ml_set.c" bodystart="1185" bodyend="1204"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1ace8ce4f8d40a5cc27104b9100b1c727e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_set_const_run</definition>
        <argsstring>(ml_set_visit_t *State, ml_value_t *Value)</argsstring>
        <name>ml_set_const_run</name>
        <param>
          <type><ref refid="structml__set__visit__t" kindref="compound">ml_set_visit_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="1206" column="13" bodyfile="src/ml_set.c" bodystart="1206" bodyend="1229"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1aa10b768d76acbde1787e3cd11629f23f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;const&quot;, MLVisitorT, MLSetT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;const&quot;</type>
        </param>
        <param>
          <type>MLVisitorT</type>
        </param>
        <param>
          <type>MLSetT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="1231" column="1" bodyfile="src/ml_set.c" bodystart="1231" bodyend="1250"/>
      </memberdef>
      <memberdef kind="function" id="ml__set_8c_1ac48418bc4ae83889942da63bd2962cfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_set_init</definition>
        <argsstring>()</argsstring>
        <name>ml_set_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_set.c" line="1271" column="6" bodyfile="src/ml_set.c" bodystart="1271" bodyend="1285"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ml_set.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;minilang.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_sequence.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_method.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;set&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">ML_TYPE(MLSetT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;set&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>set<sp/>of<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Values<sp/>can<sp/>be<sp/>of<sp/>any<sp/>type<sp/>supporting<sp/>hashing<sp/>and<sp/>comparison.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>iterating<sp/>over<sp/>a<sp/>set<sp/>generates<sp/>the<sp/>values<sp/>in<sp/>the<sp/>order<sp/>they<sp/>were<sp/>inserted,<sp/>however<sp/>this<sp/>ordering<sp/>can<sp/>be<sp/>changed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_MUTABLES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">ML_TYPE(MLSetMutableT,<sp/>(MLSetT),<sp/></highlight><highlight class="stringliteral">&quot;set::mutable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLSetMutableT<sp/>MLSetT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_set_update_generic(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Set-&gt;Type-&gt;Type<sp/>!=<sp/>MLTypeGenericT)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set-&gt;Type<sp/>=<sp/>ml_generic_type(2,<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*[]){Set-&gt;Type,<sp/>ml_typeof(Value)});</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ValueType0<sp/>=<sp/>ml_typeof(Value);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*BaseType<sp/>=<sp/>ml_generic_type_args(Set-&gt;Type)[0];</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ValueType<sp/>=<sp/>ml_generic_type_args(Set-&gt;Type)[1];</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is_subtype(ValueType0,<sp/>ValueType))<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ValueType2<sp/>=<sp/>ml_type_max(ValueType,<sp/>ValueType0);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ValueType<sp/>!=<sp/>ValueType2)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set-&gt;Type<sp/>=<sp/>ml_generic_type(2,<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*[]){BaseType,<sp/>ValueType2});</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">ML_ENUM2(MLSetOrderT,<sp/></highlight><highlight class="stringliteral">&quot;set::order&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Insert&quot;</highlight><highlight class="normal">,<sp/>SET_ORDER_INSERT,<sp/></highlight><highlight class="comment">//<sp/>default<sp/>ordering;<sp/>inserted<sp/>values<sp/>are<sp/>put<sp/>at<sp/>end,<sp/>no<sp/>reordering<sp/>on<sp/>access.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;LRU&quot;</highlight><highlight class="normal">,<sp/>SET_ORDER_LRU,<sp/></highlight><highlight class="comment">//<sp/>inserted<sp/>values<sp/>are<sp/>kept<sp/>in<sp/>ascending<sp/>order,<sp/>no<sp/>reordering<sp/>on<sp/>access.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;MRU&quot;</highlight><highlight class="normal">,<sp/>SET_ORDER_MRU,<sp/></highlight><highlight class="comment">//<sp/>inserted<sp/>values<sp/>are<sp/>kept<sp/>in<sp/>descending<sp/>order,<sp/>no<sp/>reordering<sp/>on<sp/>access.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Ascending&quot;</highlight><highlight class="normal">,<sp/>SET_ORDER_ASC,<sp/></highlight><highlight class="comment">//<sp/>inserted<sp/>values<sp/>are<sp/>put<sp/>at<sp/>start,<sp/>accessed<sp/>values<sp/>are<sp/>moved<sp/>to<sp/>start.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Descending&quot;</highlight><highlight class="normal">,<sp/>SET_ORDER_DESC<sp/></highlight><highlight class="comment">//<sp/>inserted<sp/>values<sp/>are<sp/>put<sp/>at<sp/>end,<sp/>accessed<sp/>values<sp/>are<sp/>moved<sp/>to<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_find_all,<sp/>MLSetT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_value_find_fn<sp/>RefFn)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RefFn(Data,<sp/>Value,<sp/>1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_SET_FOREACH(Value,<sp/>Iter)<sp/>ml_value_find_all(Iter-&gt;Key,<sp/>Data,<sp/>RefFn);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">ML_TYPE(MLSetNodeT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;set::node&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_set()<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>Set-&gt;Type<sp/>=<sp/>MLSetMutableT;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Set;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">ML_METHOD(MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>set()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_set();</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_iterate(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_iter_value(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_set_insert(State-&gt;Values[0],<sp/>Value);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)set_iterate;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_iterate(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State-&gt;Values[0]);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)set_iter_value;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">ML_METHODVX(MLSetT,<sp/>MLSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>set<sp/>of<sp/>all<sp/>the<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>set(&quot;cake&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref>,<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)set_iterate;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[0]<sp/>=<sp/>ml_set();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>ml_chained(Count,<sp/>Args));</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">ML_METHODVX(</highlight><highlight class="stringliteral">&quot;grow&quot;</highlight><highlight class="normal">,<sp/>MLSetMutableT,<sp/>MLSequenceT)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>of<sp/>all<sp/>the<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Sequence`<sp/>to<sp/>:mini:`Set`<sp/>and<sp/>returns<sp/>:mini:`Set`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>set(&quot;cake&quot;):grow(&quot;banana&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__iter__state__t" kindref="compound">ml_iter_state_t</ref>,<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)set_iterate;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Values[0]<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>ml_chained(Count<sp/>-<sp/>1,<sp/>Args<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*CompareMethod;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_set_compare(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*ml_method_cached_t<sp/>*Cached<sp/>=<sp/>Set-&gt;Cached;</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(Cached)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Cached-&gt;Types[0]<sp/>!=<sp/>ml_typeof(Args[0]))<sp/>Cached<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Cached-&gt;Types[1]<sp/>!=<sp/>ml_typeof(Args[1]))<sp/>Cached<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!Cached<sp/>||<sp/>!Cached-&gt;Callback)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cached<sp/>=<sp/>ml_method_search_cached(NULL,<sp/>(ml_method_t<sp/>*)CompareMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!Cached)<sp/>return<sp/>ml_no_method_error((ml_method_t<sp/>*)CompareMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set-&gt;Cached<sp/>=<sp/>Cached;</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>ml_simple_call(Cached-&gt;Callback,<sp/>2,<sp/>Args);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_simple_call(CompareMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*ml_set_find_node(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>Set-&gt;Root;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash<sp/>=<sp/>ml_typeof(Key)-&gt;hash(Key,<sp/>NULL);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__method__cached__t" kindref="compound">ml_method_cached_t</ref><sp/>*Cached<sp/>=<sp/>Set-&gt;Cached;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Cached<sp/>&amp;&amp;<sp/>Cached-&gt;Callback)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Cached-&gt;Types[0]<sp/>!=<sp/>ml_typeof(Key))<sp/>Cached<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Node)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hash<sp/>&lt;<sp/>Node-&gt;Hash)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compare<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hash<sp/>&gt;<sp/>Node-&gt;Hash)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compare<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[2]<sp/>=<sp/>{Key,<sp/>Node-&gt;Key};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_set_compare(Set,<sp/>Args);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compare<sp/>=<sp/>ml_integer_value(Result);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Compare)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Node;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node<sp/>=<sp/>Compare<sp/>&lt;<sp/>0<sp/>?<sp/>Node-&gt;Left<sp/>:<sp/>Node-&gt;Right;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_set_search(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set0,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>ml_set_find_node((<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Set0,<sp/>Key);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Node<sp/>?<sp/>MLSome<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_set_search0(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set0,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>ml_set_find_node((<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Set0,<sp/>Key);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Node<sp/>?<sp/>MLSome<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_set_balance(<ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Delta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Left)<sp/>Delta<sp/>=<sp/>Node-&gt;Left-&gt;Depth;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Right)<sp/>Delta<sp/>-=<sp/>Node-&gt;Right-&gt;Depth;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Delta;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_set_update_depth(<ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Depth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Left)<sp/>Depth<sp/>=<sp/>Node-&gt;Left-&gt;Depth;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Right<sp/>&amp;&amp;<sp/>Depth<sp/>&lt;<sp/>Node-&gt;Right-&gt;Depth)<sp/>Depth<sp/>=<sp/>Node-&gt;Right-&gt;Depth;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>Node-&gt;Depth<sp/>=<sp/>Depth<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_set_rotate_left(<ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>**Slot)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Ch<sp/>=<sp/>Slot[0]-&gt;Right;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>Slot[0]-&gt;Right<sp/>=<sp/>Slot[0]-&gt;Right-&gt;Left;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>Ch-&gt;Left<sp/>=<sp/>Slot[0];</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_set_update_depth(Slot[0]);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Ch;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_set_update_depth(Slot[0]);</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_set_rotate_right(<ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>**Slot)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Ch<sp/>=<sp/>Slot[0]-&gt;Left;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>Slot[0]-&gt;Left<sp/>=<sp/>Slot[0]-&gt;Left-&gt;Right;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>Ch-&gt;Right<sp/>=<sp/>Slot[0];</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_set_update_depth(Slot[0]);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Ch;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_set_update_depth(Slot[0]);</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_set_rebalance(<ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>**Slot)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Delta<sp/>=<sp/>ml_set_balance(Slot[0]);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Delta<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_set_balance(Slot[0]-&gt;Left)<sp/>&lt;<sp/>0)<sp/>ml_set_rotate_left(&amp;Slot[0]-&gt;Left);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_set_rotate_right(Slot);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Delta<sp/>==<sp/>-2)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_set_balance(Slot[0]-&gt;Right)<sp/>&gt;<sp/>0)<sp/>ml_set_rotate_right(&amp;Slot[0]-&gt;Right);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_set_rotate_left(Slot);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_set_insert_before(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set,<sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Parent,<sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>Node-&gt;Next<sp/>=<sp/>Parent;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>Node-&gt;Prev<sp/>=<sp/>Parent-&gt;Prev;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parent-&gt;Prev)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parent-&gt;Prev-&gt;Next<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set-&gt;Head<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>Parent-&gt;Prev<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_set_insert_after(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set,<sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Parent,<sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>Node-&gt;Prev<sp/>=<sp/>Parent;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>Node-&gt;Next<sp/>=<sp/>Parent-&gt;Next;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parent-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parent-&gt;Next-&gt;Prev<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set-&gt;Tail<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>Parent-&gt;Next<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*ml_set_node_child(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set,<sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Parent,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hash<sp/>&lt;<sp/>Parent-&gt;Hash)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compare<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hash<sp/>&gt;<sp/>Parent-&gt;Hash)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compare<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[2]<sp/>=<sp/>{Key,<sp/>Parent-&gt;Key};</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_set_compare(Set,<sp/>Args);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compare<sp/>=<sp/>ml_integer_value(Result);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Compare)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parent;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>**Slot<sp/>=<sp/>Compare<sp/>&lt;<sp/>0<sp/>?<sp/>&amp;Parent-&gt;Left<sp/>:<sp/>&amp;Parent-&gt;Right;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node<sp/>=<sp/>ml_set_node_child(Set,<sp/>Slot[0],<sp/>Hash,<sp/>Key);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Set-&gt;Size;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node<sp/>=<sp/>Slot[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Type<sp/>=<sp/>MLSetNodeT;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Depth<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Hash<sp/>=<sp/>Hash;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Key<sp/>=<sp/>Key;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Set-&gt;Order)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SET_ORDER_INSERT:</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SET_ORDER_LRU:<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Prev<sp/>=<sp/>Set-&gt;Tail;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prev-&gt;Next<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Prev<sp/>=<sp/>Prev;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set-&gt;Tail<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SET_ORDER_MRU:<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Next<sp/>=<sp/>Set-&gt;Head;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next-&gt;Prev<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Next<sp/>=<sp/>Next;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set-&gt;Head<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SET_ORDER_ASC:<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_set_insert_before(Set,<sp/>Parent,<sp/>Node);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_set_insert_after(Set,<sp/>Parent,<sp/>Node);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SET_ORDER_DESC:<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Compare<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_set_insert_before(Set,<sp/>Parent,<sp/>Node);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_set_insert_after(Set,<sp/>Parent,<sp/>Node);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_set_rebalance(Slot);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_set_update_depth(Slot[0]);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Node;</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*ml_set_node(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Root<sp/>=<sp/>Set-&gt;Root;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Root)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_set_node_child(Set,<sp/>Root,<sp/>Hash,<sp/>Key);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>++Set-&gt;Size;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>Set-&gt;Root<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>Node-&gt;Type<sp/>=<sp/>MLSetNodeT;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>Set-&gt;Head<sp/>=<sp/>Set-&gt;Tail<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>Node-&gt;Depth<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>Node-&gt;Hash<sp/>=<sp/>Hash;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>Node-&gt;Key<sp/>=<sp/>Key;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Node;</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*ml_set_slot(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set0,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Set0;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_set_node(Set,<sp/>ml_typeof(Key)-&gt;hash(Key,<sp/>NULL),<sp/>Key);</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_set_insert(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set0,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Set0;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Set-&gt;Size;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_set_node(Set,<sp/>ml_typeof(Key)-&gt;hash(Key,<sp/>NULL),<sp/>Key);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_set_update_generic(Set,<sp/>Key);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Set-&gt;Size<sp/>==<sp/>Size<sp/>?<sp/>MLSome<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_set_remove_depth_helper(<ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_set_remove_depth_helper(Node-&gt;Right);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_set_update_depth(Node);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_set_remove_internal(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set,<sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>**Slot,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>Slot[0];</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hash<sp/>&lt;<sp/>Node-&gt;Hash)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compare<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hash<sp/>&gt;<sp/>Node-&gt;Hash)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compare<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[2]<sp/>=<sp/>{Key,<sp/>Node-&gt;Key};</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_set_compare(Set,<sp/>Args);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compare<sp/>=<sp/>ml_integer_value(Result);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Removed<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Compare)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Set-&gt;Size;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Removed<sp/>=<sp/>MLSome;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Prev)<sp/>Node-&gt;Prev-&gt;Next<sp/>=<sp/>Node-&gt;Next;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>Set-&gt;Head<sp/>=<sp/>Node-&gt;Next;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Next)<sp/>Node-&gt;Next-&gt;Prev<sp/>=<sp/>Node-&gt;Prev;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>Set-&gt;Tail<sp/>=<sp/>Node-&gt;Prev;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Left<sp/>&amp;&amp;<sp/>Node-&gt;Right)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>**Y<sp/>=<sp/>&amp;Node-&gt;Left;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Y[0]-&gt;Right)<sp/>Y<sp/>=<sp/>&amp;Y[0]-&gt;Right;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node2<sp/>=<sp/>Y[0];</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Y[0]<sp/>=<sp/>Node2-&gt;Left;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node2-&gt;Left<sp/>=<sp/>Node-&gt;Left;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node2-&gt;Right<sp/>=<sp/>Node-&gt;Right;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Node2;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_set_remove_depth_helper(Node2-&gt;Left);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Left)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Node-&gt;Left;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Right)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Node-&gt;Right;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Removed<sp/>=<sp/>ml_set_remove_internal(Set,<sp/>Compare<sp/>&lt;<sp/>0<sp/>?<sp/>&amp;Node-&gt;Left<sp/>:<sp/>&amp;Node-&gt;Right,<sp/>Hash,<sp/>Key);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_set_update_depth(Slot[0]);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_set_rebalance(Slot);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Removed;</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_set_delete(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set0,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Set0;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_set_remove_internal(Set,<sp/>&amp;Set-&gt;Root,<sp/>ml_typeof(Key)-&gt;hash(Key,<sp/>NULL),<sp/>Key);</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_set_foreach(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*callback)(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>Set-&gt;Head;<sp/>Node;<sp/>Node<sp/>=<sp/>Node-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(callback(Node-&gt;Key,<sp/>Data))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;precount&quot;</highlight><highlight class="normal">,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>values<sp/>in<sp/>:mini:`Set`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>set([&quot;A&quot;,<sp/>&quot;B&quot;,<sp/>&quot;C&quot;]):count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Set-&gt;Size);</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;size&quot;</highlight><highlight class="normal">,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>values<sp/>in<sp/>:mini:`Set`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>set([&quot;A&quot;,<sp/>&quot;B&quot;,<sp/>&quot;C&quot;]):size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Set-&gt;Size);</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;count&quot;</highlight><highlight class="normal">,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>values<sp/>in<sp/>:mini:`Set`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>set([&quot;A&quot;,<sp/>&quot;B&quot;,<sp/>&quot;C&quot;]):count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Set-&gt;Size);</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>first<sp/>value<sp/>in<sp/>:mini:`Set`<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>:mini:`Set`<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Set-&gt;Head<sp/>?<sp/>Set-&gt;Head-&gt;Key<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>last<sp/>value<sp/>in<sp/>:mini:`Set`<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>:mini:`Set`<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Set-&gt;Tail<sp/>?<sp/>Set-&gt;Tail-&gt;Key<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;order&quot;</highlight><highlight class="normal">,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//&gt;set::order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>ordering<sp/>of<sp/>:mini:`Set`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_enum_value(MLSetOrderT,<sp/>Set-&gt;Order);</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;order&quot;</highlight><highlight class="normal">,<sp/>MLSetMutableT,<sp/>MLSetOrderT)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">//&lt;Order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>ordering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>Set-&gt;Order<sp/>=<sp/>ml_enum_value_value(Args[1]);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Set;</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_set_move_node_head(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set,<sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Prev<sp/>=<sp/>Node-&gt;Prev;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Prev)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Next<sp/>=<sp/>Node-&gt;Next;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prev-&gt;Next<sp/>=<sp/>Next;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Next)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next-&gt;Prev<sp/>=<sp/>Prev;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set-&gt;Tail<sp/>=<sp/>Prev;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Next<sp/>=<sp/>Set-&gt;Head;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set-&gt;Head-&gt;Prev<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set-&gt;Head<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_set_move_node_tail(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set,<sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Next<sp/>=<sp/>Node-&gt;Next;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Next)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Prev<sp/>=<sp/>Node-&gt;Prev;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next-&gt;Prev<sp/>=<sp/>Prev;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Prev)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prev-&gt;Next<sp/>=<sp/>Next;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set-&gt;Head<sp/>=<sp/>Next;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Prev<sp/>=<sp/>Set-&gt;Tail;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set-&gt;Tail-&gt;Next<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set-&gt;Tail<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">,<sp/>MLSetT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">//&gt;some|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Value`<sp/>if<sp/>it<sp/>is<sp/>in<sp/>:mini:`Set`,<sp/>otherwise<sp/>returns<sp/>:mini:`nil`..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>S<sp/>:=<sp/>set([&quot;A&quot;,<sp/>&quot;B&quot;,<sp/>&quot;C&quot;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S[&quot;A&quot;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S[&quot;D&quot;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>ml_set_find_node(Set,<sp/>Args[1]);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Set-&gt;Order<sp/>==<sp/>SET_ORDER_LRU)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_set_move_node_tail(Set,<sp/>Node);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Set-&gt;Order<sp/>==<sp/>SET_ORDER_MRU)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_set_move_node_head(Set,<sp/>Node);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal">,<sp/>MLAnyT,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">//&gt;any|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Key`<sp/>if<sp/>it<sp/>is<sp/>in<sp/>:mini:`Map`,<sp/>otherwise<sp/>return<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>S<sp/>:=<sp/>set([&quot;A&quot;,<sp/>&quot;B&quot;,<sp/>&quot;C&quot;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;A&quot;<sp/>in<sp/>S</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>&quot;D&quot;<sp/>in<sp/>S</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_set_find_node(Set,<sp/>Args[0])<sp/>?<sp/>Args[0]<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;empty&quot;</highlight><highlight class="normal">,<sp/>MLSetMutableT)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Deletes<sp/>all<sp/>values<sp/>from<sp/>:mini:`Set`<sp/>and<sp/>returns<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>S<sp/>:=<sp/>set([&quot;A&quot;,<sp/>&quot;B&quot;,<sp/>&quot;C&quot;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S:empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>Set-&gt;Root<sp/>=<sp/>Set-&gt;Head<sp/>=<sp/>Set-&gt;Tail<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>Set-&gt;Size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>Set-&gt;Type<sp/>=<sp/>MLSetMutableT;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Set;</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;pop&quot;</highlight><highlight class="normal">,<sp/>MLSetMutableT)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//&gt;any|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Deletes<sp/>the<sp/>first<sp/>value<sp/>from<sp/>:mini:`Set`<sp/>according<sp/>to<sp/>its<sp/>iteration<sp/>order.<sp/>Returns<sp/>the<sp/>deleted<sp/>value,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>:mini:`Set`<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>:&gt;<sp/>Insertion<sp/>order<sp/>(default)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>S1<sp/>:=<sp/>set(&quot;cake&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S1:pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment">//$-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>:&gt;<sp/>LRU<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>S2<sp/>:=<sp/>set(&quot;cake&quot;):order(set::order::LRU)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>S2[&quot;a&quot;];<sp/>S2[&quot;e&quot;];<sp/>S2[&quot;c&quot;];<sp/>S2[&quot;k&quot;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S2:pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">//$-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>:&gt;<sp/>MRU<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>S3<sp/>:=<sp/>set(&quot;cake&quot;):order(set::order::MRU)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>S3[&quot;a&quot;];<sp/>S3[&quot;e&quot;];<sp/>S3[&quot;c&quot;];<sp/>S3[&quot;k&quot;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S3:pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>Set-&gt;Head;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_set_delete(Args[0],<sp/>Node-&gt;Key);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;pull&quot;</highlight><highlight class="normal">,<sp/>MLSetMutableT)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">//&gt;any|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Deletes<sp/>the<sp/>last<sp/>value<sp/>from<sp/>:mini:`Set`<sp/>according<sp/>to<sp/>its<sp/>iteration<sp/>order.<sp/>Returns<sp/>the<sp/>deleted<sp/>value,<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>:mini:`Set`<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>:&gt;<sp/>Insertion<sp/>order<sp/>(default)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>S1<sp/>:=<sp/>set(&quot;cake&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S1:pull</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment">//$-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>:&gt;<sp/>LRU<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>S2<sp/>:=<sp/>set(&quot;cake&quot;):order(set::order::LRU)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>S2[&quot;a&quot;];<sp/>S2[&quot;e&quot;];<sp/>S2[&quot;c&quot;];<sp/>S2[&quot;k&quot;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S2:pull</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="comment">//$-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>:&gt;<sp/>MRU<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>S3<sp/>:=<sp/>set(&quot;cake&quot;):order(set::order::MRU)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>S3[&quot;a&quot;];<sp/>S3[&quot;e&quot;];<sp/>S3[&quot;c&quot;];<sp/>S3[&quot;k&quot;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S3:pull</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>Set-&gt;Tail;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_set_delete(Args[0],<sp/>Node-&gt;Key);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;insert&quot;</highlight><highlight class="normal">,<sp/>MLSetMutableT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="comment">//&gt;some|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inserts<sp/>:mini:`Value`<sp/>into<sp/>:mini:`Set`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>previous<sp/>value<sp/>associated<sp/>with<sp/>:mini:`Key`<sp/>if<sp/>any,<sp/>otherwise<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>S<sp/>:=<sp/>set([&quot;A&quot;,<sp/>&quot;B&quot;,<sp/>&quot;C&quot;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S:insert(&quot;A&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S:insert(&quot;D&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_set_insert(Args[0],<sp/>Args[1]);</highlight></codeline>
<codeline lineno="597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;push&quot;</highlight><highlight class="normal">,<sp/>MLSetMutableT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inserts<sp/>each<sp/>:mini:`Value`<sp/>into<sp/>:mini:`Set`<sp/>at<sp/>the<sp/>start.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>S<sp/>:=<sp/>set([&quot;A&quot;,<sp/>&quot;B&quot;,<sp/>&quot;C&quot;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S:push(&quot;A&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S:push(&quot;D&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S:push(&quot;E&quot;,<sp/>&quot;B&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>ml_set_node(Set,<sp/>ml_typeof(Key)-&gt;hash(Key,<sp/>NULL),<sp/>Key);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_set_move_node_head(Set,<sp/>Node);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_set_update_generic(Set,<sp/>Key);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Set;</highlight></codeline>
<codeline lineno="619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal">ML_METHODV(</highlight><highlight class="stringliteral">&quot;put&quot;</highlight><highlight class="normal">,<sp/>MLSetMutableT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inserts<sp/>each<sp/>:mini:`Value`<sp/>into<sp/>:mini:`Set`<sp/>at<sp/>the<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>S<sp/>:=<sp/>set([&quot;A&quot;,<sp/>&quot;B&quot;,<sp/>&quot;C&quot;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S:put(&quot;A&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S:put(&quot;D&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S:put(&quot;E&quot;,<sp/>&quot;B&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>ml_set_node(Set,<sp/>ml_typeof(Key)-&gt;hash(Key,<sp/>NULL),<sp/>Key);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_set_move_node_tail(Set,<sp/>Node);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_set_update_generic(Set,<sp/>Key);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Set;</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;delete&quot;</highlight><highlight class="normal">,<sp/>MLSetMutableT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="comment">//&gt;some|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Removes<sp/>:mini:`Value`<sp/>from<sp/>:mini:`Set`<sp/>and<sp/>returns<sp/>it<sp/>if<sp/>found,<sp/>otherwise<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>S<sp/>:=<sp/>set([&quot;A&quot;,<sp/>&quot;B&quot;,<sp/>&quot;C&quot;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S:delete(&quot;A&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S:delete(&quot;D&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_set_delete(Set,<sp/>Key);</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;missing&quot;</highlight><highlight class="normal">,<sp/>MLSetMutableT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="comment">//&gt;some|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>:mini:`Value`<sp/>is<sp/>present<sp/>in<sp/>:mini:`Set`<sp/>then<sp/>returns<sp/>:mini:`nil`.<sp/>Otherwise<sp/>inserts<sp/>:mini:`Value`<sp/>into<sp/>:mini:`Set`<sp/>and<sp/>returns<sp/>:mini:`some`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>S<sp/>:=<sp/>set([&quot;A&quot;,<sp/>&quot;B&quot;,<sp/>&quot;C&quot;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S:missing(&quot;A&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S:missing(&quot;D&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Set-&gt;Size;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_set_node(Set,<sp/>ml_typeof(Key)-&gt;hash(Key,<sp/>NULL),<sp/>Key);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Set-&gt;Size<sp/>==<sp/>Size<sp/>?<sp/>MLNil<sp/>:<sp/>MLSome;</highlight></codeline>
<codeline lineno="671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673" refid="structml__set__from__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node;</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}<sp/><ref refid="structml__set__from__t" kindref="compound">ml_set_from_t</ref>;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal">ML_TYPE(MLSetFromT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;set::from&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLSetFromT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__set__from__t" kindref="compound">ml_set_from_t</ref><sp/>*From)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(From-&gt;Node);</highlight></codeline>
<codeline lineno="683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;from&quot;</highlight><highlight class="normal">,<sp/>MLSetT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>subset<sp/>of<sp/>:mini:`Set`<sp/>after<sp/>:mini:`Value`<sp/>as<sp/>a<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">//$-<sp/>let<sp/>S<sp/>:=<sp/>set([&quot;A&quot;,<sp/>&quot;B&quot;,<sp/>&quot;C&quot;,<sp/>&quot;D&quot;,<sp/>&quot;E&quot;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>set(S:from(&quot;C&quot;))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>set(S:from(&quot;F&quot;))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>ml_set_find_node(Set,<sp/>Key);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__from__t" kindref="compound">ml_set_from_t</ref><sp/>*From<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__set__from__t" kindref="compound">ml_set_from_t</ref>);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>From-&gt;Type<sp/>=<sp/>MLSetFromT;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>From-&gt;Node<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)From;</highlight></codeline>
<codeline lineno="701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>a<sp/>representation<sp/>of<sp/>:mini:`Set`<sp/>to<sp/>:mini:`Buffer`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>Set-&gt;Head;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node)<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_simple_append(Buffer,<sp/>Node-&gt;Key);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((Node<sp/>=<sp/>Node-&gt;Next))<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_simple_append(Buffer,<sp/>Node-&gt;Key);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722" refid="structml__set__stringer__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__set__stringer__t" kindref="compound">ml_set_stringer_t</ref><sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Seperator;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SeperatorLength,<sp/>First;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error;</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}<sp/><ref refid="structml__set__stringer__t" kindref="compound">ml_set_stringer_t</ref>;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_set_stringer(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key,<sp/><ref refid="structml__set__stringer__t" kindref="compound">ml_set_stringer_t</ref><sp/>*Stringer)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Stringer-&gt;First)<sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stringer-&gt;First<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Stringer-&gt;Buffer,<sp/>Stringer-&gt;Seperator,<sp/>Stringer-&gt;SeperatorLength);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>Stringer-&gt;Error<sp/>=<sp/>ml_stringbuffer_simple_append(Stringer-&gt;Buffer,<sp/>Key);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Stringer-&gt;Error))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLSetT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>the<sp/>values<sp/>of<sp/>:mini:`Set`<sp/>to<sp/>:mini:`Buffer`<sp/>with<sp/>:mini:`Sep`<sp/>between<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__stringer__t" kindref="compound">ml_set_stringer_t</ref><sp/>Stringer[1]<sp/>=<sp/>{{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_string_value(Args[2]),</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0],</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_string_length(Args[2]),</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>}};</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_set_foreach(Args[1],<sp/>Stringer,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_set_stringer))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Stringer-&gt;Error;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLSetNodeT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN((<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Node-&gt;Next<sp/>?:<sp/>MLNil);</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLSetNodeT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Node-&gt;Key);</highlight></codeline>
<codeline lineno="761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLSetNodeT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Node-&gt;Key);</highlight></codeline>
<codeline lineno="765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLSetT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN((<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Set-&gt;Head<sp/>?:<sp/>MLNil);</highlight></codeline>
<codeline lineno="769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>MLSetT,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>set<sp/>combining<sp/>the<sp/>values<sp/>of<sp/>:mini:`Set/1`<sp/>and<sp/>:mini:`Set/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>set(&quot;banana&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>set(&quot;bread&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A<sp/>+<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set<sp/>=<sp/>ml_set();</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_SET_FOREACH(Args[0],<sp/>Node)<sp/>ml_set_insert(Set,<sp/>Node-&gt;Key);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_SET_FOREACH(Args[1],<sp/>Node)<sp/>ml_set_insert(Set,<sp/>Node-&gt;Key);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Set;</highlight></codeline>
<codeline lineno="783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;\\/&quot;</highlight><highlight class="normal">,<sp/>MLSetT,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>set<sp/>combining<sp/>the<sp/>values<sp/>of<sp/>:mini:`Set/1`<sp/>and<sp/>:mini:`Set/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>set(&quot;banana&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>set(&quot;bread&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A<sp/>\/<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set<sp/>=<sp/>ml_set();</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_SET_FOREACH(Args[0],<sp/>Node)<sp/>ml_set_insert(Set,<sp/>Node-&gt;Key);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_SET_FOREACH(Args[1],<sp/>Node)<sp/>ml_set_insert(Set,<sp/>Node-&gt;Key);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Set;</highlight></codeline>
<codeline lineno="797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/>MLSetT,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>set<sp/>containing<sp/>the<sp/>values<sp/>of<sp/>:mini:`Set/1`<sp/>which<sp/>are<sp/>also<sp/>in<sp/>:mini:`Set/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>set(&quot;banana&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>set(&quot;bread&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A<sp/>*<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set<sp/>=<sp/>ml_set();</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_SET_FOREACH(Args[1],<sp/>Node)<sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_set_search0(Args[0],<sp/>Node-&gt;Key))<sp/>ml_set_insert(Set,<sp/>Node-&gt;Key);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Set;</highlight></codeline>
<codeline lineno="812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;/\\&quot;</highlight><highlight class="normal">,<sp/>MLSetT,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>set<sp/>containing<sp/>the<sp/>values<sp/>of<sp/>:mini:`Set/1`<sp/>which<sp/>are<sp/>also<sp/>in<sp/>:mini:`Set/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>set(&quot;banana&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>set(&quot;bread&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A<sp/>/\<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set<sp/>=<sp/>ml_set();</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_SET_FOREACH(Args[1],<sp/>Node)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_set_search0(Args[0],<sp/>Node-&gt;Key))<sp/>ml_set_insert(Set,<sp/>Node-&gt;Key);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Set;</highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>MLSetT,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>set<sp/>containing<sp/>the<sp/>values<sp/>of<sp/>:mini:`Set/1`<sp/>which<sp/>are<sp/>not<sp/>in<sp/>:mini:`Set/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>set(&quot;banana&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>set(&quot;bread&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A<sp/>/<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set<sp/>=<sp/>ml_set();</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_SET_FOREACH(Args[0],<sp/>Node)<sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_set_search0(Args[1],<sp/>Node-&gt;Key))<sp/>ml_set_insert(Set,<sp/>Node-&gt;Key);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Set;</highlight></codeline>
<codeline lineno="842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&gt;&lt;&quot;</highlight><highlight class="normal">,<sp/>MLSetT,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>set<sp/>containing<sp/>the<sp/>values<sp/>of<sp/>:mini:`Set/1`<sp/>and<sp/>:mini:`Set/2`<sp/>that<sp/>are<sp/>not<sp/>in<sp/>both.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>set(&quot;banana&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>set(&quot;bread&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A<sp/>&gt;&lt;<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set<sp/>=<sp/>ml_set();</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_SET_FOREACH(Args[0],<sp/>Node)<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_set_search0(Args[1],<sp/>Node-&gt;Key))<sp/>ml_set_insert(Set,<sp/>Node-&gt;Key);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_SET_FOREACH(Args[1],<sp/>Node)<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_set_search0(Args[0],<sp/>Node-&gt;Key))<sp/>ml_set_insert(Set,<sp/>Node-&gt;Key);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Set;</highlight></codeline>
<codeline lineno="860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;=&gt;&quot;</highlight><highlight class="normal">,<sp/>MLSetT,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>tuple<sp/>of<sp/>:mini:`(Set/1<sp/>/<sp/>Set/2,<sp/>Set/1<sp/>*<sp/>Set/2,<sp/>Set/2<sp/>/<sp/>Set/1)`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>set(&quot;banana&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>set(&quot;bread&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A<sp/>&lt;=&gt;<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set1<sp/>=<sp/>ml_set(),<sp/>*Set2<sp/>=<sp/>ml_set(),<sp/>*Set3<sp/>=<sp/>ml_set();</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_SET_FOREACH(Args[0],<sp/>Node)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_set_search0(Args[1],<sp/>Node-&gt;Key))<sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_set_insert(Set1,<sp/>Node-&gt;Key);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_set_insert(Set2,<sp/>Node-&gt;Key);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_SET_FOREACH(Args[1],<sp/>Node)<sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_set_search0(Args[0],<sp/>Node-&gt;Key))<sp/>ml_set_insert(Set3,<sp/>Node-&gt;Key);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_tuplev(3,<sp/>Set1,<sp/>Set2,<sp/>Set3);</highlight></codeline>
<codeline lineno="882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">,<sp/>MLSetT,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>:mini:`Set/2`<sp/>if<sp/>:mini:`Set/1`<sp/>is<sp/>a<sp/>strict<sp/>subset<sp/>of<sp/>:mini:`Set/2`,<sp/>otherwise<sp/>returns<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>set(&quot;bandana&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>set(&quot;ban&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>C<sp/>:=<sp/>set(&quot;bread&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>D<sp/>:=<sp/>set(&quot;bandana&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>B<sp/>&lt;<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>C<sp/>&lt;<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>D<sp/>&lt;<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_SET_FOREACH(Args[0],<sp/>Node)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_set_search0(Args[1],<sp/>Node-&gt;Key))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_set_size(Args[1])<sp/>&gt;<sp/>ml_set_size(Args[0])<sp/>?<sp/>Args[1]<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;=&quot;</highlight><highlight class="normal">,<sp/>MLSetT,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>:mini:`Set/2`<sp/>if<sp/>:mini:`Set/1`<sp/>is<sp/>a<sp/>subset<sp/>of<sp/>:mini:`Set/2`,<sp/>otherwise<sp/>returns<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>set(&quot;bandana&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>set(&quot;ban&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>C<sp/>:=<sp/>set(&quot;bread&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>D<sp/>:=<sp/>set(&quot;bandana&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>B<sp/>&lt;=<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>C<sp/>&lt;=<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>D<sp/>&lt;=<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_SET_FOREACH(Args[0],<sp/>Node)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_set_search0(Args[1],<sp/>Node-&gt;Key))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="918"><highlight class="normal">}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLSetT,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>:mini:`Set/2`<sp/>if<sp/>:mini:`Set/1`<sp/>is<sp/>a<sp/>strict<sp/>superset<sp/>of<sp/>:mini:`Set/2`,<sp/>otherwise<sp/>returns<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>set(&quot;bandana&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>set(&quot;ban&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>C<sp/>:=<sp/>set(&quot;bread&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>D<sp/>:=<sp/>set(&quot;bandana&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A<sp/>&gt;<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A<sp/>&gt;<sp/>C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A<sp/>&gt;<sp/>D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_SET_FOREACH(Args[1],<sp/>Node)<sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_set_search0(Args[0],<sp/>Node-&gt;Key))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_set_size(Args[0])<sp/>&gt;<sp/>ml_set_size(Args[1])<sp/>?<sp/>Args[1]<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="936"><highlight class="normal">}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&gt;=&quot;</highlight><highlight class="normal">,<sp/>MLSetT,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>:mini:`Set/2`<sp/>if<sp/>:mini:`Set/1`<sp/>is<sp/>a<sp/>superset<sp/>of<sp/>:mini:`Set/2`,<sp/>otherwise<sp/>returns<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>A<sp/>:=<sp/>set(&quot;bandana&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>B<sp/>:=<sp/>set(&quot;ban&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>C<sp/>:=<sp/>set(&quot;bread&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>D<sp/>:=<sp/>set(&quot;bandana&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A<sp/>&gt;=<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A<sp/>&gt;=<sp/>C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>A<sp/>&gt;=<sp/>D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_SET_FOREACH(Args[1],<sp/>Node)<sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_set_search0(Args[0],<sp/>Node-&gt;Key))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956" refid="structml__set__sort__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Compare;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[2];</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Head,<sp/>*Tail;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*P,<sp/>*Q;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/>Size;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>InSize,<sp/>NMerges;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PSize,<sp/>QSize;</highlight></codeline>
<codeline lineno="966"><highlight class="normal">}<sp/><ref refid="structml__set__sort__state__t" kindref="compound">ml_set_sort_state_t</ref>;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_set_sort_state_run(<ref refid="structml__set__sort__state__t" kindref="compound">ml_set_sort_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>resume;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;P<sp/>=<sp/>State-&gt;Head;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Tail<sp/>=<sp/>State-&gt;Head<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;NMerges<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(State-&gt;P)<sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;NMerges++;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Q<sp/>=<sp/>State-&gt;P;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;PSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>State-&gt;InSize;<sp/>I++)<sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;PSize++;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Q<sp/>=<sp/>State-&gt;Q-&gt;Next;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!State-&gt;Q)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;QSize<sp/>=<sp/>State-&gt;InSize;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(State-&gt;PSize<sp/>&gt;<sp/>0<sp/>||<sp/>(State-&gt;QSize<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>State-&gt;Q))<sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*E;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;PSize<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E<sp/>=<sp/>State-&gt;Q;<sp/>State-&gt;Q<sp/>=<sp/>State-&gt;Q-&gt;Next;<sp/>State-&gt;QSize--;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;QSize<sp/>==<sp/>0<sp/>||<sp/>!State-&gt;Q)<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E<sp/>=<sp/>State-&gt;P;<sp/>State-&gt;P<sp/>=<sp/>State-&gt;P-&gt;Next;<sp/>State-&gt;PSize--;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>State-&gt;P-&gt;Key;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[1]<sp/>=<sp/>State-&gt;Q-&gt;Key;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Compare,<sp/>State-&gt;Count,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resume:</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>State-&gt;P,<sp/>*Next;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Tail)<sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Tail-&gt;Next<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Head<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Prev<sp/>=<sp/>State-&gt;Tail;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>State-&gt;PSize;<sp/>--Size<sp/>&gt;<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next<sp/>=<sp/>Node-&gt;Next;<sp/>Next-&gt;Prev<sp/>=<sp/>Node;<sp/>Node<sp/>=<sp/>Next;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next<sp/>=<sp/>State-&gt;Q;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Next<sp/>=<sp/>Next;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next-&gt;Prev<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node<sp/>=<sp/>Next;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Node-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Next<sp/>=<sp/>Node-&gt;Next;<sp/>Next-&gt;Prev<sp/>=<sp/>Node;<sp/>Node<sp/>=<sp/>Next;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Tail<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>finished;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E<sp/>=<sp/>State-&gt;Q;<sp/>State-&gt;Q<sp/>=<sp/>State-&gt;Q-&gt;Next;<sp/>State-&gt;QSize--;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E<sp/>=<sp/>State-&gt;P;<sp/>State-&gt;P<sp/>=<sp/>State-&gt;P-&gt;Next;<sp/>State-&gt;PSize--;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Tail)<sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Tail-&gt;Next<sp/>=<sp/>E;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Head<sp/>=<sp/>E;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E-&gt;Prev<sp/>=<sp/>State-&gt;Tail;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Tail<sp/>=<sp/>E;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;P<sp/>=<sp/>State-&gt;Q;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Tail-&gt;Next<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;NMerges<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)State-&gt;Set;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>finished;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;InSize<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">finished:</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Set-&gt;Head<sp/>=<sp/>State-&gt;Head;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Set-&gt;Tail<sp/>=<sp/>State-&gt;Tail;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Set-&gt;Size<sp/>=<sp/>State-&gt;Size;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Result);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*LessMethod;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;sort&quot;</highlight><highlight class="normal">,<sp/>MLSetMutableT)<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="comment">//&gt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sorts<sp/>the<sp/>values<sp/>(changes<sp/>the<sp/>iteration<sp/>order)<sp/>of<sp/>:mini:`Set`<sp/>using<sp/>:mini:`Value/i<sp/>&lt;<sp/>Value/j`<sp/>and<sp/>returns<sp/>:mini:`Set`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>S<sp/>:=<sp/>set(&quot;cake&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S:sort</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_set_size(Args[0]))<sp/>ML_RETURN(Args[0]);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__sort__state__t" kindref="compound">ml_set_sort_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__set__sort__state__t" kindref="compound">ml_set_sort_state_t</ref>);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_set_sort_state_run;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Set<sp/>=<sp/>Set;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Compare<sp/>=<sp/>LessMethod;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Head<sp/>=<sp/>State-&gt;Set-&gt;Head;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Size<sp/>=<sp/>Set-&gt;Size;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;InSize<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Improve<sp/>ml_set_sort_state_run<sp/>so<sp/>that<sp/>List<sp/>is<sp/>still<sp/>valid<sp/>during<sp/>sort</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>Set-&gt;Head<sp/>=<sp/>Set-&gt;Tail<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>Set-&gt;Size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_set_sort_state_run(State,<sp/>NULL);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;sort&quot;</highlight><highlight class="normal">,<sp/>MLSetMutableT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="comment">//&lt;Cmp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="comment">//&gt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sorts<sp/>the<sp/>values<sp/>(changes<sp/>the<sp/>iteration<sp/>order)<sp/>of<sp/>:mini:`Set`<sp/>using<sp/>:mini:`Cmp(Value/i,<sp/>Value/j)`<sp/>and<sp/>returns<sp/>:mini:`Set`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>S<sp/>:=<sp/>set(&quot;cake&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S:sort(&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_set_size(Args[0]))<sp/>ML_RETURN(Args[0]);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__sort__state__t" kindref="compound">ml_set_sort_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__set__sort__state__t" kindref="compound">ml_set_sort_state_t</ref>);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_set_sort_state_run;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Set<sp/>=<sp/>Set;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Compare<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Head<sp/>=<sp/>State-&gt;Set-&gt;Head;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Size<sp/>=<sp/>Set-&gt;Size;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;InSize<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Improve<sp/>ml_set_sort_state_run<sp/>so<sp/>that<sp/>List<sp/>is<sp/>still<sp/>valid<sp/>during<sp/>sort</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>Set-&gt;Head<sp/>=<sp/>Set-&gt;Tail<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>Set-&gt;Size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_set_sort_state_run(State,<sp/>NULL);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;reverse&quot;</highlight><highlight class="normal">,<sp/>MLSetMutableT)<sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reverses<sp/>the<sp/>iteration<sp/>order<sp/>of<sp/>:mini:`Set`<sp/>in-place<sp/>and<sp/>returns<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>S<sp/>:=<sp/>set(&quot;cake&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S:reverse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Prev<sp/>=<sp/>Set-&gt;Head;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Prev)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Set;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>Set-&gt;Tail<sp/>=<sp/>Prev;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>Prev-&gt;Next;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>Prev-&gt;Next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Node)<sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Next<sp/>=<sp/>Node-&gt;Next;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Next<sp/>=<sp/>Prev;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prev-&gt;Prev<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prev<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node<sp/>=<sp/>Next;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>Prev-&gt;Prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>Set-&gt;Head<sp/>=<sp/>Prev;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Set;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;random&quot;</highlight><highlight class="normal">,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="comment">//&lt;List</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment">//&gt;any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>random<sp/>(assignable)<sp/>node<sp/>from<sp/>:mini:`Set`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>S<sp/>:=<sp/>set(&quot;cake&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S:random</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>S:random</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set<sp/>=<sp/>(<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Limit<sp/>=<sp/>Set-&gt;Size;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Limit<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Divisor<sp/>=<sp/>RAND_MAX<sp/>/<sp/>Limit;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Random;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>Random<sp/>=<sp/>random()<sp/>/<sp/>Divisor;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Random<sp/>&gt;=<sp/>Limit);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>Set-&gt;Head;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--Random<sp/>&gt;=<sp/>0)<sp/>Node<sp/>=<sp/>Node-&gt;Next;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139" refid="structml__set__visit__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Visitor,<sp/>*Dest;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[1];</highlight></codeline>
<codeline lineno="1144"><highlight class="normal">}<sp/><ref refid="structml__set__visit__t" kindref="compound">ml_set_visit_t</ref>;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_set_visit_run(<ref refid="structml__set__visit__t" kindref="compound">ml_set_visit_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>State-&gt;Node-&gt;Next;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Node<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Visitor,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;visit&quot;</highlight><highlight class="normal">,<sp/>MLVisitorT,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="comment">//&lt;Visitor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>set<sp/>contains<sp/>copies<sp/>of<sp/>the<sp/>elements<sp/>of<sp/>:mini:`Set`<sp/>created<sp/>using<sp/>:mini:`Copy`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*Visitor<sp/>=<sp/>(<ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>((<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[1])-&gt;Head;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__visit__t" kindref="compound">ml_set_visit_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__set__visit__t" kindref="compound">ml_set_visit_t</ref>);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_set_visit_run;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Visitor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Visitor;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Node<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Visitor,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_set_copy_run(<ref refid="structml__set__visit__t" kindref="compound">ml_set_visit_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_set_insert(State-&gt;Dest,<sp/>Value);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>State-&gt;Node-&gt;Next;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/>ML_RETURN(State-&gt;Dest);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Node<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Visitor,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;copy&quot;</highlight><highlight class="normal">,<sp/>MLVisitorT,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="comment">//&lt;Visitor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>set<sp/>contains<sp/>copies<sp/>of<sp/>the<sp/>elements<sp/>of<sp/>:mini:`Set`<sp/>created<sp/>using<sp/>:mini:`Copy`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*Visitor<sp/>=<sp/>(<ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Dest<sp/>=<sp/>ml_set();</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>inthash_insert(Visitor-&gt;Cache,<sp/>(uintptr_t)Args[1],<sp/>Dest);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>((<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[1])-&gt;Head;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/>ML_RETURN(Dest);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__visit__t" kindref="compound">ml_set_visit_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__set__visit__t" kindref="compound">ml_set_visit_t</ref>);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_set_copy_run;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Visitor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Visitor;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Dest<sp/>=<sp/>Dest;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Node<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Visitor,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_set_const_run(<ref refid="structml__set__visit__t" kindref="compound">ml_set_visit_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_set_insert(State-&gt;Dest,<sp/>Value);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>State-&gt;Node-&gt;Next;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/>{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Dest-&gt;Type-&gt;Type<sp/>==<sp/>MLTypeGenericT)<sp/>{</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*TArgs[2];</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_find_generic_parent(State-&gt;Dest-&gt;Type,<sp/>MLSetMutableT,<sp/>2,<sp/>TArgs);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TArgs[0]<sp/>=<sp/>MLSetT;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Dest-&gt;Type<sp/>=<sp/>ml_generic_type(2,<sp/>TArgs);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Dest-&gt;Type<sp/>=<sp/>MLSetT;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(State-&gt;Dest);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Node<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Visitor,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;const&quot;</highlight><highlight class="normal">,<sp/>MLVisitorT,<sp/>MLSetT)<sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight><highlight class="comment">//&lt;Visitor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="comment">//&gt;set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>set<sp/>contains<sp/>copies<sp/>of<sp/>the<sp/>elements<sp/>of<sp/>:mini:`Set`<sp/>created<sp/>using<sp/>:mini:`Visitor`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*Visitor<sp/>=<sp/>(<ref refid="structml__visitor__t" kindref="compound">ml_visitor_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Dest<sp/>=<sp/>ml_set();</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>inthash_insert(Visitor-&gt;Cache,<sp/>(uintptr_t)Args[1],<sp/>Dest);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__node__t" kindref="compound">ml_set_node_t</ref><sp/>*Node<sp/>=<sp/>((<ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*)Args[1])-&gt;Head;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Node)<sp/>ML_RETURN(Dest);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__set__visit__t" kindref="compound">ml_set_visit_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__set__visit__t" kindref="compound">ml_set_visit_t</ref>);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_set_const_run;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Visitor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Visitor;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Dest<sp/>=<sp/>Dest;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Node<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>Node-&gt;Key;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Visitor,<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_CBOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_cbor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_cbor_write,<sp/>MLSetT,<sp/><ref refid="structml__cbor__writer__t" kindref="compound">ml_cbor_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__set__t" kindref="compound">ml_set_t</ref><sp/>*Set)<sp/>{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_write_tag(Writer,<sp/>258);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_write_array(Writer,<sp/>Set-&gt;Size);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_SET_FOREACH(Set,<sp/>Iter)<sp/>ml_cbor_write(Writer,<sp/>Iter-&gt;Key);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_cbor_read_set(<ref refid="structml__cbor__reader__t" kindref="compound">ml_cbor_reader_t</ref><sp/>*Reader,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Value,<sp/>MLListT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TagError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Set<sp/>requires<sp/>list&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Set<sp/>=<sp/>ml_set();</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_SET_FOREACH(Value,<sp/>Iter)<sp/>ml_set_insert(Set,<sp/>Iter-&gt;Key);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Set;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_set_init()<sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_set_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLSetT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;order&quot;</highlight><highlight class="normal">,<sp/>MLSetOrderT);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLSetT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;mutable&quot;</highlight><highlight class="normal">,<sp/>MLSetMutableT);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>MLSetMutableT-&gt;Constructor<sp/>=<sp/>MLSetT-&gt;Constructor;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_rule(MLSetT,<sp/>MLSequenceT,<sp/>ML_TYPE_ARG(1),<sp/>ML_TYPE_ARG(1),<sp/>NULL);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_MUTABLES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_rule(MLSetMutableT,<sp/>MLSetT,<sp/>ML_TYPE_ARG(1),<sp/>NULL);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_CBOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_cbor_default_tag(ML_CBOR_TAG_FINITE_SET,<sp/>ml_cbor_read_set);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_set.c"/>
  </compounddef>
</doxygen>
