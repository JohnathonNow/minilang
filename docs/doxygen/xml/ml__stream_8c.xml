<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__stream_8c" kind="file" language="C++">
    <compoundname>ml_stream.c</compoundname>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="ml__stream_8h" local="yes">ml_stream.h</includes>
    <includes refid="ml__object_8h" local="yes">ml_object.h</includes>
    <includes local="yes">ml_stream_init.c</includes>
    <incdepgraph>
      <node id="17">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ml_object.h</label>
        <link refid="ml__object_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_stream.c</label>
        <link refid="ml__stream_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ml_stream.h</label>
        <link refid="ml__stream_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="5">
        <label>errno.h</label>
      </node>
      <node id="3">
        <label>gc/gc.h</label>
      </node>
      <node id="20">
        <label>limits.h</label>
      </node>
      <node id="19">
        <label>ml_config.h</label>
      </node>
      <node id="22">
        <label>ml_stream_init.c</label>
      </node>
      <node id="11">
        <label>setjmp.h</label>
      </node>
      <node id="15">
        <label>stdarg.h</label>
      </node>
      <node id="18">
        <label>stdint.h</label>
      </node>
      <node id="14">
        <label>stdio.h</label>
      </node>
      <node id="9">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
      <node id="4">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__read__state__t" prot="public">ml_read_state_t</innerclass>
    <innerclass refid="structml__readu__state__t" prot="public">ml_readu_state_t</innerclass>
    <innerclass refid="structml__write__state__t" prot="public">ml_write_state_t</innerclass>
    <innerclass refid="structml__stream__copy__state__t" prot="public">ml_stream_copy_state_t</innerclass>
    <innerclass refid="structml__stream__parser__t" prot="public">ml_stream_parser_t</innerclass>
    <innerclass refid="structml__buffered__reader__t" prot="public">ml_buffered_reader_t</innerclass>
    <innerclass refid="structml__buffered__writer__t" prot="public">ml_buffered_writer_t</innerclass>
    <innerclass refid="structml__buffered__stream__t" prot="public">ml_buffered_stream_t</innerclass>
    <innerclass refid="structml__fd__stream__t" prot="public">ml_fd_stream_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__stream_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;stream&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="9" column="10" bodyfile="src/ml_stream.c" bodystart="9" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__stream_8c_1a11c1ddcfe057cc3bce9e0ae1df0c0a4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_INTERFACE</definition>
        <argsstring>(MLStreamT,(), &quot;stream&quot;)</argsstring>
        <name>ML_INTERFACE</name>
        <param>
          <type>MLStreamT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;stream&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="11" column="1" declfile="src/ml_stream.c" declline="11" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a9f093dac3de1b1193be9ca070ae09deb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(ReadMethod, &quot;read&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>ReadMethod</type>
        </param>
        <param>
          <type>&quot;read&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="14" column="1" declfile="src/ml_stream.c" declline="14" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a2c18952fe97d873a15486feef28ccf97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(WriteMethod, &quot;write&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>WriteMethod</type>
        </param>
        <param>
          <type>&quot;write&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="15" column="1" declfile="src/ml_stream.c" declline="15" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1adf7f1f3e0b3b55885aca5d444d874b2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(FlushMethod, &quot;flush&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>FlushMethod</type>
        </param>
        <param>
          <type>&quot;flush&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="16" column="1" declfile="src/ml_stream.c" declline="16" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1adda120f37a1f4840d3fff4bb390ef003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(SeekMethod, &quot;seek&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>SeekMethod</type>
        </param>
        <param>
          <type>&quot;seek&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="17" column="1" declfile="src/ml_stream.c" declline="17" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a51380702910df1b2949313f6411e42f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(TellMethod, &quot;tell&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>TellMethod</type>
        </param>
        <param>
          <type>&quot;tell&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="18" column="1" declfile="src/ml_stream.c" declline="18" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1afb270312b6ddcbe2915eb25640bceb3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD_DECL</definition>
        <argsstring>(CloseMethod, &quot;close&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>CloseMethod</type>
        </param>
        <param>
          <type>&quot;close&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="19" column="1" declfile="src/ml_stream.c" declline="19" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a6a6d62bf0d039c36c0d7c9820f58b0f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_stream_read_method</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Value, void *Address, int Count)</argsstring>
        <name>ml_stream_read_method</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="21" column="6" bodyfile="src/ml_stream.c" bodystart="21" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a48fb874e1b08e92bed3348ee8208d486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_stream_read</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Value, void *Address, int Count)</argsstring>
        <name>ml_stream_read</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="32" column="6" bodyfile="src/ml_stream.c" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1ac2022366690473054f23d8ed1fa78fa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_stream_write_method</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Value, const void *Address, int Count)</argsstring>
        <name>ml_stream_write_method</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="37" column="6" bodyfile="src/ml_stream.c" bodystart="37" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a44ae58e09771a5373f7b6f8f088c7b41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_stream_write</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Value, const void *Address, int Count)</argsstring>
        <name>ml_stream_write</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="48" column="6" bodyfile="src/ml_stream.c" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a7021c4e0bfdb44c2ba065cd4570585b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_stream_flush_method</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Value)</argsstring>
        <name>ml_stream_flush_method</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="53" column="6" bodyfile="src/ml_stream.c" bodystart="53" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a4706857fc377632c07e75ebc4177b8b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_stream_flush</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Value)</argsstring>
        <name>ml_stream_flush</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="59" column="6" bodyfile="src/ml_stream.c" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1ab957dd36eafa07cb3870806200f9aa84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_ENUM2</definition>
        <argsstring>(MLStreamSeekT, &quot;stream::seek&quot;, &quot;Set&quot;, SEEK_SET, &quot;Cur&quot;, SEEK_CUR, &quot;End&quot;, SEEK_END)</argsstring>
        <name>ML_ENUM2</name>
        <param>
          <type>MLStreamSeekT</type>
        </param>
        <param>
          <type>&quot;stream::seek&quot;</type>
        </param>
        <param>
          <type>&quot;Set&quot;</type>
        </param>
        <param>
          <type>SEEK_SET</type>
        </param>
        <param>
          <type>&quot;Cur&quot;</type>
        </param>
        <param>
          <type>SEEK_CUR</type>
        </param>
        <param>
          <type>&quot;End&quot;</type>
        </param>
        <param>
          <type>SEEK_END</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="64" column="1" declfile="src/ml_stream.c" declline="64" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a5ca361adee8d0d18a7ba2c7ca7fb1075" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_stream_seek_method</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Value, int64_t Offset, int Mode)</argsstring>
        <name>ml_stream_seek_method</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>Offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="70" column="6" bodyfile="src/ml_stream.c" bodystart="70" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1aca9a79fbd6a4acd600e5fc38ff2438e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_stream_seek</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Value, int64_t Offset, int Mode)</argsstring>
        <name>ml_stream_seek</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>Offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="80" column="6" bodyfile="src/ml_stream.c" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a77e1213e399597dbb2e7be20dec93d71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_stream_tell_method</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Value)</argsstring>
        <name>ml_stream_tell_method</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="85" column="6" bodyfile="src/ml_stream.c" bodystart="85" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a10a8a67179bf9bb003bef279ee0f5041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_stream_tell</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Value)</argsstring>
        <name>ml_stream_tell</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="91" column="6" bodyfile="src/ml_stream.c" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1aee303ea4b10f3cf46aba4990811cf4a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_stream_close_method</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Value)</argsstring>
        <name>ml_stream_close_method</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="96" column="6" bodyfile="src/ml_stream.c" bodystart="96" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a23f92d51fef779d942953dc94d9a3506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_stream_close</definition>
        <argsstring>(ml_state_t *Caller, ml_value_t *Value)</argsstring>
        <name>ml_stream_close</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="102" column="6" bodyfile="src/ml_stream.c" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a80686bc6c7d1eac2822ecb3c26388752" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;read&quot;, MLStreamT, MLBufferT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;read&quot;</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <param>
          <type>MLBufferT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="107" column="1" bodyfile="src/ml_stream.c" bodystart="107" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a5819e50d9c1b612a7420798888bc8697" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_stream_read_run</definition>
        <argsstring>(ml_read_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_stream_read_run</name>
        <param>
          <type><ref refid="structml__read__state__t" kindref="compound">ml_read_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="126" column="13" bodyfile="src/ml_stream.c" bodystart="126" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a19116a3658b0ab448db57531fab4a8e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;read&quot;, MLStreamT, MLIntegerT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;read&quot;</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="142" column="1" bodyfile="src/ml_stream.c" bodystart="142" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a5b92e8c5cd9d8d9cc580eb397f913772" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_stream_readx_run</definition>
        <argsstring>(ml_readu_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_stream_readx_run</name>
        <param>
          <type><ref refid="structml__readu__state__t" kindref="compound">ml_readu_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="168" column="13" bodyfile="src/ml_stream.c" bodystart="168" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a53a3dd414211a091246b612046b7cec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;readx&quot;, MLStreamT, MLStringT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;readx&quot;</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="183" column="1" bodyfile="src/ml_stream.c" bodystart="183" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1ae10b233efd8c957c9de5e6ccf0431064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;readx&quot;, MLStreamT, MLStringT, MLIntegerT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;readx&quot;</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="206" column="1" bodyfile="src/ml_stream.c" bodystart="206" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1ac1000f6c870fa4000e7ce8d5d433090b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_stream_readi_run</definition>
        <argsstring>(ml_readu_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_stream_readi_run</name>
        <param>
          <type><ref refid="structml__readu__state__t" kindref="compound">ml_readu_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="230" column="13" bodyfile="src/ml_stream.c" bodystart="230" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1adb7c37017586dfd686303751adde522b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;readi&quot;, MLStreamT, MLStringT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;readi&quot;</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="245" column="1" bodyfile="src/ml_stream.c" bodystart="245" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a3f3901436ae35c1fb17d3ec6122ed426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;readi&quot;, MLStreamT, MLStringT, MLIntegerT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;readi&quot;</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="268" column="1" bodyfile="src/ml_stream.c" bodystart="268" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a9ac812d69246f35c63479a8b86288bd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;read&quot;, MLStreamT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;read&quot;</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="292" column="1" bodyfile="src/ml_stream.c" bodystart="292" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1aa276448173c4c7fb240479b1a2020884" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_stream_rest_run</definition>
        <argsstring>(ml_readu_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_stream_rest_run</name>
        <param>
          <type><ref refid="structml__readu__state__t" kindref="compound">ml_readu_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="309" column="13" bodyfile="src/ml_stream.c" bodystart="309" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1abfafe7040640abca4b2d0741e3b77064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;rest&quot;, MLStreamT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;rest&quot;</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="319" column="1" bodyfile="src/ml_stream.c" bodystart="319" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a90547c3d81d6510bc74ae9ed6180a5e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;write&quot;, MLStreamT, MLAddressT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;write&quot;</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="335" column="1" bodyfile="src/ml_stream.c" bodystart="335" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1ab07b6bb70cfb49fa42f309f8606fff2e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_stream_write_run</definition>
        <argsstring>(ml_write_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_stream_write_run</name>
        <param>
          <type><ref refid="structml__write__state__t" kindref="compound">ml_write_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="356" column="13" bodyfile="src/ml_stream.c" bodystart="356" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1aab8e54ad4cf11ed92e93b6c8e3bc2c2a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_stream_write_append_run</definition>
        <argsstring>(ml_write_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_stream_write_append_run</name>
        <param>
          <type><ref refid="structml__write__state__t" kindref="compound">ml_write_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="366" column="13" bodyfile="src/ml_stream.c" bodystart="366" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a67f096ada1786ff10b69cdf511df52d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODVX</definition>
        <argsstring>(&quot;write&quot;, MLStreamT, MLAnyT)</argsstring>
        <name>ML_METHODVX</name>
        <param>
          <type>&quot;write&quot;</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="376" column="1" bodyfile="src/ml_stream.c" bodystart="376" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1aa4473c7ca825223fca44be287cd5476d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_stream_copy_read_run</definition>
        <argsstring>(ml_stream_copy_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_stream_copy_read_run</name>
        <param>
          <type><ref refid="structml__stream__copy__state__t" kindref="compound">ml_stream_copy_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="422" column="13" bodyfile="src/ml_stream.c" bodystart="422" bodyend="430" declfile="src/ml_stream.c" declline="404" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a54afe2d88c19aff525de2af96b8051c4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_stream_copy_write_run</definition>
        <argsstring>(ml_stream_copy_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_stream_copy_write_run</name>
        <param>
          <type><ref refid="structml__stream__copy__state__t" kindref="compound">ml_stream_copy_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="406" column="13" bodyfile="src/ml_stream.c" bodystart="406" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a568d1ed87c9cfdc5fd8619ac2f630aff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;copy&quot;, MLStreamT, MLStreamT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;copy&quot;</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="432" column="1" bodyfile="src/ml_stream.c" bodystart="432" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a578f5bda5603b619ffa2545cabfb92f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;copy&quot;, MLStreamT, MLStreamT, MLIntegerT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;copy&quot;</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="449" column="1" bodyfile="src/ml_stream.c" bodystart="449" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a7bd86e9a91de278ae7353e09f36e799a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;flush&quot;, MLStreamT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;flush&quot;</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="468" column="1" bodyfile="src/ml_stream.c" bodystart="468" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a0d66cfc55e9864c39db9f623f7a44e27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;seek&quot;, MLStreamT, MLIntegerT, MLStreamSeekT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;seek&quot;</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLStreamSeekT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="477" column="1" bodyfile="src/ml_stream.c" bodystart="477" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a30735d65a8621428734f80b78b9e8492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;tell&quot;, MLStreamT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;tell&quot;</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="489" column="1" bodyfile="src/ml_stream.c" bodystart="489" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a9012e73f96c84cc24eb5cc34c4fc0ad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;close&quot;, MLStreamT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;close&quot;</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="499" column="1" bodyfile="src/ml_stream.c" bodystart="499" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1ad6df26b0b7c49d557b3d4cde27f27b4b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_stream_parser_call</definition>
        <argsstring>(ml_state_t *Caller, ml_stream_parser_t *Parser, int Count, ml_value_t **Args)</argsstring>
        <name>ml_stream_parser_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="521" column="13" bodyfile="src/ml_stream.c" bodystart="521" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a02063dc15a53b470511fd64ab15e7156" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_stream_parser_init</definition>
        <argsstring>(ml_stream_parser_t *Parser, ml_value_t *Value)</argsstring>
        <name>ml_stream_parser_init</name>
        <param>
          <type><ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="527" column="13" bodyfile="src/ml_stream.c" bodystart="527" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a9dde00b437467d9be99a57ac2dac56d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLStreamParserT,(MLFunctionT, MLSequenceT), &quot;stream::parser&quot;,.call=(void *) ml_stream_parser_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLStreamParserT</type>
        </param>
        <param>
          <type>(MLFunctionT, MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;stream::parser&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_stream_parser_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="540" column="1" declfile="src/ml_stream.c" declline="540" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1aa01e71a2260bfb8183a2c4d685ea5ecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;parse&quot;, MLStreamT, MLFunctionT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;parse&quot;</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="544" column="1" bodyfile="src/ml_stream.c" bodystart="544" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a52c08e0aa0eae1e2a755c03a89eea6e5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_stream_parser_read</definition>
        <argsstring>(ml_stream_parser_t *Parser, ml_value_t *Value)</argsstring>
        <name>ml_stream_parser_read</name>
        <param>
          <type><ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="590" column="13" bodyfile="src/ml_stream.c" bodystart="590" bodyend="604" declfile="src/ml_stream.c" declline="559" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1ae130da82f8983fd7a8543f38bfec614c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_stream_parser_flush</definition>
        <argsstring>(ml_stream_parser_t *Parser, ml_value_t *Value)</argsstring>
        <name>ml_stream_parser_flush</name>
        <param>
          <type><ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="561" column="13" bodyfile="src/ml_stream.c" bodystart="561" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1aeccd9ac14c119a999d11cedcfea75b16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_stream_parser_write</definition>
        <argsstring>(ml_stream_parser_t *Parser, ml_value_t *Value)</argsstring>
        <name>ml_stream_parser_write</name>
        <param>
          <type><ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="571" column="13" bodyfile="src/ml_stream.c" bodystart="571" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a01282a8bce675f3da562104938c738fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLStreamParserT, ml_state_t *Caller, ml_stream_parser_t *Parser)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLStreamParserT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="606" column="13" bodyfile="src/ml_stream.c" bodystart="606" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a211a06f97e6ba55034a376d58694eb86" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLStreamParserT, ml_state_t *Caller, ml_stream_parser_t *Parser)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLStreamParserT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="615" column="13" bodyfile="src/ml_stream.c" bodystart="615" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a66b97b02184c70f42c60a15377b5cecc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLStreamParserT, ml_state_t *Caller, ml_stream_parser_t *Parser)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLStreamParserT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="628" column="13" bodyfile="src/ml_stream.c" bodystart="628" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1afa273176990c652fafcabc3ef9485d02" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLStreamParserT, ml_state_t *Caller, ml_stream_parser_t *Parser)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLStreamParserT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="632" column="13" bodyfile="src/ml_stream.c" bodystart="632" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a94a4dc6ffc47c9d761aaa3c1866da1b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_buffered_reader_run0</definition>
        <argsstring>(ml_buffered_reader_t *Reader, ml_value_t *Result)</argsstring>
        <name>ml_buffered_reader_run0</name>
        <param>
          <type><ref refid="structml__buffered__reader__t" kindref="compound">ml_buffered_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="649" column="13" bodyfile="src/ml_stream.c" bodystart="649" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1aae46e0c510abd41b31adf856bb9e5d6e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_buffered_reader_run1</definition>
        <argsstring>(ml_buffered_reader_t *Reader, ml_value_t *Result)</argsstring>
        <name>ml_buffered_reader_run1</name>
        <param>
          <type><ref refid="structml__buffered__reader__t" kindref="compound">ml_buffered_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="658" column="13" bodyfile="src/ml_stream.c" bodystart="658" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a9ef9cc95f6a30bd0dc2bc59945d40a63" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_buffered_reader_read</definition>
        <argsstring>(ml_state_t *Caller, ml_buffered_reader_t *Reader, void *Address, int Count)</argsstring>
        <name>ml_buffered_reader_read</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__buffered__reader__t" kindref="compound">ml_buffered_reader_t</ref> *</type>
          <declname>Reader</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="678" column="13" bodyfile="src/ml_stream.c" bodystart="678" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a5cf4b5cccf924a64ae99ae7d4275fbd9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_buffered_writer_run</definition>
        <argsstring>(ml_buffered_writer_t *Writer, ml_value_t *Result)</argsstring>
        <name>ml_buffered_writer_run</name>
        <param>
          <type><ref refid="structml__buffered__writer__t" kindref="compound">ml_buffered_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="720" column="13" bodyfile="src/ml_stream.c" bodystart="720" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a067612e13c62c10752708a2ff7624a54" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_buffered_writer_write</definition>
        <argsstring>(ml_state_t *Caller, ml_buffered_writer_t *Writer, const void *Address, int Count)</argsstring>
        <name>ml_buffered_writer_write</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__buffered__writer__t" kindref="compound">ml_buffered_writer_t</ref> *</type>
          <declname>Writer</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="747" column="13" bodyfile="src/ml_stream.c" bodystart="747" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a8999f8a6f166961425e146def47ad541" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLStreamBufferedT,(MLStreamT), &quot;stream::buffered&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLStreamBufferedT</type>
        </param>
        <param>
          <type>(MLStreamT)</type>
        </param>
        <param>
          <type>&quot;stream::buffered&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="772" column="1" declfile="src/ml_stream.c" declline="772" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a8d07a3578ed5c618a43c8a089b74a407" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_stream_buffered</definition>
        <argsstring>(ml_value_t *Stream, size_t Size)</argsstring>
        <name>ml_stream_buffered</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Stream</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="775" column="12" bodyfile="src/ml_stream.c" bodystart="775" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1ad94095a8bc9fff053bd25ad33986bad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLStreamBufferedT, MLStreamT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLStreamBufferedT</type>
        </param>
        <param>
          <type>MLStreamT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="793" column="1" bodyfile="src/ml_stream.c" bodystart="793" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a73f95d100592ca4e7d9511411dd1a27b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_stream_read, MLStreamBufferedT, ml_state_t *Caller, ml_buffered_stream_t *Stream, void *Address, int Count)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_stream_read</type>
        </param>
        <param>
          <type>MLStreamBufferedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__buffered__stream__t" kindref="compound">ml_buffered_stream_t</ref> *</type>
          <declname>Stream</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="802" column="13" bodyfile="src/ml_stream.c" bodystart="802" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a3fdf76588b36f2e6cacb1ac5339bfe83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;read&quot;, MLStreamBufferedT, MLBufferT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;read&quot;</type>
        </param>
        <param>
          <type>MLStreamBufferedT</type>
        </param>
        <param>
          <type>MLBufferT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_stream.c" line="806" column="1" bodyfile="src/ml_stream.c" bodystart="806" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a770ce8299dfe3ac8d90e669fe241eca6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_stream_write, MLStreamBufferedT, ml_state_t *Caller, ml_buffered_stream_t *Stream, const void *Address, int Count)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_stream_write</type>
        </param>
        <param>
          <type>MLStreamBufferedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__buffered__stream__t" kindref="compound">ml_buffered_stream_t</ref> *</type>
          <declname>Stream</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="814" column="13" bodyfile="src/ml_stream.c" bodystart="814" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a77b91d350276f4e984ac96ce3713bdb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;write&quot;, MLStreamBufferedT, MLAddressT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;write&quot;</type>
        </param>
        <param>
          <type>MLStreamBufferedT</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_stream.c" line="818" column="1" bodyfile="src/ml_stream.c" bodystart="818" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a9904c1cd7c8db0e2d3d2cd9bc1ac6a4a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_stream_flush, MLStreamBufferedT, ml_state_t *Caller, ml_buffered_stream_t *Stream)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_stream_flush</type>
        </param>
        <param>
          <type>MLStreamBufferedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__buffered__stream__t" kindref="compound">ml_buffered_stream_t</ref> *</type>
          <declname>Stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="826" column="13" bodyfile="src/ml_stream.c" bodystart="826" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a1597503c9b68a95c2af02827285244c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;flush&quot;, MLStreamBufferedT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;flush&quot;</type>
        </param>
        <param>
          <type>MLStreamBufferedT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="836" column="1" bodyfile="src/ml_stream.c" bodystart="836" bodyend="847"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1aad154a13bafdff6e32be6040435e5ebf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_stream_read, MLStringBufferT, ml_state_t *Caller, ml_stringbuffer_t *Stream, void *Address, int Count)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_stream_read</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Stream</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="849" column="13" bodyfile="src/ml_stream.c" bodystart="849" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1ad56df9fb1e481061fed24521474cb6b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;read&quot;, MLStringBufferT, MLBufferT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;read&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLBufferT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_stream.c" line="868" column="1" bodyfile="src/ml_stream.c" bodystart="868" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1ae6f86eca43f4777bc8ea6a2a8ce830fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_stream_write, MLStringBufferT, ml_state_t *Caller, ml_stringbuffer_t *Buffer, void *Address, int Count)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_stream_write</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref> *</type>
          <declname>Buffer</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="891" column="13" bodyfile="src/ml_stream.c" bodystart="891" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1adbb046b8ee3a5193972e3cd75ce20ad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLStreamFdT,(MLStreamT), &quot;fd&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLStreamFdT</type>
        </param>
        <param>
          <type>(MLStreamT)</type>
        </param>
        <param>
          <type>&quot;fd&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="900" column="1" declfile="src/ml_stream.c" declline="900" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a4b3fc481f1d5e7248ef02a7a23498c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_fd_stream</definition>
        <argsstring>(ml_type_t *Type, int Fd)</argsstring>
        <name>ml_fd_stream</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="903" column="12" bodyfile="src/ml_stream.c" bodystart="903" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a135eacad7bb7412d0564354fdbe31c91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ml_fd_stream_fd</definition>
        <argsstring>(ml_value_t *Stream)</argsstring>
        <name>ml_fd_stream_fd</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="911" column="5" bodyfile="src/ml_stream.c" bodystart="911" bodyend="913"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a64bf8b3442bcf126c21363fdd8daed21" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_stream_read, MLStreamFdT, ml_state_t *Caller, ml_fd_stream_t *Stream, void *Address, int Count)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_stream_read</type>
        </param>
        <param>
          <type>MLStreamFdT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__fd__stream__t" kindref="compound">ml_fd_stream_t</ref> *</type>
          <declname>Stream</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="923" column="13" bodyfile="src/ml_stream.c" bodystart="923" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a6149af0dc4a6cfa95962e0f22d2e975b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;read&quot;, MLStreamFdT, MLBufferT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;read&quot;</type>
        </param>
        <param>
          <type>MLStreamFdT</type>
        </param>
        <param>
          <type>MLBufferT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="934" column="1" bodyfile="src/ml_stream.c" bodystart="934" bodyend="947"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1aa0ee28271f65d906d800518f3d81f737" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_stream_write, MLStreamFdT, ml_state_t *Caller, ml_fd_stream_t *Stream, void *Address, int Count)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_stream_write</type>
        </param>
        <param>
          <type>MLStreamFdT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__fd__stream__t" kindref="compound">ml_fd_stream_t</ref> *</type>
          <declname>Stream</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="949" column="13" bodyfile="src/ml_stream.c" bodystart="949" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1aeea6e547229b9e2cc0e4e41d8edc4fb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;write&quot;, MLStreamFdT, MLAddressT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;write&quot;</type>
        </param>
        <param>
          <type>MLStreamFdT</type>
        </param>
        <param>
          <type>MLAddressT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="960" column="1" bodyfile="src/ml_stream.c" bodystart="960" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="ml__stream_8c_1a4202d8e8a2dc2115e288d5cb2c1b9924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_stream_init</definition>
        <argsstring>(stringmap_t *Globals)</argsstring>
        <name>ml_stream_init</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_stream.c" line="975" column="6" bodyfile="src/ml_stream.c" bodystart="975" bodyend="984"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_stream.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;stream&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">ML_INTERFACE(MLStreamT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>type<sp/>of<sp/>readable<sp/>and<sp/>writable<sp/>byte<sp/>streams.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">ML_METHOD_DECL(ReadMethod,<sp/></highlight><highlight class="stringliteral">&quot;read&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15"><highlight class="normal">ML_METHOD_DECL(WriteMethod,<sp/></highlight><highlight class="stringliteral">&quot;write&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16"><highlight class="normal">ML_METHOD_DECL(FlushMethod,<sp/></highlight><highlight class="stringliteral">&quot;flush&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal">ML_METHOD_DECL(SeekMethod,<sp/></highlight><highlight class="stringliteral">&quot;seek&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="18"><highlight class="normal">ML_METHOD_DECL(TellMethod,<sp/></highlight><highlight class="stringliteral">&quot;tell&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal">ML_METHOD_DECL(CloseMethod,<sp/></highlight><highlight class="stringliteral">&quot;close&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_read_method(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Buffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref>);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Type<sp/>=<sp/>MLBufferT;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Value<sp/>=<sp/>Address;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Length<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args<sp/>=<sp/>ml_alloc_args(2);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Buffer;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>ReadMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_read(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_read)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Value),<sp/>ml_stream_read)<sp/>?:<sp/>ml_stream_read_method;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Caller,<sp/>Value,<sp/>Address,<sp/>Count);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_write_method(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Buffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Type<sp/>=<sp/>MLAddressT;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Value<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Address;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffer-&gt;Length<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args<sp/>=<sp/>ml_alloc_args(2);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Buffer;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>WriteMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_write(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_write)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Value),<sp/>ml_stream_write)<sp/>?:<sp/>ml_stream_write_method;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Caller,<sp/>Value,<sp/>Address,<sp/>Count);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_flush_method(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args<sp/>=<sp/>ml_alloc_args(1);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>FlushMethod,<sp/>1,<sp/>Args);</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_flush(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_flush)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Value),<sp/>ml_stream_flush)<sp/>?:<sp/>ml_stream_flush_method;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">ML_ENUM2(MLStreamSeekT,<sp/></highlight><highlight class="stringliteral">&quot;stream::seek&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Set&quot;</highlight><highlight class="normal">,<sp/>SEEK_SET,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cur&quot;</highlight><highlight class="normal">,<sp/>SEEK_CUR,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;End&quot;</highlight><highlight class="normal">,<sp/>SEEK_END</highlight></codeline>
<codeline lineno="68"><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_seek_method(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/>int64_t<sp/>Offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Mode)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args<sp/>=<sp/>ml_alloc_args(3);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>ml_integer(Offset);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*SeekMode<sp/>=<sp/>ml_enum_value(MLStreamSeekT,<sp/>Mode);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(SeekMode))<sp/>ML_RETURN(SeekMode);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[2]<sp/>=<sp/>SeekMode;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>SeekMethod,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_seek(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/>int64_t<sp/>Offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Mode)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_seek)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Value),<sp/>ml_stream_seek)<sp/>?:<sp/>ml_stream_seek_method;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Caller,<sp/>Value,<sp/>Offset,<sp/>Mode);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_tell_method(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args<sp/>=<sp/>ml_alloc_args(1);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>TellMethod,<sp/>1,<sp/>Args);</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_tell(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_tell)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Value),<sp/>ml_stream_tell)<sp/>?:<sp/>ml_stream_tell_method;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_close_method(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args<sp/>=<sp/>ml_alloc_args(1);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>CloseMethod,<sp/>1,<sp/>Args);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_close(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_close)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Value),<sp/>ml_stream_close)<sp/>?:<sp/>ml_stream_close_method;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;read&quot;</highlight><highlight class="normal">,<sp/>MLStreamT,<sp/>MLBufferT)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//&lt;Buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>bytes<sp/>from<sp/>:mini:`Stream`<sp/>into<sp/>:mini:`Buffer`<sp/>to<sp/>:mini:`Stream`.<sp/>This<sp/>method<sp/>should<sp/>be<sp/>overridden<sp/>for<sp/>streams<sp/>defined<sp/>in<sp/>Minilang.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_read)<sp/>*read<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Stream),<sp/>ml_stream_read);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!read)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;StreamError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>read<sp/>method<sp/>defined<sp/>for<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Args[0])-&gt;Name);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>read(Caller,<sp/>Stream,<sp/>ml_buffer_value(Args[1]),<sp/>ml_buffer_length(Args[1]));</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="structml__read__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_read)<sp/>*read;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String,<sp/>*End;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Remaining;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}<sp/><ref refid="structml__read__state__t" kindref="compound">ml_read_state_t</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_read_run(<ref refid="structml__read__state__t" kindref="compound">ml_read_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Length)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>=<sp/>State-&gt;End<sp/>-<sp/>State-&gt;String;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Length<sp/>?<sp/>ml_string(State-&gt;String,<sp/>Length)<sp/>:<sp/>MLNil);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;End<sp/>+=<sp/>Length;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Remaining<sp/>=<sp/>State-&gt;Remaining<sp/>-<sp/>Length;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Remaining)<sp/>ML_RETURN(ml_string(State-&gt;String,<sp/>State-&gt;End<sp/>-<sp/>State-&gt;String));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Remaining<sp/>=<sp/>Remaining;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream<sp/>=<sp/>State-&gt;Stream;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Stream,<sp/>State-&gt;End,<sp/>Remaining);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;read&quot;</highlight><highlight class="normal">,<sp/>MLStreamT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//&lt;Count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>next<sp/>text<sp/>from<sp/>:mini:`Stream`<sp/>upto<sp/>:mini:`Count`<sp/>characters.<sp/>Returns<sp/>:mini:`nil`<sp/>if<sp/>:mini:`Stream`<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__read__state__t" kindref="compound">ml_read_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__read__state__t" kindref="compound">ml_read_state_t</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stream_read_run;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Stream<sp/>=<sp/>Stream;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;read<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Stream),<sp/>ml_stream_read)<sp/>?:<sp/>ml_stream_read_method;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Remaining<sp/>=<sp/>State-&gt;Remaining<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;End<sp/>=<sp/>State-&gt;String<sp/>=<sp/>snew(Remaining<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Stream,<sp/>State-&gt;End,<sp/>Remaining);</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="structml__readu__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_read)<sp/>*read;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1];</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Remaining;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Chars[];</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}<sp/><ref refid="structml__readu__state__t" kindref="compound">ml_readu_state_t</ref>;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_readx_run(<ref refid="structml__readu__state__t" kindref="compound">ml_readu_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Length)<sp/>ML_RETURN(State-&gt;Buffer-&gt;Length<sp/>?<sp/>ml_stringbuffer_get_value(State-&gt;Buffer)<sp/>:<sp/>MLNil);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/>State-&gt;Chars[64];</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Chars[Char<sp/>/<sp/>8]<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>(Char<sp/>%<sp/>8)))<sp/>ML_RETURN(ml_stringbuffer_get_value(State-&gt;Buffer));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(State-&gt;Buffer,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;State-&gt;Chars[64],<sp/>1);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Remaining<sp/>=<sp/>State-&gt;Remaining<sp/>-<sp/>Length;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Remaining)<sp/>ML_RETURN(ml_stringbuffer_get_value(State-&gt;Buffer));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Remaining<sp/>=<sp/>Remaining;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream<sp/>=<sp/>State-&gt;Stream;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Stream,<sp/>&amp;State-&gt;Chars[64],<sp/>1);</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;readx&quot;</highlight><highlight class="normal">,<sp/>MLStreamT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//&lt;Delimiters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>next<sp/>text<sp/>from<sp/>:mini:`Stream`,<sp/>upto<sp/>but<sp/>excluding<sp/>any<sp/>character<sp/>in<sp/>:mini:`Delimiters`.<sp/>Returns<sp/>:mini:`nil`<sp/>if<sp/>:mini:`Stream`<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__readu__state__t" kindref="compound">ml_readu_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__readu__state__t" kindref="compound">ml_readu_state_t</ref>,<sp/>65,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stream_readx_run;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Stream<sp/>=<sp/>Stream;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;read<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Stream),<sp/>ml_stream_read)<sp/>?:<sp/>ml_stream_read_method;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Buffer[0]<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref>)ML_STRINGBUFFER_INIT;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Terms<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TermsLength<sp/>=<sp/>ml_string_length(Args[1]);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>TermsLength;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/>Terms[I];</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Chars[Char<sp/>/<sp/>8]<sp/>|=<sp/>1<sp/>&lt;&lt;<sp/>(Char<sp/>%<sp/>8);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Remaining<sp/>=<sp/>SIZE_MAX;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Stream,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;State-&gt;Chars[64],<sp/>1);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;readx&quot;</highlight><highlight class="normal">,<sp/>MLStreamT,<sp/>MLStringT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//&lt;Delimiters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//&lt;Count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>next<sp/>text<sp/>from<sp/>:mini:`Stream`,<sp/>upto<sp/>but<sp/>excluding<sp/>any<sp/>character<sp/>in<sp/>:mini:`Delimiters`<sp/>or<sp/>:mini:`Count`<sp/>characters,<sp/>whichever<sp/>comes<sp/>first.<sp/>Returns<sp/>:mini:`nil`<sp/>if<sp/>:mini:`Stream`<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__readu__state__t" kindref="compound">ml_readu_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__readu__state__t" kindref="compound">ml_readu_state_t</ref>,<sp/>65,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stream_readx_run;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Stream<sp/>=<sp/>Stream;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;read<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Stream),<sp/>ml_stream_read)<sp/>?:<sp/>ml_stream_read_method;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Buffer[0]<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref>)ML_STRINGBUFFER_INIT;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Terms<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TermsLength<sp/>=<sp/>ml_string_length(Args[1]);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>TermsLength;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/>Terms[I];</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Chars[Char<sp/>/<sp/>8]<sp/>|=<sp/>1<sp/>&lt;&lt;<sp/>(Char<sp/>%<sp/>8);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Remaining<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Stream,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;State-&gt;Chars[64],<sp/>1);</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_readi_run(<ref refid="structml__readu__state__t" kindref="compound">ml_readu_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Length)<sp/>ML_RETURN(State-&gt;Buffer-&gt;Length<sp/>?<sp/>ml_stringbuffer_get_value(State-&gt;Buffer)<sp/>:<sp/>MLNil);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(State-&gt;Buffer,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;State-&gt;Chars[64],<sp/>1);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/>State-&gt;Chars[64];</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Chars[Char<sp/>/<sp/>8]<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>(Char<sp/>%<sp/>8)))<sp/>ML_RETURN(ml_stringbuffer_get_value(State-&gt;Buffer));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Remaining<sp/>=<sp/>State-&gt;Remaining<sp/>-<sp/>Length;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Remaining)<sp/>ML_RETURN(ml_stringbuffer_get_value(State-&gt;Buffer));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Remaining<sp/>=<sp/>Remaining;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream<sp/>=<sp/>State-&gt;Stream;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Stream,<sp/>&amp;State-&gt;Chars[64],<sp/>1);</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;readi&quot;</highlight><highlight class="normal">,<sp/>MLStreamT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//&lt;Delimiters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>next<sp/>text<sp/>from<sp/>:mini:`Stream`,<sp/>upto<sp/>and<sp/>including<sp/>any<sp/>character<sp/>in<sp/>:mini:`Delimiters`.<sp/>Returns<sp/>:mini:`nil`<sp/>if<sp/>:mini:`Stream`<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__readu__state__t" kindref="compound">ml_readu_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__readu__state__t" kindref="compound">ml_readu_state_t</ref>,<sp/>65,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stream_readi_run;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Stream<sp/>=<sp/>Stream;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;read<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Stream),<sp/>ml_stream_read)<sp/>?:<sp/>ml_stream_read_method;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Buffer[0]<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref>)ML_STRINGBUFFER_INIT;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Terms<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TermsLength<sp/>=<sp/>ml_string_length(Args[1]);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>TermsLength;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/>Terms[I];</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Chars[Char<sp/>/<sp/>8]<sp/>|=<sp/>1<sp/>&lt;&lt;<sp/>(Char<sp/>%<sp/>8);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Remaining<sp/>=<sp/>SIZE_MAX;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Stream,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;State-&gt;Chars[64],<sp/>1);</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;readi&quot;</highlight><highlight class="normal">,<sp/>MLStreamT,<sp/>MLStringT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//&lt;Delimiters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//&lt;Count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>next<sp/>text<sp/>from<sp/>:mini:`Stream`,<sp/>upto<sp/>and<sp/>including<sp/>any<sp/>character<sp/>in<sp/>:mini:`Delimiters`<sp/>or<sp/>:mini:`Count`<sp/>characters,<sp/>whichever<sp/>comes<sp/>first.<sp/>Returns<sp/>:mini:`nil`<sp/>if<sp/>:mini:`Stream`<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__readu__state__t" kindref="compound">ml_readu_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__readu__state__t" kindref="compound">ml_readu_state_t</ref>,<sp/>65,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stream_readi_run;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Stream<sp/>=<sp/>Stream;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;read<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Stream),<sp/>ml_stream_read)<sp/>?:<sp/>ml_stream_read_method;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Buffer[0]<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref>)ML_STRINGBUFFER_INIT;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Terms<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TermsLength<sp/>=<sp/>ml_string_length(Args[1]);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>TermsLength;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/>Terms[I];</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Chars[Char<sp/>/<sp/>8]<sp/>|=<sp/>1<sp/>&lt;&lt;<sp/>(Char<sp/>%<sp/>8);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Remaining<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Stream,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;State-&gt;Chars[64],<sp/>1);</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;read&quot;</highlight><highlight class="normal">,<sp/>MLStreamT)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Equivalent<sp/>to<sp/>:mini:`Stream:readi(SIZE_MAX,<sp/>&apos;\n&apos;)`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__readu__state__t" kindref="compound">ml_readu_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__readu__state__t" kindref="compound">ml_readu_state_t</ref>,<sp/>65,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stream_readi_run;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Stream<sp/>=<sp/>Stream;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;read<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Stream),<sp/>ml_stream_read)<sp/>?:<sp/>ml_stream_read_method;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Buffer[0]<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref>)ML_STRINGBUFFER_INIT;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Remaining<sp/>=<sp/>SIZE_MAX;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Chars[</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>/<sp/>8]<sp/>|=<sp/>1<sp/>&lt;&lt;<sp/>(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>%<sp/>8);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Stream,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;State-&gt;Chars[64],<sp/>1);</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_rest_run(<ref refid="structml__readu__state__t" kindref="compound">ml_readu_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Length)<sp/>ML_RETURN(State-&gt;Buffer-&gt;Length<sp/>?<sp/>ml_stringbuffer_get_value(State-&gt;Buffer)<sp/>:<sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Space<sp/>=<sp/>ml_stringbuffer_writer(State-&gt;Buffer,<sp/>Length);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream<sp/>=<sp/>State-&gt;Stream;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Stream,<sp/>Space,<sp/>State-&gt;Buffer-&gt;Space);</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;rest&quot;</highlight><highlight class="normal">,<sp/>MLStreamT)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//&gt;string|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>remainder<sp/>of<sp/>:mini:`Stream`<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>:mini:`Stream`<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__readu__state__t" kindref="compound">ml_readu_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__readu__state__t" kindref="compound">ml_readu_state_t</ref>,<sp/>0,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stream_rest_run;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Stream<sp/>=<sp/>Stream;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;read<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Stream),<sp/>ml_stream_read)<sp/>?:<sp/>ml_stream_read_method;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Buffer[0]<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref>)ML_STRINGBUFFER_INIT;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Space<sp/>=<sp/>ml_stringbuffer_writer(State-&gt;Buffer,<sp/>0);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Stream,<sp/>Space,<sp/>State-&gt;Buffer-&gt;Space);</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;write&quot;</highlight><highlight class="normal">,<sp/>MLStreamT,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//&lt;Address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Writes<sp/>the<sp/>bytes<sp/>at<sp/>:mini:`Address`<sp/>to<sp/>:mini:`Stream`.<sp/>This<sp/>method<sp/>should<sp/>be<sp/>overridden<sp/>for<sp/>streams<sp/>defined<sp/>in<sp/>Minilang.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_write)<sp/>*write<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Stream),<sp/>ml_stream_write);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!write)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;StreamError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>write<sp/>method<sp/>defined<sp/>for<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Args[0])-&gt;Name);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write(Caller,<sp/>Stream,<sp/>ml_address_value(Args[1]),<sp/>ml_address_length(Args[1]));</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="structml__write__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_write)<sp/>*write;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1];</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/>Count;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}<sp/><ref refid="structml__write__state__t" kindref="compound">ml_write_state_t</ref>;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_write_run(<ref refid="structml__write__state__t" kindref="compound">ml_write_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>State-&gt;Buffer;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Length<sp/>+=<sp/>Length;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>Length<sp/>=<sp/>ml_stringbuffer_reader(Buffer,<sp/>Length);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Length)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_integer(State-&gt;Length));</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;write((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Stream,<sp/>Buffer-&gt;Head-&gt;Chars<sp/>+<sp/>Buffer-&gt;Start,<sp/>Length);</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_write_append_run(<ref refid="structml__write__state__t" kindref="compound">ml_write_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>State-&gt;Buffer;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++State-&gt;Index<sp/>&lt;<sp/>State-&gt;Count)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_append((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Buffer,<sp/>State-&gt;Args[State-&gt;Index]);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stream_write_run;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_stringbuffer_reader(Buffer,<sp/>0);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Length)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_integer(0));</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;write((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Stream,<sp/>Buffer-&gt;Head-&gt;Chars<sp/>+<sp/>Buffer-&gt;Start,<sp/>Length);</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">ML_METHODVX(</highlight><highlight class="stringliteral">&quot;write&quot;</highlight><highlight class="normal">,<sp/>MLStreamT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value/1,...,Value/n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Writes<sp/>each<sp/>:mini:`Value/i`<sp/>in<sp/>turn<sp/>to<sp/>:mini:`Stream`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__write__state__t" kindref="compound">ml_write_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__write__state__t" kindref="compound">ml_write_state_t</ref>,<sp/>Count<sp/>-<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stream_write_append_run;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Stream<sp/>=<sp/>Stream;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;write<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Stream),<sp/>ml_stream_write)<sp/>?:<sp/>ml_stream_write_method;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Buffer[0]<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref>)ML_STRINGBUFFER_INIT;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>Count<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>State-&gt;Args[I<sp/>-<sp/>1]<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_append((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Buffer,<sp/>State-&gt;Args[0]);</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="structml__stream__copy__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Source,<sp/>*Destination;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_read)<sp/>*read;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_write)<sp/>*write;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length,<sp/>Start,<sp/>Total,<sp/>Remaining;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Buffer[ML_STRINGBUFFER_NODE_SIZE];</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}<sp/><ref refid="structml__stream__copy__state__t" kindref="compound">ml_stream_copy_state_t</ref>;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_copy_read_run(<ref refid="structml__stream__copy__state__t" kindref="compound">ml_stream_copy_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_copy_write_run(<ref refid="structml__stream__copy__state__t" kindref="compound">ml_stream_copy_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Total<sp/>+=<sp/>Length;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Length<sp/>-=<sp/>Length;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Remaining<sp/>-=<sp/>Length;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!State-&gt;Length)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!State-&gt;Remaining)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_integer(State-&gt;Total));</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stream_copy_read_run;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Read<sp/>=<sp/>State-&gt;Remaining<sp/>&lt;<sp/>ML_STRINGBUFFER_NODE_SIZE<sp/>?<sp/>State-&gt;Remaining<sp/>:<sp/>ML_STRINGBUFFER_NODE_SIZE;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Source,<sp/>State-&gt;Buffer,<sp/>Read);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Start<sp/>+=<sp/>Length;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;write((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Destination,<sp/>State-&gt;Buffer<sp/>+<sp/>State-&gt;Start,<sp/>State-&gt;Length);</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_copy_read_run(<ref refid="structml__stream__copy__state__t" kindref="compound">ml_stream_copy_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Length)<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>ml_integer(State-&gt;Total));</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stream_copy_write_run;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Length<sp/>=<sp/>Length;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;write((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Destination,<sp/>State-&gt;Buffer,<sp/>Length);</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;copy&quot;</highlight><highlight class="normal">,<sp/>MLStreamT,<sp/>MLStreamT)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">//&lt;Source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//&lt;Destination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copies<sp/>the<sp/>remaining<sp/>bytes<sp/>from<sp/>:mini:`Source`<sp/>to<sp/>:mini:`Destination`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stream__copy__state__t" kindref="compound">ml_stream_copy_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__stream__copy__state__t" kindref="compound">ml_stream_copy_state_t</ref>);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Source<sp/>=<sp/>State-&gt;Source<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Destination<sp/>=<sp/>State-&gt;Destination<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;read<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Source),<sp/>ml_stream_read)<sp/>?:<sp/>ml_stream_read_method;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;write<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Destination),<sp/>ml_stream_write)<sp/>?:<sp/>ml_stream_write_method;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stream_copy_read_run;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Remaining<sp/>=<sp/>SIZE_MAX;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Source,<sp/>State-&gt;Buffer,<sp/>ML_STRINGBUFFER_NODE_SIZE);</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;copy&quot;</highlight><highlight class="normal">,<sp/>MLStreamT,<sp/>MLStreamT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment">//&lt;Source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">//&lt;Destination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//&lt;Count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copies<sp/>upto<sp/>:mini:`Count`<sp/>bytes<sp/>from<sp/>:mini:`Source`<sp/>to<sp/>:mini:`Destination`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stream__copy__state__t" kindref="compound">ml_stream_copy_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__stream__copy__state__t" kindref="compound">ml_stream_copy_state_t</ref>);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Source<sp/>=<sp/>State-&gt;Source<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Destination<sp/>=<sp/>State-&gt;Destination<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;read<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Source),<sp/>ml_stream_read)<sp/>?:<sp/>ml_stream_read_method;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;write<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Destination),<sp/>ml_stream_write)<sp/>?:<sp/>ml_stream_write_method;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stream_copy_read_run;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Remaining<sp/>=<sp/>ml_integer_value(Args[2]);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Read<sp/>=<sp/>State-&gt;Remaining<sp/>&lt;<sp/>ML_STRINGBUFFER_NODE_SIZE<sp/>?<sp/>State-&gt;Remaining<sp/>:<sp/>ML_STRINGBUFFER_NODE_SIZE;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Source,<sp/>State-&gt;Buffer,<sp/>Read);</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;flush&quot;</highlight><highlight class="normal">,<sp/>MLStreamT)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Flushes<sp/>:mini:`Stream`.<sp/>This<sp/>method<sp/>should<sp/>be<sp/>overridden<sp/>for<sp/>streams<sp/>defined<sp/>in<sp/>Minilang.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_flush)<sp/>*flush<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Stream),<sp/>ml_stream_flush);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!flush)<sp/>ML_RETURN(Stream);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flush(Caller,<sp/>Stream);</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;seek&quot;</highlight><highlight class="normal">,<sp/>MLStreamT,<sp/>MLIntegerT,<sp/>MLStreamSeekT)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="comment">//&lt;Offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">//&lt;Mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>position<sp/>for<sp/>the<sp/>next<sp/>read<sp/>or<sp/>write<sp/>in<sp/>:mini:`Stream`<sp/>to<sp/>:mini:`Offset`<sp/>using<sp/>:mini:`Mode`.<sp/>This<sp/>method<sp/>should<sp/>be<sp/>overridden<sp/>for<sp/>streams<sp/>defined<sp/>in<sp/>Minilang.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_seek)<sp/>*seek<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Stream),<sp/>ml_stream_seek);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!seek)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;StreamError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>seek<sp/>method<sp/>defined<sp/>for<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Args[0])-&gt;Name);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seek(Caller,<sp/>Stream,<sp/>ml_integer_value(Args[1]),<sp/>ml_enum_value_value(Args[2]));</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;tell&quot;</highlight><highlight class="normal">,<sp/>MLStreamT)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>position<sp/>for<sp/>the<sp/>next<sp/>read<sp/>or<sp/>write<sp/>in<sp/>:mini:`Stream`.<sp/>This<sp/>method<sp/>should<sp/>be<sp/>overridden<sp/>for<sp/>streams<sp/>defined<sp/>in<sp/>Minilang.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_tell)<sp/>*tell<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Stream),<sp/>ml_stream_tell);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tell)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;StreamError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>tell<sp/>method<sp/>defined<sp/>for<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Args[0])-&gt;Name);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tell(Caller,<sp/>Stream);</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;close&quot;</highlight><highlight class="normal">,<sp/>MLStreamT)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">//&gt;nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Closes<sp/>:mini:`Stream`.<sp/>This<sp/>method<sp/>should<sp/>be<sp/>overridden<sp/>for<sp/>streams<sp/>defined<sp/>in<sp/>Minilang.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_close)<sp/>*close<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Stream),<sp/>ml_stream_close);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!close)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;StreamError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>close<sp/>method<sp/>defined<sp/>for<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Args[0])-&gt;Name);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>close(Caller,<sp/>Stream);</highlight></codeline>
<codeline lineno="507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="structml__stream__parser__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream,<sp/>*Parser,<sp/>*Value;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_read)<sp/>*read;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_write)<sp/>*write;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_flush)<sp/>*flush;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Values;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Buffer;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>BufferSize,<sp/>Offset,<sp/>Available;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}<sp/><ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref>;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_parser_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref><sp/>*Parser,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(Parser-&gt;Values,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_parser_init(<ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref><sp/>*Parser,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Parser-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Value,<sp/>MLStreamT))<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>stream<sp/>not<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Value)-&gt;Name);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Parser<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;write<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Value),<sp/>ml_stream_write);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;flush<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Value),<sp/>ml_stream_flush);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Values<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Buffer<sp/>=<sp/>snew(Parser-&gt;BufferSize);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Parser);</highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal">ML_TYPE(MLStreamParserT,<sp/>(MLFunctionT,<sp/>MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;stream::parser&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_stream_parser_call</highlight></codeline>
<codeline lineno="542"><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;parse&quot;</highlight><highlight class="normal">,<sp/>MLStreamT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref><sp/>*Parser<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref>);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Base.Type<sp/>=<sp/>MLStreamParserT;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stream_parser_init;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Stream<sp/>=<sp/>Stream;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;read<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Stream),<sp/>ml_stream_read);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;BufferSize<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Constructor<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Parser;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Parser,<sp/>Constructor,<sp/>1,<sp/>Args);</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_parser_read(<ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref><sp/>*Parser,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_parser_flush(<ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref><sp/>*Parser,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Parser-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Caller);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_list_length(Parser-&gt;Values))<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Value<sp/>=<sp/>ml_list_pop(Parser-&gt;Values);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>++Parser-&gt;Index;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Parser);</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_parser_write(<ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref><sp/>*Parser,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Parser-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Caller);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Actual<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Actual<sp/>&lt;<sp/>Parser-&gt;Available)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Available<sp/>-=<sp/>Actual;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Offset<sp/>+=<sp/>Actual;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;write((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Parser,<sp/>Parser-&gt;Parser,<sp/>Parser-&gt;Buffer<sp/>+<sp/>Parser-&gt;Offset,<sp/>Parser-&gt;Available);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_list_length(Parser-&gt;Values))<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stream_parser_read;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Parser,<sp/>Parser-&gt;Stream,<sp/>Parser-&gt;Buffer,<sp/>Parser-&gt;BufferSize);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Value<sp/>=<sp/>ml_list_pop(Parser-&gt;Values);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>++Parser-&gt;Index;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Parser);</highlight></codeline>
<codeline lineno="588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_parser_read(<ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref><sp/>*Parser,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>ml_deref(Value);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Parser-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Caller);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Actual<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Actual)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Stream<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stream_parser_flush;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;flush((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Parser,<sp/>Parser-&gt;Parser);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Available<sp/>=<sp/>Actual;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stream_parser_write;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;write((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Parser,<sp/>Parser-&gt;Parser,<sp/>Parser-&gt;Buffer,<sp/>Actual);</highlight></codeline>
<codeline lineno="604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLStreamParserT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Parser-&gt;Stream)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stream_parser_read;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Parser,<sp/>Parser-&gt;Stream,<sp/>Parser-&gt;Buffer,<sp/>Parser-&gt;BufferSize);</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLStreamParserT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_list_length(Parser-&gt;Values))<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parser-&gt;Value<sp/>=<sp/>ml_list_pop(Parser-&gt;Values);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Parser-&gt;Index;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Parser);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Parser-&gt;Stream)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>Parser-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_stream_parser_read;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Parser,<sp/>Parser-&gt;Stream,<sp/>Parser-&gt;Buffer,<sp/>Parser-&gt;BufferSize);</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLStreamParserT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Parser-&gt;Index));</highlight></codeline>
<codeline lineno="630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLStreamParserT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__stream__parser__t" kindref="compound">ml_stream_parser_t</ref><sp/>*Parser)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Parser-&gt;Value);</highlight></codeline>
<codeline lineno="634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636" refid="structml__buffered__reader__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_read)<sp/>*read;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Next;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size,<sp/>Available;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Total,<sp/>Count;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>Request;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Chars[];</highlight></codeline>
<codeline lineno="647"><highlight class="normal">}<sp/><ref refid="structml__buffered__reader__t" kindref="compound">ml_buffered_reader_t</ref>;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_buffered_reader_run0(<ref refid="structml__buffered__reader__t" kindref="compound">ml_buffered_reader_t</ref><sp/>*Reader,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>ml_deref(Result);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Reader-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Base.Caller<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Actual<sp/>=<sp/>ml_integer_value(Result);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Reader-&gt;Request.Total<sp/>+<sp/>Actual));</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_buffered_reader_run1(<ref refid="structml__buffered__reader__t" kindref="compound">ml_buffered_reader_t</ref><sp/>*Reader,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>ml_deref(Result);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Reader-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Base.Caller<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Actual<sp/>=<sp/>ml_integer_value(Result);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address<sp/>=<sp/>Reader-&gt;Request.Address;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>Reader-&gt;Request.Count;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Actual<sp/>&gt;<sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Address,<sp/>Reader-&gt;Chars,<sp/>Count);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Available<sp/>=<sp/>Actual<sp/>-<sp/>Count;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Next<sp/>=<sp/>Reader-&gt;Chars<sp/>+<sp/>Count;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Reader-&gt;Request.Total<sp/>+<sp/>Count));</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Address,<sp/>Reader-&gt;Chars,<sp/>Actual);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Available<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Reader-&gt;Request.Total<sp/>+<sp/>Actual));</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_buffered_reader_read(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__buffered__reader__t" kindref="compound">ml_buffered_reader_t</ref><sp/>*Reader,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Reader-&gt;Base.Caller)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;StreamError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>read<sp/>from<sp/>stream<sp/>before<sp/>previous<sp/>read<sp/>complete&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Reader-&gt;Available<sp/>&gt;=<sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Address,<sp/>Reader-&gt;Next,<sp/>Count);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Available<sp/>-=<sp/>Count;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Next<sp/>+=<sp/>Count;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Count));</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Total<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Reader-&gt;Available)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Address,<sp/>Reader-&gt;Next,<sp/>Reader-&gt;Available);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Reader-&gt;Available;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Count<sp/>-=<sp/>Reader-&gt;Available;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Total<sp/>+=<sp/>Reader-&gt;Available;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Request.Total<sp/>=<sp/>Total;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&gt;=<sp/>Reader-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_buffered_reader_run0;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Reader-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Reader,<sp/>Reader-&gt;Stream,<sp/>Address,<sp/>Count);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_buffered_reader_run1;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Request.Address<sp/>=<sp/>Address;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader-&gt;Request.Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Reader-&gt;read((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Reader,<sp/>Reader-&gt;Stream,<sp/>Reader-&gt;Chars,<sp/>Reader-&gt;Size);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707" refid="structml__buffered__writer__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_stream_write)<sp/>*write;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Next;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size,<sp/>Fill,<sp/>Space;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Total,<sp/>Count;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>Request;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Chars[];</highlight></codeline>
<codeline lineno="718"><highlight class="normal">}<sp/><ref refid="structml__buffered__writer__t" kindref="compound">ml_buffered_writer_t</ref>;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_buffered_writer_run(<ref refid="structml__buffered__writer__t" kindref="compound">ml_buffered_writer_t</ref><sp/>*Writer,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>ml_deref(Result);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Writer-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Writer-&gt;Base.Caller<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Actual<sp/>=<sp/>ml_integer_value(Result);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Writer-&gt;Fill<sp/>-=<sp/>Actual)<sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Writer-&gt;write((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Writer,<sp/>Writer-&gt;Stream,<sp/>Writer-&gt;Next<sp/>-<sp/>Writer-&gt;Fill,<sp/>Writer-&gt;Fill);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Base.Caller<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address<sp/>=<sp/>Writer-&gt;Request.Address;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>Writer-&gt;Request.Count;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&gt;<sp/>Writer-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Writer-&gt;Next<sp/>=<sp/>Writer-&gt;Chars;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Writer-&gt;Fill<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Writer-&gt;Space<sp/>=<sp/>Writer-&gt;Size;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Writer-&gt;write((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Writer,<sp/>Writer-&gt;Stream,<sp/>Address,<sp/>Count);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(Writer-&gt;Chars,<sp/>Address,<sp/>Count);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Next<sp/>=<sp/>Writer-&gt;Chars<sp/>+<sp/>Count;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Fill<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Space<sp/>=<sp/>Writer-&gt;Size<sp/>-<sp/>Count;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Count));</highlight></codeline>
<codeline lineno="745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_buffered_writer_write(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__buffered__writer__t" kindref="compound">ml_buffered_writer_t</ref><sp/>*Writer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Writer-&gt;Base.Caller)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;StreamError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>write<sp/>from<sp/>stream<sp/>before<sp/>previous<sp/>write<sp/>complete&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&lt;=<sp/>Writer-&gt;Space)<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Writer-&gt;Next,<sp/>Address,<sp/>Count);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Writer-&gt;Next<sp/>+=<sp/>Count;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Writer-&gt;Fill<sp/>+=<sp/>Count;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Writer-&gt;Space<sp/>-=<sp/>Count;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Count));</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Writer-&gt;Fill)<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Writer-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Writer-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Writer-&gt;Request.Address<sp/>=<sp/>Address;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Writer-&gt;Request.Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Writer-&gt;write((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Writer,<sp/>Writer-&gt;Stream,<sp/>Writer-&gt;Next<sp/>-<sp/>Writer-&gt;Fill,<sp/>Writer-&gt;Fill);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Writer-&gt;write(Caller,<sp/>Writer-&gt;Stream,<sp/>Address,<sp/>Count);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766" refid="structml__buffered__stream__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__buffered__reader__t" kindref="compound">ml_buffered_reader_t</ref><sp/>*Reader;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__buffered__writer__t" kindref="compound">ml_buffered_writer_t</ref><sp/>*Writer;</highlight></codeline>
<codeline lineno="770"><highlight class="normal">}<sp/><ref refid="structml__buffered__stream__t" kindref="compound">ml_buffered_stream_t</ref>;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal">ML_TYPE(MLStreamBufferedT,<sp/>(MLStreamT),<sp/></highlight><highlight class="stringliteral">&quot;stream::buffered&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>stream<sp/>that<sp/>buffers<sp/>reads<sp/>and<sp/>writes<sp/>from<sp/>another<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_stream_buffered(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size)<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__buffered__stream__t" kindref="compound">ml_buffered_stream_t</ref><sp/>*Buffered<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__buffered__stream__t" kindref="compound">ml_buffered_stream_t</ref>);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffered-&gt;Type<sp/>=<sp/>MLStreamBufferedT;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__buffered__reader__t" kindref="compound">ml_buffered_reader_t</ref><sp/>*Reader<sp/>=<sp/>xnew(<ref refid="structml__buffered__reader__t" kindref="compound">ml_buffered_reader_t</ref>,<sp/>Size,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Stream<sp/>=<sp/>Stream;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;read<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Stream),<sp/>ml_stream_read)<sp/>?:<sp/>ml_stream_read_method;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>Reader-&gt;Size<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffered-&gt;Reader<sp/>=<sp/>Reader;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__buffered__writer__t" kindref="compound">ml_buffered_writer_t</ref><sp/>*Writer<sp/>=<sp/>xnew(<ref refid="structml__buffered__writer__t" kindref="compound">ml_buffered_writer_t</ref>,<sp/>Size,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_buffered_writer_run;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Stream<sp/>=<sp/>Stream;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;write<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Stream),<sp/>ml_stream_write)<sp/>?:<sp/>ml_stream_write_method;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Size<sp/>=<sp/>Writer-&gt;Space<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Next<sp/>=<sp/>Writer-&gt;Chars;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffered-&gt;Writer<sp/>=<sp/>Writer;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Buffered;</highlight></codeline>
<codeline lineno="791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal">ML_METHOD(MLStreamBufferedT,<sp/>MLStreamT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="comment">//@stream::buffered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="comment">//&lt;Size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="comment">//&gt;stream::buffered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>stream<sp/>that<sp/>buffers<sp/>reads<sp/>and<sp/>writes<sp/>from<sp/>:mini:`Stream`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stream_buffered(Args[0],<sp/>ml_integer_value(Args[1]));</highlight></codeline>
<codeline lineno="800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_stream_read,<sp/>MLStreamBufferedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__buffered__stream__t" kindref="compound">ml_buffered_stream_t</ref><sp/>*Stream,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_buffered_reader_read(Caller,<sp/>Stream-&gt;Reader,<sp/>Address,<sp/>Count);</highlight></codeline>
<codeline lineno="804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;read&quot;</highlight><highlight class="normal">,<sp/>MLStreamBufferedT,<sp/>MLBufferT)<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__buffered__stream__t" kindref="compound">ml_buffered_stream_t</ref><sp/>*Stream<sp/>=<sp/>(<ref refid="structml__buffered__stream__t" kindref="compound">ml_buffered_stream_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address<sp/>=<sp/>ml_buffer_value(Args[1]);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>Count<sp/>=<sp/>ml_buffer_length(Args[1]);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_buffered_reader_read(Caller,<sp/>Stream-&gt;Reader,<sp/>Address,<sp/>Count);</highlight></codeline>
<codeline lineno="812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_stream_write,<sp/>MLStreamBufferedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__buffered__stream__t" kindref="compound">ml_buffered_stream_t</ref><sp/>*Stream,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_buffered_writer_write(Caller,<sp/>Stream-&gt;Writer,<sp/>Address,<sp/>Count);</highlight></codeline>
<codeline lineno="816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;write&quot;</highlight><highlight class="normal">,<sp/>MLStreamBufferedT,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__buffered__stream__t" kindref="compound">ml_buffered_stream_t</ref><sp/>*Stream<sp/>=<sp/>(<ref refid="structml__buffered__stream__t" kindref="compound">ml_buffered_stream_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address<sp/>=<sp/>ml_address_value(Args[1]);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>Count<sp/>=<sp/>ml_address_length(Args[1]);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_buffered_writer_write(Caller,<sp/>Stream-&gt;Writer,<sp/>Address,<sp/>Count);</highlight></codeline>
<codeline lineno="824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_stream_flush,<sp/>MLStreamBufferedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__buffered__stream__t" kindref="compound">ml_buffered_stream_t</ref><sp/>*Stream)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__buffered__writer__t" kindref="compound">ml_buffered_writer_t</ref><sp/>*Writer<sp/>=<sp/>Stream-&gt;Writer;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Writer-&gt;Base.Caller)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;StreamError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>write<sp/>from<sp/>stream<sp/>before<sp/>previous<sp/>write<sp/>complete&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Request.Address<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Request.Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Writer-&gt;write((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Writer,<sp/>Writer-&gt;Stream,<sp/>Writer-&gt;Next<sp/>-<sp/>Writer-&gt;Fill,<sp/>Writer-&gt;Fill);</highlight></codeline>
<codeline lineno="834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;flush&quot;</highlight><highlight class="normal">,<sp/>MLStreamBufferedT)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Writes<sp/>any<sp/>bytes<sp/>in<sp/>the<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__buffered__stream__t" kindref="compound">ml_buffered_stream_t</ref><sp/>*Stream<sp/>=<sp/>(<ref refid="structml__buffered__stream__t" kindref="compound">ml_buffered_stream_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__buffered__writer__t" kindref="compound">ml_buffered_writer_t</ref><sp/>*Writer<sp/>=<sp/>Stream-&gt;Writer;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Writer-&gt;Base.Caller)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;StreamError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>write<sp/>from<sp/>stream<sp/>before<sp/>previous<sp/>write<sp/>complete&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Request.Address<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>Writer-&gt;Request.Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Writer-&gt;write((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Writer,<sp/>Writer-&gt;Stream,<sp/>Writer-&gt;Next<sp/>-<sp/>Writer-&gt;Fill,<sp/>Writer-&gt;Fill);</highlight></codeline>
<codeline lineno="847"><highlight class="normal">}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_stream_read,<sp/>MLStringBufferT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Stream,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Total<sp/>=<sp/>0,<sp/>Length<sp/>=<sp/>ml_stringbuffer_reader(Stream,<sp/>0);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Count)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Length)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;=<sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Address,<sp/>Stream-&gt;Head-&gt;Chars<sp/>+<sp/>Stream-&gt;Start,<sp/>Count);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_reader(Stream,<sp/>Count);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Total<sp/>+=<sp/>Count;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Address,<sp/>Stream-&gt;Head-&gt;Chars<sp/>+<sp/>Stream-&gt;Start,<sp/>Length);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Total<sp/>+=<sp/>Length;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Count<sp/>-=<sp/>Length;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Length;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>=<sp/>ml_stringbuffer_reader(Stream,<sp/>Length);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Total));</highlight></codeline>
<codeline lineno="866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;read&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLBufferT)<sp/>{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Stream<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address<sp/>=<sp/>ml_buffer_value(Args[1]);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>Count<sp/>=<sp/>ml_buffer_length(Args[1]);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length<sp/>=<sp/>0,<sp/>Total<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Count)<sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Length<sp/>=<sp/>ml_stringbuffer_reader(Stream,<sp/>Length);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Length)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Length<sp/>&gt;<sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Address,<sp/>Stream-&gt;Head-&gt;Chars<sp/>+<sp/>Stream-&gt;Start,<sp/>Count);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_reader(Stream,<sp/>Count);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Total<sp/>+=<sp/>Count;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Address,<sp/>Stream-&gt;Head-&gt;Chars<sp/>+<sp/>Stream-&gt;Start,<sp/>Length);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Total<sp/>+=<sp/>Length;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Count<sp/>-=<sp/>Length;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Address<sp/>+=<sp/>Length;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Total);</highlight></codeline>
<codeline lineno="889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_stream_write,<sp/>MLStringBufferT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(ml_stringbuffer_write(Buffer,<sp/>Address,<sp/>Count)));</highlight></codeline>
<codeline lineno="893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895" refid="structml__fd__stream__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Fd;</highlight></codeline>
<codeline lineno="898"><highlight class="normal">}<sp/><ref refid="structml__fd__stream__t" kindref="compound">ml_fd_stream_t</ref>;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal">ML_TYPE(MLStreamFdT,<sp/>(MLStreamT),<sp/></highlight><highlight class="stringliteral">&quot;fd&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>file-descriptor<sp/>based<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_fd_stream(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Fd)<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is_subtype(Type,<sp/>MLStreamFdT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Type<sp/>must<sp/>be<sp/>a<sp/>subtype<sp/>of<sp/>stream::fd&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__fd__stream__t" kindref="compound">ml_fd_stream_t</ref><sp/>*Stream<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__fd__stream__t" kindref="compound">ml_fd_stream_t</ref>);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>Stream-&gt;Type<sp/>=<sp/>Type;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>Stream-&gt;Fd<sp/>=<sp/>Fd;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Stream;</highlight></codeline>
<codeline lineno="909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_fd_stream_fd(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Stream)<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__fd__stream__t" kindref="compound">ml_fd_stream_t</ref><sp/>*)Stream)-&gt;Fd;</highlight></codeline>
<codeline lineno="913"><highlight class="normal">}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_thread.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_is_threadsafe,<sp/>MLStreamFdT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_stream_read,<sp/>MLStreamFdT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__fd__stream__t" kindref="compound">ml_fd_stream_t</ref><sp/>*Stream,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>Actual<sp/>=<sp/>read(Stream-&gt;Fd,<sp/>Address,<sp/>Count);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Actual<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ReadError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>ml_integer(Actual);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(Caller,<sp/>Result);</highlight></codeline>
<codeline lineno="932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;read&quot;</highlight><highlight class="normal">,<sp/>MLStreamFdT,<sp/>MLBufferT)<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="comment">//&lt;Dest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reads<sp/>from<sp/>:mini:`Stream`<sp/>into<sp/>:mini:`Dest`<sp/>returning<sp/>the<sp/>actual<sp/>number<sp/>of<sp/>bytes<sp/>read.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__fd__stream__t" kindref="compound">ml_fd_stream_t</ref><sp/>*Stream<sp/>=<sp/>(<ref refid="structml__fd__stream__t" kindref="compound">ml_fd_stream_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>Actual<sp/>=<sp/>read(Stream-&gt;Fd,<sp/>Buffer-&gt;Value,<sp/>Buffer-&gt;Length);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Actual<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ReadError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Actual);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal">}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_stream_write,<sp/>MLStreamFdT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__fd__stream__t" kindref="compound">ml_fd_stream_t</ref><sp/>*Stream,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Address,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count)<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>Actual<sp/>=<sp/>write(Stream-&gt;Fd,<sp/>Address,<sp/>Count);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Actual<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>ml_error(</highlight><highlight class="stringliteral">&quot;WriteError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>ml_integer(Actual);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;write&quot;</highlight><highlight class="normal">,<sp/>MLStreamFdT,<sp/>MLAddressT)<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="comment">//&lt;Stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="comment">//&lt;Source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Writes<sp/>from<sp/>:mini:`Source`<sp/>to<sp/>:mini:`Stream`<sp/>returning<sp/>the<sp/>actual<sp/>number<sp/>of<sp/>bytes<sp/>written.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__fd__stream__t" kindref="compound">ml_fd_stream_t</ref><sp/>*Stream<sp/>=<sp/>(<ref refid="structml__fd__stream__t" kindref="compound">ml_fd_stream_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__address__t" kindref="compound">ml_address_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>Actual<sp/>=<sp/>write(Stream-&gt;Fd,<sp/>Buffer-&gt;Value,<sp/>Buffer-&gt;Length);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Actual<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;WriteError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>strerror(errno));</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Actual);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal">}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_stream_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals)<sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_stream_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_parent(MLStringBufferT,<sp/>MLStreamT);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLStreamT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;seek&quot;</highlight><highlight class="normal">,<sp/>MLStreamSeekT);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLStreamT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;fd&quot;</highlight><highlight class="normal">,<sp/>MLStreamFdT);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLStreamT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;buffered&quot;</highlight><highlight class="normal">,<sp/>MLStreamBufferedT);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Globals)<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;stream&quot;</highlight><highlight class="normal">,<sp/>MLStreamT);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_stream.c"/>
  </compounddef>
</doxygen>
