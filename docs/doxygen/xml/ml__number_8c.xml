<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__number_8c" kind="file" language="C++">
    <compoundname>ml_number.c</compoundname>
    <includes refid="ml__number_8h" local="yes">ml_number.h</includes>
    <includes refid="minilang_8h" local="yes">minilang.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">float.h</includes>
    <includes local="no">limits.h</includes>
    <includes local="no">inttypes.h</includes>
    <includes local="yes">ml_number_init.c</includes>
    <incdepgraph>
      <node id="14">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_number.c</label>
        <link refid="ml__number_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ml_number.h</label>
        <link refid="ml__number_8h_source"/>
      </node>
      <node id="8">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="21">
        <label>float.h</label>
      </node>
      <node id="19">
        <label>gc/gc.h</label>
      </node>
      <node id="22">
        <label>inttypes.h</label>
      </node>
      <node id="17">
        <label>limits.h</label>
      </node>
      <node id="20">
        <label>math.h</label>
      </node>
      <node id="16">
        <label>ml_config.h</label>
      </node>
      <node id="23">
        <label>ml_number_init.c</label>
      </node>
      <node id="7">
        <label>setjmp.h</label>
      </node>
      <node id="12">
        <label>stdarg.h</label>
      </node>
      <node id="15">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__infix__state__t" prot="public">ml_infix_state_t</innerclass>
    <innerclass refid="structml__constant__iter__t" prot="public">ml_constant_iter_t</innerclass>
    <innerclass refid="structml__integer__iter__t" prot="public">ml_integer_iter_t</innerclass>
    <innerclass refid="structml__real__iter__t" prot="public">ml_real_iter_t</innerclass>
    <innerclass refid="structml__integer__case__t" prot="public">ml_integer_case_t</innerclass>
    <innerclass refid="structml__integer__switch__t" prot="public">ml_integer_switch_t</innerclass>
    <innerclass refid="structml__real__case__t" prot="public">ml_real_case_t</innerclass>
    <innerclass refid="structml__real__switch__t" prot="public">ml_real_switch_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__number_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;number&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="15" column="10" bodyfile="src/ml_number.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ml__number_8c_1a4c9b744b7bebe0997c9f93bf6abb845e" prot="public" static="no">
        <name>ml_arith_method_integer</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ML_METHOD(#NAME, MLIntegerT) { \
/*&lt;A
//&gt;integer
// Returns :mini:`NAMEA`.
*/\
	int64_t IntegerA = ml_integer_value_fast(Args[0]); \
	return ml_integer(SYMBOL(IntegerA)); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="445" column="9" bodyfile="src/ml_number.c" bodystart="442" bodyend="447"/>
      </memberdef>
      <memberdef kind="define" id="ml__number_8c_1a207e5c70a33c11f649bb329fa8932f2c" prot="public" static="no">
        <name>ml_arith_method_integer_integer</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ML_METHOD(#NAME, MLIntegerT, MLIntegerT) { \
/*&lt;A
//&lt;B
//&gt;integer
// Returns :mini:`A NAME B`.
*/\
	int64_t IntegerA = ml_integer_value_fast(Args[0]); \
	int64_t IntegerB = ml_integer_value_fast(Args[1]); \
	return ml_integer(IntegerA SYMBOL IntegerB); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="456" column="9" bodyfile="src/ml_number.c" bodystart="449" bodyend="455"/>
      </memberdef>
      <memberdef kind="define" id="ml__number_8c_1adda4c47c104f30e0ee8e8ade5c89e49c" prot="public" static="no">
        <name>ml_arith_method_integer_integer_bitwise</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <param><defname>OP</defname></param>
        <initializer>ML_METHOD(#NAME, MLIntegerT, MLIntegerT) { \
/*&lt;A
//&lt;B
//&gt;integer
// Returns the bitwise OP of :mini:`A` and :mini:`B`.
*/\
	int64_t IntegerA = ml_integer_value_fast(Args[0]); \
	int64_t IntegerB = ml_integer_value_fast(Args[1]); \
	return ml_integer(IntegerA SYMBOL IntegerB); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="468" column="9" bodyfile="src/ml_number.c" bodystart="457" bodyend="463"/>
      </memberdef>
      <memberdef kind="define" id="ml__number_8c_1a862e84f46d53935f4f3bab873c80e6b0" prot="public" static="no">
        <name>ml_arith_method_real</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ML_METHOD(#NAME, MLDoubleT) { \
/*&lt;A
//&gt;real
// Returns :mini:`NAMEA`.
*/\
	double RealA = ml_double_value_fast(Args[0]); \
	return ml_real(SYMBOL(RealA)); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="479" column="9" bodyfile="src/ml_number.c" bodystart="465" bodyend="470"/>
      </memberdef>
      <memberdef kind="define" id="ml__number_8c_1af6cae9bdfeb5f3e8df02974a2e2d5076" prot="public" static="no">
        <name>ml_arith_method_real_real</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ML_METHOD(#NAME, MLDoubleT, MLDoubleT) { \
/*&lt;A
//&lt;B
//&gt;real
// Returns :mini:`A NAME B`.
*/\
	double RealA = ml_double_value_fast(Args[0]); \
	double RealB = ml_double_value_fast(Args[1]); \
	return ml_real(RealA SYMBOL RealB); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="490" column="9" bodyfile="src/ml_number.c" bodystart="472" bodyend="478"/>
      </memberdef>
      <memberdef kind="define" id="ml__number_8c_1a01a7c65da7983b6f0c767e0630a1a3d0" prot="public" static="no">
        <name>ml_arith_method_real_integer</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ML_METHOD(#NAME, MLDoubleT, MLIntegerT) { \
/*&lt;A
//&lt;B
//&gt;real
// Returns :mini:`A NAME B`.
*/\
	double RealA = ml_double_value_fast(Args[0]); \
	int64_t IntegerB = ml_integer_value_fast(Args[1]); \
	return ml_real(RealA SYMBOL IntegerB); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="502" column="9" bodyfile="src/ml_number.c" bodystart="480" bodyend="486"/>
      </memberdef>
      <memberdef kind="define" id="ml__number_8c_1a280c8a406396935cda6007dade5d879e" prot="public" static="no">
        <name>ml_arith_method_integer_real</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ML_METHOD(#NAME, MLIntegerT, MLDoubleT) { \
/*&lt;A
//&lt;B
//&gt;real
// Returns :mini:`A NAME B`.
*/\
	int64_t IntegerA = ml_integer_value_fast(Args[0]); \
	double RealB = ml_double_value_fast(Args[1]); \
	return ml_real(IntegerA SYMBOL RealB); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="514" column="9" bodyfile="src/ml_number.c" bodystart="488" bodyend="494"/>
      </memberdef>
      <memberdef kind="define" id="ml__number_8c_1a1ff7cf44d8b8f1e162d1009cf87a3037" prot="public" static="no">
        <name>ml_arith_method_number</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ml_arith_method_integer(NAME, SYMBOL) \
ml_arith_method_real(NAME, SYMBOL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="542" column="9" bodyfile="src/ml_number.c" bodystart="516" bodyend="518"/>
      </memberdef>
      <memberdef kind="define" id="ml__number_8c_1ac38ce2003af3f588e5843b092c6810dd" prot="public" static="no">
        <name>ml_arith_method_number_number</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ml_arith_method_integer_integer(NAME, SYMBOL) \
ml_arith_method_real_real(NAME, SYMBOL) \
ml_arith_method_real_integer(NAME, SYMBOL) \
ml_arith_method_integer_real(NAME, SYMBOL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="546" column="9" bodyfile="src/ml_number.c" bodystart="520" bodyend="524"/>
      </memberdef>
      <memberdef kind="define" id="ml__number_8c_1adc1a65437fd6f8ac9e330b550bfda5ee" prot="public" static="no">
        <name>ml_comp_method_integer_integer</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ML_METHOD(#NAME, MLIntegerT, MLIntegerT) { \
/*&lt;A
//&lt;B
//&gt;integer
// Returns :mini:`B` if :mini:`A NAME B`, otherwise returns :mini:`nil`.
*/\
	int64_t IntegerA = ml_integer_value_fast(Args[0]); \
	int64_t IntegerB = ml_integer_value_fast(Args[1]); \
	return IntegerA SYMBOL IntegerB ? Args[1] : MLNil; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="800" column="9" bodyfile="src/ml_number.c" bodystart="770" bodyend="776"/>
      </memberdef>
      <memberdef kind="define" id="ml__number_8c_1a9cbf9a026c8fcfdf80129ecfb09cf0b7" prot="public" static="no">
        <name>ml_comp_method_real_real</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ML_METHOD(#NAME, MLDoubleT, MLDoubleT) { \
/*&lt;A
//&lt;B
//&gt;real
// Returns :mini:`B` if :mini:`A NAME B`, otherwise returns :mini:`nil`.
*/\
	double RealA = ml_double_value_fast(Args[0]); \
	double RealB = ml_double_value_fast(Args[1]); \
	return RealA SYMBOL RealB ? Args[1] : MLNil; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="812" column="9" bodyfile="src/ml_number.c" bodystart="778" bodyend="784"/>
      </memberdef>
      <memberdef kind="define" id="ml__number_8c_1aebc55b6be99c6dcea852feb9d97f04a0" prot="public" static="no">
        <name>ml_comp_method_real_integer</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ML_METHOD(#NAME, MLDoubleT, MLIntegerT) { \
/*&lt;A
//&lt;B
//&gt;real
// Returns :mini:`B` if :mini:`A NAME B`, otherwise returns :mini:`nil`.
*/\
	double RealA = ml_double_value_fast(Args[0]); \
	int64_t IntegerB = ml_integer_value_fast(Args[1]); \
	return RealA SYMBOL IntegerB ? Args[1] : MLNil; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="824" column="9" bodyfile="src/ml_number.c" bodystart="786" bodyend="792"/>
      </memberdef>
      <memberdef kind="define" id="ml__number_8c_1adf473df7a8f1b7c2c8b8eec3a17175e5" prot="public" static="no">
        <name>ml_comp_method_integer_real</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ML_METHOD(#NAME, MLIntegerT, MLDoubleT) { \
/*&lt;A
//&lt;B
//&gt;real
// Returns :mini:`B` if :mini:`A NAME B`, otherwise returns :mini:`nil`.
*/\
	int64_t IntegerA = ml_integer_value_fast(Args[0]); \
	double RealB = ml_double_value_fast(Args[1]); \
	return IntegerA SYMBOL RealB ? Args[1] : MLNil; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="836" column="9" bodyfile="src/ml_number.c" bodystart="794" bodyend="800"/>
      </memberdef>
      <memberdef kind="define" id="ml__number_8c_1a527bf0c379dd0a19c31ed6838192a2b0" prot="public" static="no">
        <name>ml_comp_method_number_number</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ml_comp_method_integer_integer(NAME, SYMBOL) \
ml_comp_method_real_real(NAME, SYMBOL) \
ml_comp_method_real_integer(NAME, SYMBOL) \
ml_comp_method_integer_real(NAME, SYMBOL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="844" column="9" bodyfile="src/ml_number.c" bodystart="802" bodyend="806"/>
      </memberdef>
      <memberdef kind="define" id="ml__number_8c_1a399480d1ccef8ca14e04b596a579a4cc" prot="public" static="no">
        <name>ml_select_method_integer_integer</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ML_METHOD(#NAME, MLIntegerT, MLIntegerT) { \
/*&lt;A
//&lt;B
//&gt;integer
// Returns :mini:`NAME(A, B)`.
*/\
	int64_t IntegerA = ml_integer_value_fast(Args[0]); \
	int64_t IntegerB = ml_integer_value_fast(Args[1]); \
	return IntegerA SYMBOL IntegerB ? Args[0] : Args[1]; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="861" column="9"/>
      </memberdef>
      <memberdef kind="define" id="ml__number_8c_1ade9aaa08ef8061f226610928db777cf5" prot="public" static="no">
        <name>ml_select_method_real_real</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ML_METHOD(#NAME, MLDoubleT, MLDoubleT) { \
/*&lt;A
//&lt;B
//&gt;real
// Returns :mini:`NAME(A, B)`.
*/\
	double RealA = ml_double_value_fast(Args[0]); \
	double RealB = ml_double_value_fast(Args[1]); \
	return RealA SYMBOL RealB ? Args[0] : Args[1]; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="873" column="9"/>
      </memberdef>
      <memberdef kind="define" id="ml__number_8c_1ad1acb4a3545d3d043a66c2dd568031e3" prot="public" static="no">
        <name>ml_select_method_real_integer</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ML_METHOD(#NAME, MLDoubleT, MLIntegerT) { \
/*&lt;A
//&lt;B
//&gt;real
// Returns :mini:`NAME(A, B)`.
*/\
	double RealA = ml_double_value_fast(Args[0]); \
	int64_t IntegerB = ml_integer_value_fast(Args[1]); \
	return RealA SYMBOL IntegerB ? Args[0] : Args[1]; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="885" column="9"/>
      </memberdef>
      <memberdef kind="define" id="ml__number_8c_1a4d457982b4999ce3afc17f2c69ddc31a" prot="public" static="no">
        <name>ml_select_method_integer_real</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ML_METHOD(#NAME, MLIntegerT, MLDoubleT) { \
/*&lt;A
//&lt;B
//&gt;real
// Returns :mini:`NAME(A, B)`.
*/\
	int64_t IntegerA = ml_integer_value_fast(Args[0]); \
	double RealB = ml_double_value_fast(Args[1]); \
	return IntegerA SYMBOL RealB ? Args[0] : Args[1]; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="897" column="9"/>
      </memberdef>
      <memberdef kind="define" id="ml__number_8c_1afc8df5cc7b7b4991c8b559f665ca08ab" prot="public" static="no">
        <name>ml_select_method_number_number</name>
        <param><defname>NAME</defname></param>
        <param><defname>SYMBOL</defname></param>
        <initializer>ml_select_method_integer_integer(NAME, SYMBOL) \
ml_select_method_real_real(NAME, SYMBOL) \
ml_select_method_real_integer(NAME, SYMBOL) \
ml_select_method_integer_real(NAME, SYMBOL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="905" column="9"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ml__number_8c_1a49b6bdf1d69c9c339c1dac1f1a965d0f" prot="public" static="no">
        <type>struct ml_real_iter_t</type>
        <definition>typedef struct ml_real_iter_t ml_real_iter_t</definition>
        <argsstring></argsstring>
        <name>ml_real_iter_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1549" column="16"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ml__number_8c_1a88950e1c1a38a4e9e24e3459d63971c5" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref></type>
        <definition>ml_integer_t One[1]</definition>
        <argsstring>[1]</argsstring>
        <name>One</name>
        <initializer>= {{MLIntegerT, 1}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="864" column="21" bodyfile="src/ml_number.c" bodystart="864" bodyend="864"/>
      </memberdef>
      <memberdef kind="variable" id="ml__number_8c_1ad94b790e5962feb5a654b959502e7634" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref></type>
        <definition>ml_integer_t NegOne[1]</definition>
        <argsstring>[1]</argsstring>
        <name>NegOne</name>
        <initializer>= {{MLIntegerT, -1}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="865" column="21" bodyfile="src/ml_number.c" bodystart="865" bodyend="865"/>
      </memberdef>
      <memberdef kind="variable" id="ml__number_8c_1a2a523802d8ecdcaff761efe547c417d0" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref></type>
        <definition>ml_integer_t Zero[1]</definition>
        <argsstring>[1]</argsstring>
        <name>Zero</name>
        <initializer>= {{MLIntegerT, 0}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="866" column="21" bodyfile="src/ml_number.c" bodystart="866" bodyend="866"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__number_8c_1af16504c6c3ccd1373681c1c66addfd7a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_infix_run</definition>
        <argsstring>(ml_infix_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_infix_run</name>
        <param>
          <type><ref refid="structml__infix__state__t" kindref="compound">ml_infix_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="24" column="13" bodyfile="src/ml_number.c" bodystart="24" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a6dce752190d1b2900cbebb77965262de" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_infix_many_fn</definition>
        <argsstring>(ml_state_t *Caller, void *Infix, int Count, ml_value_t **Args)</argsstring>
        <name>ml_infix_many_fn</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Infix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="34" column="13" bodyfile="src/ml_number.c" bodystart="34" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ac4c37e6b0c53f8f5b1cb962a089fe71b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_infix_many</definition>
        <argsstring>(const char *Name)</argsstring>
        <name>ml_infix_many</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="46" column="13" bodyfile="src/ml_number.c" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a8b262b2b2144c6ae0aac86ac1769a5a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLNumberT,(), &quot;number&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLNumberT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;number&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="51" column="1" declfile="src/ml_number.c" declline="51" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ab4a86a136b7e2d449b868dc7a8d27752" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ML_TYPED_FN</definition>
        <argsstring>(ml_value_is_constant, MLNumberT, ml_value_t *Value)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_is_constant</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="54" column="12" bodyfile="src/ml_number.c" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a60ebaf2af6cb57ffc1385b45b07715aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLRealT,(MLNumberT), &quot;real&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLRealT</type>
        </param>
        <param>
          <type>(MLNumberT)</type>
        </param>
        <param>
          <type>&quot;real&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="235" column="1" declfile="src/ml_number.c" declline="235" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ad69223ddb352b9ab84627cafd9051e7a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long ml_integer_hash</definition>
        <argsstring>(ml_integer_t *Integer, ml_hash_chain_t *Chain)</argsstring>
        <name>ml_integer_hash</name>
        <param>
          <type><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref> *</type>
          <declname>Integer</declname>
        </param>
        <param>
          <type><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref> *</type>
          <declname>Chain</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="317" column="13" bodyfile="src/ml_number.c" bodystart="317" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a910977b0113c5b3b30c93a34850f112e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_integer_call</definition>
        <argsstring>(ml_state_t *Caller, ml_integer_t *Integer, int Count, ml_value_t **Args)</argsstring>
        <name>ml_integer_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref> *</type>
          <declname>Integer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="321" column="13" bodyfile="src/ml_number.c" bodystart="321" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ac22fb594526a00524ae195f8216da383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLIntegerT,(MLRealT, MLFunctionT), &quot;integer&quot;,.hash=(void *) ml_integer_hash,.call=(void *) ml_integer_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>(MLRealT, MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;integer&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>hash</declname>
          <defval>(void *) ml_integer_hash</defval>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_integer_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="329" column="1" declfile="src/ml_number.c" declline="329" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a48b5c6314a5364316d48037713b428b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_integer</definition>
        <argsstring>(int64_t Value)</argsstring>
        <name>ml_integer</name>
        <param>
          <type>int64_t</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="343" column="12" bodyfile="src/ml_number.c" bodystart="343" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1acbf417155859dac0636077db335a130c" prot="public" static="no" extern="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t ml_integer_value_fast</definition>
        <argsstring>(const ml_value_t *Value)</argsstring>
        <name>ml_integer_value_fast</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="350" column="16" bodyfile="src/ml_types.h" bodystart="568" bodyend="570" declfile="src/ml_number.c" declline="350" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ad6fff431210f41dd4a432e14df7ad6d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t ml_integer_value</definition>
        <argsstring>(const ml_value_t *Value)</argsstring>
        <name>ml_integer_value</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="352" column="9" bodyfile="src/ml_number.c" bodystart="352" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a3cbcea24d8523c8ad11d8ee5980eea6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLRealT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLRealT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="366" column="1" bodyfile="src/ml_number.c" bodystart="366" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ad4dcd43ffaf3311d1463451465c9ca45" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long ml_double_hash</definition>
        <argsstring>(ml_value_t *Value, ml_hash_chain_t *Chain)</argsstring>
        <name>ml_double_hash</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref> *</type>
          <declname>Chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="372" column="13" bodyfile="src/ml_number.c" bodystart="372" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a94c5d312438a1c6a878070bf8d1bed78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLDoubleT,(MLRealT), &quot;double&quot;,.hash=(void *) ml_double_hash,.NoInherit=1)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLDoubleT</type>
        </param>
        <param>
          <type>(MLRealT)</type>
        </param>
        <param>
          <type>&quot;double&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>hash</declname>
          <defval>(void *) ml_double_hash</defval>
        </param>
        <param>
          <type>.</type>
          <declname>NoInherit</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="376" column="1" declfile="src/ml_number.c" declline="376" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ac3abe0f9339f664ea3720cb9103b23cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_real</definition>
        <argsstring>(double Value)</argsstring>
        <name>ml_real</name>
        <param>
          <type>double</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="407" column="12" bodyfile="src/ml_number.c" bodystart="407" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1aacf09242b6c70fdcd16aaaa4411e02c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double ml_real_value</definition>
        <argsstring>(const ml_value_t *Value)</argsstring>
        <name>ml_real_value</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="414" column="8" bodyfile="src/ml_number.c" bodystart="414" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a6b73db5ad38cf25d7f0b400f7f44d386" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLDoubleT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLDoubleT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="428" column="1" bodyfile="src/ml_number.c" bodystart="428" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1adcfc5cee094e59362bb15d579d11fc17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLIntegerT, MLDoubleT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLDoubleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="435" column="1" bodyfile="src/ml_number.c" bodystart="435" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1af1d3019a77d42f7cc8201611656b91aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_arith_method_number</definition>
        <argsstring>(-, -)</argsstring>
        <name>ml_arith_method_number</name>
        <param>
          <type>-</type>
        </param>
        <param>
          <type>-</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="528" column="1" bodyfile="src/ml_number.c" bodystart="528" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a84838eeabc2399dac3bc7ba66c1456dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&gt;&gt;&quot;, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&gt;&gt;&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="559" column="1" bodyfile="src/ml_number.c" bodystart="559" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a77dbf828564e7960ce4a6e0d850b32b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;++&quot;, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;++&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="581" column="1" bodyfile="src/ml_number.c" bodystart="581" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a69f22646eadb65be9ab14b8a8e080d62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;--&quot;, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;--&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="588" column="1" bodyfile="src/ml_number.c" bodystart="588" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1afff93064b92e6d80e14224da52ad2bda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODZ</definition>
        <argsstring>(&quot;inc&quot;, MLIntegerT)</argsstring>
        <name>ML_METHODZ</name>
        <param>
          <type>&quot;inc&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="595" column="1" bodyfile="src/ml_number.c" bodystart="595" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a5826676e373704d8ff756dfc3b747a71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODZ</definition>
        <argsstring>(&quot;dec&quot;, MLIntegerT)</argsstring>
        <name>ML_METHODZ</name>
        <param>
          <type>&quot;dec&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="603" column="1" bodyfile="src/ml_number.c" bodystart="603" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a0bb37fd29073fbf03ea22a8b65e22419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODZ</definition>
        <argsstring>(&quot;inc&quot;, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHODZ</name>
        <param>
          <type>&quot;inc&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="611" column="1" bodyfile="src/ml_number.c" bodystart="611" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a10bf7db24075a0aa084ff2ba4240018d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODZ</definition>
        <argsstring>(&quot;dec&quot;, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHODZ</name>
        <param>
          <type>&quot;dec&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="621" column="1" bodyfile="src/ml_number.c" bodystart="621" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ac2c2ee6a8518af2651397f3a43fb3295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;++&quot;, MLDoubleT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;++&quot;</type>
        </param>
        <param>
          <type>MLDoubleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="631" column="1" bodyfile="src/ml_number.c" bodystart="631" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1aaf696a6383c9526f4dda12790a107f55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;--&quot;, MLDoubleT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;--&quot;</type>
        </param>
        <param>
          <type>MLDoubleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="638" column="1" bodyfile="src/ml_number.c" bodystart="638" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a4dc6ce9b347dff2b9c062652959c3e03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_arith_method_real_real</definition>
        <argsstring>(/,/)</argsstring>
        <name>ml_arith_method_real_real</name>
        <param>
          <type>/</type>
        </param>
        <param>
          <type>/</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="645" column="1" bodyfile="src/ml_number.c" bodystart="645" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1af75006256824a45069512ddec05fbc4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;%&quot;, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;%&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="679" column="1" bodyfile="src/ml_number.c" bodystart="679" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ae19001279d6550d73c8b340003c807bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;|&quot;, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;|&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="692" column="1" bodyfile="src/ml_number.c" bodystart="692" bodyend="701"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a9a37c63a84a9ba7b9d8b2f982f4c76ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;!|&quot;, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;!|&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="703" column="1" bodyfile="src/ml_number.c" bodystart="703" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a9cf4f16d218eea2a285ccb6ac26e3444" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;div&quot;, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;div&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="714" column="1" bodyfile="src/ml_number.c" bodystart="714" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a70d52de53cb0d43bbd6276784056fe9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;mod&quot;, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;mod&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="732" column="1" bodyfile="src/ml_number.c" bodystart="732" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a9af178597c79aceca78ba3a261377ba7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;bsf&quot;, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;bsf&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="748" column="1" bodyfile="src/ml_number.c" bodystart="748" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a3607e4f52bb07645cc06f3369a1815d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;bsr&quot;, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;bsr&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="759" column="1" bodyfile="src/ml_number.c" bodystart="759" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a85b219a6326271a59d8b695ae6ddcba2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_comp_method_number_number</definition>
        <argsstring>(=,==) ml_comp_method_number_number(!</argsstring>
        <name>ml_comp_method_number_number</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="808" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a0f8f94f97effe3e2c2287eb9b8fb53c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ml_select_method_number_number</definition>
        <argsstring>(max, &gt;)</argsstring>
        <name>ml_select_method_number_number</name>
        <param>
          <type>max</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="854" column="1" declfile="src/ml_number.c" declline="854" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1adb2bab060e1b104f75288a9ae5c8f68a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&gt;&quot;, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;&gt;&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="870" column="1" bodyfile="src/ml_number.c" bodystart="870" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ab941ae8416b88676eac5e97602623124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&gt;&quot;, MLDoubleT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;&gt;&quot;</type>
        </param>
        <param>
          <type>MLDoubleT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="882" column="1" bodyfile="src/ml_number.c" bodystart="882" bodyend="892"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a57b1cb8a938b66473188887e57b390ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&gt;&quot;, MLIntegerT, MLDoubleT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;&gt;&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLDoubleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="894" column="1" bodyfile="src/ml_number.c" bodystart="894" bodyend="904"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ab0d50d645176e423a9c2f72a5b9fed90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&gt;&quot;, MLDoubleT, MLDoubleT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;&gt;&quot;</type>
        </param>
        <param>
          <type>MLDoubleT</type>
        </param>
        <param>
          <type>MLDoubleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="906" column="1" bodyfile="src/ml_number.c" bodystart="906" bodyend="916"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a648f4b06213f9453ead7a9b5c42d2dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;div&quot;, MLRealT, MLRealT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;div&quot;</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="918" column="1" bodyfile="src/ml_number.c" bodystart="918" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1afe7ea4e66c81b83c7d0c84a13f925cea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;mod&quot;, MLRealT, MLRealT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;mod&quot;</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="930" column="1" bodyfile="src/ml_number.c" bodystart="930" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a5e7b78b3a413e7f4e7e5f6543e6d8ff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;%&quot;, MLRealT, MLRealT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;%&quot;</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <param>
          <type>MLRealT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="942" column="1" bodyfile="src/ml_number.c" bodystart="942" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a7824a93c14c4789008d083aaf1dd6554" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;isfinite&quot;, MLDoubleT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;isfinite&quot;</type>
        </param>
        <param>
          <type>MLDoubleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="957" column="1" bodyfile="src/ml_number.c" bodystart="957" bodyend="964"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a674c8cfce32ad8e637c59a52b10d88dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;isnan&quot;, MLDoubleT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;isnan&quot;</type>
        </param>
        <param>
          <type>MLDoubleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="966" column="1" bodyfile="src/ml_number.c" bodystart="966" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ab01405ad20dc36d4d1a92e4ba4a7a0d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(RandomInteger)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>RandomInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="975" column="1" bodyfile="src/ml_number.c" bodystart="975" bodyend="1003"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a369716f0059ac73abfa9df4c55d91683" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(RandomPermutation)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>RandomPermutation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1005" column="1" bodyfile="src/ml_number.c" bodystart="1005" bodyend="1028"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ab23b72f595ccba107760ee7ab8c9fb60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(RandomCycle)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>RandomCycle</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1030" column="1" bodyfile="src/ml_number.c" bodystart="1030" bodyend="1051"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a5414513bc61a233b8acd7af350f3d8e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(RandomReal)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>RandomReal</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1054" column="1" bodyfile="src/ml_number.c" bodystart="1054" bodyend="1077"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a9eb666159bb3ea4ed3bba06ef357c201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLConstantIterT,(), &quot;constant-iter&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLConstantIterT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;constant-iter&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1085" column="1" declfile="src/ml_number.c" declline="1085" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a0d3c1f13a0ecf823e9866211f46c0724" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLConstantIterT, ml_state_t *Caller, ml_constant_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLConstantIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__constant__iter__t" kindref="compound">ml_constant_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1088" column="13" bodyfile="src/ml_number.c" bodystart="1088" bodyend="1090"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1af49881c0406bca0bbcfe713a5263f4bf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLConstantIterT, ml_state_t *Caller, ml_constant_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLConstantIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__constant__iter__t" kindref="compound">ml_constant_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1092" column="13" bodyfile="src/ml_number.c" bodystart="1092" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a4d84e92faabf7c237f725ea4ffa38424" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLConstantIterT, ml_state_t *Caller, ml_constant_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLConstantIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__constant__iter__t" kindref="compound">ml_constant_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1097" column="13" bodyfile="src/ml_number.c" bodystart="1097" bodyend="1099"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ae3aec5028b2ebc768a999297391af42c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLIntegerUpIterT,(), &quot;integer-iter&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLIntegerUpIterT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;integer-iter&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1107" column="1" declfile="src/ml_number.c" declline="1107" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a1b5b648b6a698d78d24e9788024e5642" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLIntegerUpIterT, ml_state_t *Caller, ml_integer_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLIntegerUpIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__integer__iter__t" kindref="compound">ml_integer_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1110" column="13" bodyfile="src/ml_number.c" bodystart="1110" bodyend="1112"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a935106a185cf2993d694f442f90ab010" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLIntegerUpIterT, ml_state_t *Caller, ml_integer_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLIntegerUpIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__integer__iter__t" kindref="compound">ml_integer_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1114" column="13" bodyfile="src/ml_number.c" bodystart="1114" bodyend="1119"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a580ce355c10e6e3e596e8f7722159909" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLIntegerUpIterT, ml_state_t *Caller, ml_integer_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLIntegerUpIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__integer__iter__t" kindref="compound">ml_integer_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1121" column="13" bodyfile="src/ml_number.c" bodystart="1121" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1afc88201a238b2aad8c392019b15c64d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLIntegerDownIterT,(), &quot;integer-iter&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLIntegerDownIterT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;integer-iter&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1125" column="1" declfile="src/ml_number.c" declline="1125" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1aff2bdc365a5434d926ad0d4f91011e54" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLIntegerDownIterT, ml_state_t *Caller, ml_integer_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLIntegerDownIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__integer__iter__t" kindref="compound">ml_integer_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1128" column="13" bodyfile="src/ml_number.c" bodystart="1128" bodyend="1130"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a4a7db228e75ddbadd6319b0d3ee668f2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLIntegerDownIterT, ml_state_t *Caller, ml_integer_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLIntegerDownIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__integer__iter__t" kindref="compound">ml_integer_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1132" column="13" bodyfile="src/ml_number.c" bodystart="1132" bodyend="1137"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a42b429d50e504b8c7409ac2b4688a6d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLIntegerDownIterT, ml_state_t *Caller, ml_integer_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLIntegerDownIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__integer__iter__t" kindref="compound">ml_integer_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1139" column="13" bodyfile="src/ml_number.c" bodystart="1139" bodyend="1141"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1adc00330b987d3b609a9d25c09646a90d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLIntegerRangeT,(MLSequenceT), &quot;integer-range&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;integer-range&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1143" column="1" declfile="src/ml_number.c" declline="1143" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1af0a8f5feeff5195ccc998416f1139159" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLIntegerRangeT, ml_state_t *Caller, ml_value_t *Value)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>range </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1146" column="13" bodyfile="src/ml_number.c" bodystart="1146" bodyend="1173"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a0123048a1ffe062acd06870cf3168b0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;..&quot;, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;..&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1175" column="1" bodyfile="src/ml_number.c" bodystart="1175" bodyend="1187"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1aa84aa9ecf42cd202e38a586c85bcc030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;..&lt;&quot;, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
<para>range</para>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1189" column="1" bodyfile="src/ml_number.c" bodystart="1189" bodyend="1201"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a6efba7a60e98d0801a002495a1b8a4b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;..&quot;, MLIntegerT, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;..&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1203" column="1" bodyfile="src/ml_number.c" bodystart="1203" bodyend="1216"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a058b1ce95a22bb785788ffc6c806014f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;up&quot;, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;up&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1218" column="1" bodyfile="src/ml_number.c" bodystart="1218" bodyend="1229"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a92cbe686decf6f6b3dcbec5c14ea864b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;up&quot;, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;up&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1231" column="1" bodyfile="src/ml_number.c" bodystart="1231" bodyend="1243"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a137277383222ac7425bb39ce97711da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;by&quot;, MLIntegerT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;by&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1245" column="1" bodyfile="src/ml_number.c" bodystart="1245" bodyend="1263"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a7ac1142fc8d857014d27a04b36218ca1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;by&quot;, MLIntegerRangeT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;by&quot;</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1265" column="1" bodyfile="src/ml_number.c" bodystart="1265" bodyend="1278"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a512707f3de00f01dcb953ada173508f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;+&quot;, MLIntegerRangeT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;+&quot;</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1280" column="1" bodyfile="src/ml_number.c" bodystart="1280" bodyend="1294"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a3110f257e2e40ec606f76cb3734adb04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&quot;, MLIntegerRangeT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&quot;</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1296" column="1" bodyfile="src/ml_number.c" bodystart="1296" bodyend="1310"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1af109bd689c37f74d4ca2ac7230d180e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;*&quot;, MLIntegerRangeT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;*&quot;</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1312" column="1" bodyfile="src/ml_number.c" bodystart="1312" bodyend="1326"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a6d7ec7ed86427e1c7fcfd68480a09fc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;+&quot;, MLIntegerT, MLIntegerRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;+&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1328" column="1" bodyfile="src/ml_number.c" bodystart="1328" bodyend="1342"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a2f4d56d70c7d89fd228a38de468a5d51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&quot;, MLIntegerT, MLIntegerRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1344" column="1" bodyfile="src/ml_number.c" bodystart="1344" bodyend="1358"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a2ea6f82e21fcc4aafdda26e793346074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;*&quot;, MLIntegerT, MLIntegerRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;*&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1360" column="1" bodyfile="src/ml_number.c" bodystart="1360" bodyend="1374"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ac792b942dc686b7b3636bc5e1af9c746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;precount&quot;, MLIntegerRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;precount&quot;</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1404" column="1" bodyfile="src/ml_number.c" bodystart="1404" bodyend="1421"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a2f0782f66e8d28b2a018732ec6f015d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;count&quot;, MLIntegerRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;count&quot;</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1423" column="1" bodyfile="src/ml_number.c" bodystart="1423" bodyend="1440"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ae4cd0adc669b57f041c64adc82a25826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;start&quot;, MLIntegerRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;start&quot;</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1442" column="1" bodyfile="src/ml_number.c" bodystart="1442" bodyend="1449"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a04d6bb5ae3685fb27e7641a17df2a2e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;limit&quot;, MLIntegerRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;limit&quot;</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1451" column="1" bodyfile="src/ml_number.c" bodystart="1451" bodyend="1458"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a3fccc6ce6702d68a6865a09c6b816761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;step&quot;, MLIntegerRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;step&quot;</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1460" column="1" bodyfile="src/ml_number.c" bodystart="1460" bodyend="1467"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a929f12467175465f271c1d4a800e2692" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;first&quot;, MLIntegerRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;first&quot;</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1469" column="1" bodyfile="src/ml_number.c" bodystart="1469" bodyend="1485"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a20fff3282fdf675edf3190da6a0c6956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;last&quot;, MLIntegerRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;last&quot;</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1487" column="1" bodyfile="src/ml_number.c" bodystart="1487" bodyend="1503"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a21eabb7352aff2d28a180e1d98f0fbdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;in&quot;, MLIntegerT, MLIntegerRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;in&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1505" column="1" bodyfile="src/ml_number.c" bodystart="1505" bodyend="1515"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1adb6fc79b2be67450ff13eea757e48e36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;in&quot;, MLDoubleT, MLIntegerRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;in&quot;</type>
        </param>
        <param>
          <type>MLDoubleT</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1517" column="1" bodyfile="src/ml_number.c" bodystart="1517" bodyend="1527"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ab8c2f0b8e23ebabc4c173df1641aa6ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;random&quot;, MLIntegerRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;random&quot;</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1529" column="1" bodyfile="src/ml_number.c" bodystart="1529" bodyend="1543"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a22d036bce9e4ccbfc3f91b7897048b12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLRealUpIterT,(), &quot;real-iter&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLRealUpIterT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;real-iter&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1551" column="1" declfile="src/ml_number.c" declline="1551" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1aacc243cdb32aa1b420f996d5812ff250" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLRealUpIterT, ml_state_t *Caller, ml_real_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLRealUpIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__real__iter__t" kindref="compound">ml_real_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1554" column="13" bodyfile="src/ml_number.c" bodystart="1554" bodyend="1556"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ad8540b3a317cc163d8e91a43dfdf7525" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLRealUpIterT, ml_state_t *Caller, ml_real_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLRealUpIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__real__iter__t" kindref="compound">ml_real_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1558" column="13" bodyfile="src/ml_number.c" bodystart="1558" bodyend="1563"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a20d6ae08f979d2b1cb3559997d634a75" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLRealUpIterT, ml_state_t *Caller, ml_real_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLRealUpIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__real__iter__t" kindref="compound">ml_real_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1565" column="13" bodyfile="src/ml_number.c" bodystart="1565" bodyend="1567"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a5bdf9053871ef38942b3f5636035295e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLRealDownIterT,(), &quot;real-iter&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLRealDownIterT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;real-iter&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1569" column="1" declfile="src/ml_number.c" declline="1569" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a26e49e170d696b5a7b462e38050a1435" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLRealDownIterT, ml_state_t *Caller, ml_real_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLRealDownIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__real__iter__t" kindref="compound">ml_real_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1572" column="13" bodyfile="src/ml_number.c" bodystart="1572" bodyend="1574"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a034a4f65c1b04440f224df5c7a28fe54" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLRealDownIterT, ml_state_t *Caller, ml_real_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLRealDownIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__real__iter__t" kindref="compound">ml_real_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1576" column="13" bodyfile="src/ml_number.c" bodystart="1576" bodyend="1581"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1aaf3a5c6ac0ebaa6c5bd199a588568da0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLRealDownIterT, ml_state_t *Caller, ml_real_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLRealDownIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__real__iter__t" kindref="compound">ml_real_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1583" column="13" bodyfile="src/ml_number.c" bodystart="1583" bodyend="1585"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a9ad82fec3d47535b634954c7517c3f77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLRealRangeT,(MLSequenceT), &quot;real-range&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;real-range&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1587" column="1" declfile="src/ml_number.c" declline="1587" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a2c14d91354695f7355dffba32a62ee83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLRealRangeT, ml_state_t *Caller, ml_value_t *Value)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>range </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1590" column="13" bodyfile="src/ml_number.c" bodystart="1590" bodyend="1617"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a3978725cb7fe93737ea57b5a934be134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;..&quot;, MLNumberT, MLNumberT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;..&quot;</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1619" column="1" bodyfile="src/ml_number.c" bodystart="1619" bodyend="1630"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a10d6023943f3f2dd445643934a19fb37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;..&quot;, MLNumberT, MLNumberT, MLNumberT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;..&quot;</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1632" column="1" bodyfile="src/ml_number.c" bodystart="1632" bodyend="1643"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a53dd443b0390cb910227b4ae97877f4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;by&quot;, MLNumberT, MLNumberT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;by&quot;</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1645" column="1" bodyfile="src/ml_number.c" bodystart="1645" bodyend="1656"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a3b553b6c6572ba4d20d96d7c227390d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;by&quot;, MLRealRangeT, MLNumberT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;by&quot;</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <param>
          <type>MLNumberT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1658" column="1" bodyfile="src/ml_number.c" bodystart="1658" bodyend="1670"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a3f2229db00f81f1292097e5b4f27fcc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;in&quot;, MLIntegerRangeT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;in&quot;</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1672" column="1" bodyfile="src/ml_number.c" bodystart="1672" bodyend="1695"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a5a6c960d4dbe04aaad5410cbd8d0ec18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;in&quot;, MLRealRangeT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;in&quot;</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1697" column="1" bodyfile="src/ml_number.c" bodystart="1697" bodyend="1711"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1aa52cd2c78f472aa75bedeb3ed85131d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;by&quot;, MLIntegerRangeT, MLDoubleT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;by&quot;</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <param>
          <type>MLDoubleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1713" column="1" bodyfile="src/ml_number.c" bodystart="1713" bodyend="1725"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a5219a32dd3006c525a18c52760578ddd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;bin&quot;, MLIntegerRangeT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;bin&quot;</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1727" column="1" bodyfile="src/ml_number.c" bodystart="1727" bodyend="1737"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a13e77faab5b9a998cfcace90ed69c7ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;bin&quot;, MLIntegerRangeT, MLDoubleT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;bin&quot;</type>
        </param>
        <param>
          <type>MLIntegerRangeT</type>
        </param>
        <param>
          <type>MLDoubleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1739" column="1" bodyfile="src/ml_number.c" bodystart="1739" bodyend="1749"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1acb366b80a6e8dd36c1229e3531c5065d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ml_real_range_count</definition>
        <argsstring>(ml_real_range_t *Range)</argsstring>
        <name>ml_real_range_count</name>
        <param>
          <type><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref> *</type>
          <declname>Range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1751" column="8" bodyfile="src/ml_number.c" bodystart="1751" bodyend="1763"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a6c9de604d34adfdedbb0dbf1d20891e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;precount&quot;, MLRealRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;precount&quot;</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1765" column="1" bodyfile="src/ml_number.c" bodystart="1765" bodyend="1782"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a386110f36c3e1b7ba2ae59328d907056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;count&quot;, MLRealRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;count&quot;</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1784" column="1" bodyfile="src/ml_number.c" bodystart="1784" bodyend="1801"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a5b4e0d785071cf9787d6d08a6b1a4246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;start&quot;, MLRealRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;start&quot;</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1803" column="1" bodyfile="src/ml_number.c" bodystart="1803" bodyend="1810"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1abc487f2a0bcdd7601dc600598458b81d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;limit&quot;, MLRealRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;limit&quot;</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1812" column="1" bodyfile="src/ml_number.c" bodystart="1812" bodyend="1819"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ae99dff11acb98ca3951628b5c1880a82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;step&quot;, MLRealRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;step&quot;</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1821" column="1" bodyfile="src/ml_number.c" bodystart="1821" bodyend="1828"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ab26dcc19a4c29e5f2962917784c566e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;first&quot;, MLRealRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;first&quot;</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1830" column="1" bodyfile="src/ml_number.c" bodystart="1830" bodyend="1845"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a4bf67cfb9898d8d026662b82c2d707fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;last&quot;, MLRealRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;last&quot;</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1847" column="1" bodyfile="src/ml_number.c" bodystart="1847" bodyend="1864"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a4556147c0dd2321ef0e511c4271125dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;in&quot;, MLIntegerT, MLRealRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;in&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1866" column="1" bodyfile="src/ml_number.c" bodystart="1866" bodyend="1876"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ae7ea6d1dbd915613d3c6e96c53f17883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;in&quot;, MLDoubleT, MLRealRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;in&quot;</type>
        </param>
        <param>
          <type>MLDoubleT</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1878" column="1" bodyfile="src/ml_number.c" bodystart="1878" bodyend="1888"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a2197c537f188334a0185c2781df71484" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;random&quot;, MLRealRangeT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;random&quot;</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1890" column="1" bodyfile="src/ml_number.c" bodystart="1890" bodyend="1911"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ae01195ba5adbf7c75f51664f65a69d44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;bin&quot;, MLRealRangeT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;bin&quot;</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1913" column="1" bodyfile="src/ml_number.c" bodystart="1913" bodyend="1923"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a77c9e20ea066917324798f3f5aa4edd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;bin&quot;, MLRealRangeT, MLDoubleT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;bin&quot;</type>
        </param>
        <param>
          <type>MLRealRangeT</type>
        </param>
        <param>
          <type>MLDoubleT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>range</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1925" column="1" bodyfile="src/ml_number.c" bodystart="1925" bodyend="1935"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a5142b503f734be39439c4519c57a594e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_integer_switch</definition>
        <argsstring>(ml_state_t *Caller, ml_integer_switch_t *Switch, int Count, ml_value_t **Args)</argsstring>
        <name>ml_integer_switch</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__integer__switch__t" kindref="compound">ml_integer_switch_t</ref> *</type>
          <declname>Switch</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1950" column="13" bodyfile="src/ml_number.c" bodystart="1950" bodyend="1961"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a75fa6bd8af26bd0f23f076f55b1508e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLIntegerSwitchT,(MLFunctionT), &quot;integer-switch&quot;,.call=(void *) ml_integer_switch)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLIntegerSwitchT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;integer-switch&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_integer_switch</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="1963" column="1" declfile="src/ml_number.c" declline="1963" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a3de367c6d328c3c3b5d440ffa0fc546a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION_INLINE</definition>
        <argsstring>(MLIntegerSwitch)</argsstring>
        <name>ML_FUNCTION_INLINE</name>
        <param>
          <type>MLIntegerSwitch</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="1968" column="1" bodyfile="src/ml_number.c" bodystart="1968" bodyend="2006"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a66e37c735de9b4ba8acc372399619cff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_serialize, MLIntegerSwitchT, ml_integer_switch_t *Switch)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_serialize</type>
        </param>
        <param>
          <type>MLIntegerSwitchT</type>
        </param>
        <param>
          <type><ref refid="structml__integer__switch__t" kindref="compound">ml_integer_switch_t</ref> *</type>
          <declname>Switch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="2008" column="19" bodyfile="src/ml_number.c" bodystart="2008" bodyend="2028"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ad6bfa63067531732f7ff2391b605c1a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_DESERIALIZER</definition>
        <argsstring>(&quot;integer-switch&quot;)</argsstring>
        <name>ML_DESERIALIZER</name>
        <param>
          <type>&quot;integer-switch&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="2030" column="1" bodyfile="src/ml_number.c" bodystart="2030" bodyend="2056"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a37f75bbb9336fbecb77fc19213f7700c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_real_switch</definition>
        <argsstring>(ml_state_t *Caller, ml_real_switch_t *Switch, int Count, ml_value_t **Args)</argsstring>
        <name>ml_real_switch</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__real__switch__t" kindref="compound">ml_real_switch_t</ref> *</type>
          <declname>Switch</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="2068" column="13" bodyfile="src/ml_number.c" bodystart="2068" bodyend="2079"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1aa7958f6dedb3429f3b36eeecb0c88e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLRealSwitchT,(MLFunctionT), &quot;real-switch&quot;,.call=(void *) ml_real_switch)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLRealSwitchT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;real-switch&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_real_switch</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="2081" column="1" declfile="src/ml_number.c" declline="2081" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1ab077d863e730da0790bbea4cb956db3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION_INLINE</definition>
        <argsstring>(MLRealSwitch)</argsstring>
        <name>ML_FUNCTION_INLINE</name>
        <param>
          <type>MLRealSwitch</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_number.c" line="2086" column="1" bodyfile="src/ml_number.c" bodystart="2086" bodyend="2122"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a14eaba9a192d64627fc276f2329c091c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_serialize, MLRealSwitchT, ml_real_switch_t *Switch)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_serialize</type>
        </param>
        <param>
          <type>MLRealSwitchT</type>
        </param>
        <param>
          <type><ref refid="structml__real__switch__t" kindref="compound">ml_real_switch_t</ref> *</type>
          <declname>Switch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="2124" column="19" bodyfile="src/ml_number.c" bodystart="2124" bodyend="2144"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a736d33a17372f0bd919cb01adf055c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_DESERIALIZER</definition>
        <argsstring>(&quot;real-switch&quot;)</argsstring>
        <name>ML_DESERIALIZER</name>
        <param>
          <type>&quot;real-switch&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="2146" column="1" bodyfile="src/ml_number.c" bodystart="2146" bodyend="2172"/>
      </memberdef>
      <memberdef kind="function" id="ml__number_8c_1a666d7344191479fae801a53791283736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_number_init</definition>
        <argsstring>()</argsstring>
        <name>ml_number_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_number.c" line="2174" column="6" bodyfile="src/ml_number.c" bodystart="2174" bodyend="2202"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ml_number.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;minilang.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;float.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;inttypes.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>I</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;number&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="structml__infix__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/>Count;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}<sp/><ref refid="structml__infix__state__t" kindref="compound">ml_infix_state_t</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_infix_run(<ref refid="structml__infix__state__t" kindref="compound">ml_infix_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>State-&gt;Index;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>+<sp/>1<sp/>==<sp/>State-&gt;Count)<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Args[Index]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>Index<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Function,<sp/>2,<sp/>State-&gt;Args<sp/>+<sp/>Index);</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_infix_many_fn(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Infix,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__infix__state__t" kindref="compound">ml_infix_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__infix__state__t" kindref="compound">ml_infix_state_t</ref>,<sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_infix_run;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Function<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Infix;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>State-&gt;Args[I]<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Infix,<sp/>2,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_infix_many(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Method<sp/>=<sp/>ml_method(Name);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_definev(Method,<sp/>ml_cfunctionx(Method,<sp/>ml_infix_many_fn),<sp/>MLAnyT,<sp/>MLAnyT,<sp/>MLAnyT,<sp/>MLAnyT,<sp/>NULL);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">ML_TYPE(MLNumberT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>type<sp/>for<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_is_constant,<sp/>MLNumberT,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_complex_hash(ml_complex_t<sp/>*Complex,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)creal(Complex-&gt;Value);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">ML_TYPE(MLComplexT,<sp/>(MLNumberT),<sp/></highlight><highlight class="stringliteral">&quot;complex&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_complex_hash</highlight></codeline>
<codeline lineno="66"><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_complex(complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Value)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_complex_t<sp/>*Complex<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(ml_complex_t);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>Complex-&gt;Type<sp/>=<sp/>MLComplexT;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>Complex-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Complex;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">ML_METHOD(MLComplexT,<sp/>MLRealT)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(ml_real_value(Args[0]));</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">ML_METHOD(MLComplexT,<sp/>MLRealT,<sp/>MLRealT)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_complex(ml_real_value(Args[0])<sp/>+<sp/>ml_real_value(Args[1])<sp/>*<sp/>_Complex_I);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">ML_METHOD(MLRealT,<sp/>MLComplexT)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(creal(ml_complex_value(Args[0])));</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ml_complex_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">complex<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ml_complex_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_NANBOXING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Tag<sp/>=<sp/>ml_tag(Value);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tag<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int32_t)(intptr_t)Value;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tag<sp/>&gt;=<sp/>7)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_double_value_fast(Value);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tag<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value-&gt;Type<sp/>==<sp/>MLInt64T)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value-&gt;Type<sp/>==<sp/>MLComplexT)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((ml_complex_t<sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value-&gt;Type<sp/>==<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value-&gt;Type<sp/>==<sp/>MLDoubleT)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__double__t" kindref="compound">ml_double_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLIntegerT))<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLDoubleT))<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__double__t" kindref="compound">ml_double_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLComplexT))<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((ml_complex_t<sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_arith_method_complex(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLComplexT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="122"><highlight class="comment">//&gt;complex</highlight></codeline>
<codeline lineno="123"><highlight class="comment">//<sp/>Returns<sp/>:mini:`NAMEA`.</highlight></codeline>
<codeline lineno="124"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex<sp/>double<sp/>ComplexA<sp/>=<sp/>ml_complex_value(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex<sp/>double<sp/>ComplexB<sp/>=<sp/>SYMBOL(ComplexA);<sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(fabs(cimag(ComplexB))<sp/>&lt;=<sp/>DBL_EPSILON)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_real(creal(ComplexB));<sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_complex(ComplexB);<sp/>\</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_arith_method_complex_complex(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLComplexT,<sp/>MLComplexT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="137"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="138"><highlight class="comment">//&gt;real</highlight></codeline>
<codeline lineno="139"><highlight class="comment">//<sp/>complex<sp/>:mini:`A<sp/>NAME<sp/>B`.</highlight></codeline>
<codeline lineno="140"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex<sp/>double<sp/>ComplexA<sp/>=<sp/>ml_complex_value(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex<sp/>double<sp/>ComplexB<sp/>=<sp/>ml_complex_value(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex<sp/>double<sp/>ComplexC<sp/>=<sp/>ComplexA<sp/>SYMBOL<sp/>ComplexB;<sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(fabs(cimag(ComplexC))<sp/>&lt;=<sp/>DBL_EPSILON)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_real(creal(ComplexC));<sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_complex(ComplexC);<sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_arith_method_complex_integer(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLComplexT,<sp/>MLIntegerT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="154"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="155"><highlight class="comment">//&gt;complex</highlight></codeline>
<codeline lineno="156"><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>NAME<sp/>B`.</highlight></codeline>
<codeline lineno="157"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex<sp/>double<sp/>ComplexA<sp/>=<sp/>ml_complex_value(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerB<sp/>=<sp/>ml_integer_value_fast(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex<sp/>double<sp/>ComplexC<sp/>=<sp/>ComplexA<sp/>SYMBOL<sp/>IntegerB;<sp/>\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(fabs(cimag(ComplexC))<sp/>&lt;=<sp/>DBL_EPSILON)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_real(creal(ComplexC));<sp/>\</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_complex(ComplexC);<sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_arith_method_integer_complex(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLIntegerT,<sp/>MLComplexT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="171"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="172"><highlight class="comment">//&gt;complex</highlight></codeline>
<codeline lineno="173"><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>NAME<sp/>B`.</highlight></codeline>
<codeline lineno="174"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerA<sp/>=<sp/>ml_integer_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex<sp/>double<sp/>ComplexB<sp/>=<sp/>ml_complex_value(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex<sp/>double<sp/>ComplexC<sp/>=<sp/>IntegerA<sp/>SYMBOL<sp/>ComplexB;<sp/>\</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(fabs(cimag(ComplexC))<sp/>&lt;=<sp/>DBL_EPSILON)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_real(creal(ComplexC));<sp/>\</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_complex(ComplexC);<sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_arith_method_complex_real(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLComplexT,<sp/>MLDoubleT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="188"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="189"><highlight class="comment">//&gt;complex</highlight></codeline>
<codeline lineno="190"><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>NAME<sp/>B`.</highlight></codeline>
<codeline lineno="191"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex<sp/>double<sp/>ComplexA<sp/>=<sp/>ml_complex_value(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>RealB<sp/>=<sp/>ml_double_value_fast(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex<sp/>double<sp/>ComplexC<sp/>=<sp/>ComplexA<sp/>SYMBOL<sp/>RealB;<sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(fabs(cimag(ComplexC))<sp/>&lt;=<sp/>DBL_EPSILON)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_real(creal(ComplexC));<sp/>\</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_complex(ComplexC);<sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_arith_method_real_complex(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLDoubleT,<sp/>MLComplexT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="205"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="206"><highlight class="comment">//&gt;complex</highlight></codeline>
<codeline lineno="207"><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>NAME<sp/>B`.</highlight></codeline>
<codeline lineno="208"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>RealA<sp/>=<sp/>ml_double_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex<sp/>double<sp/>ComplexB<sp/>=<sp/>ml_complex_value(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>complex<sp/>double<sp/>ComplexC<sp/>=<sp/>RealA<sp/>SYMBOL<sp/>ComplexB;<sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(fabs(cimag(ComplexC))<sp/>&lt;=<sp/>DBL_EPSILON)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_real(creal(ComplexC));<sp/>\</highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="215"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ml_complex(ComplexC);<sp/>\</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">,<sp/>MLComplexT)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//&lt;Z</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>real<sp/>component<sp/>of<sp/>:mini:`Z`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(creal(ml_complex_value(Args[0])));</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">,<sp/>MLComplexT)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//&lt;Z</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>imaginary<sp/>component<sp/>of<sp/>:mini:`Z`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(cimag(ml_complex_value(Args[0])));</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">ML_TYPE(MLRealT,<sp/>(MLComplexT),<sp/></highlight><highlight class="stringliteral">&quot;real&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">ML_TYPE(MLRealT,<sp/>(MLNumberT),<sp/></highlight><highlight class="stringliteral">&quot;real&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>type<sp/>for<sp/>real<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="241"><highlight class="comment">ML_DEF(Inf);</highlight></codeline>
<codeline lineno="243"><highlight class="normal">//@real::Inf</highlight></codeline>
<codeline lineno="244"><highlight class="normal">//&gt;real</highlight></codeline>
<codeline lineno="245"><highlight class="normal">//<sp/>Positive<sp/>infinity.</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">ML_DEF(NaN);</highlight></codeline>
<codeline lineno="249"><highlight class="normal">//@real::NaN</highlight></codeline>
<codeline lineno="250"><highlight class="normal">//&gt;real</highlight></codeline>
<codeline lineno="251"><highlight class="normal">//<sp/>Not<sp/>a<sp/>number.</highlight></codeline>
<codeline lineno="252"><highlight class="normal">*/</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_NANBOXING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_int32_hash(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int32_t)(intptr_t)Value;</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_int32_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>(int32_t)(intptr_t)Value;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;=<sp/>0)<sp/>Index<sp/>+=<sp/>Count<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;=<sp/>0)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&gt;<sp/>Count)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Args[Index<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">ML_TYPE(MLIntegerT,<sp/>(MLRealT,<sp/>MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">ML_TYPE(MLInt32T,<sp/>(MLIntegerT),<sp/></highlight><highlight class="stringliteral">&quot;int32&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_int32_hash,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_int32_call,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>.NoInherit<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="276"><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_int64_hash(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal">ML_TYPE(MLInt64T,<sp/>(MLIntegerT),<sp/></highlight><highlight class="stringliteral">&quot;int64&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_int64_hash,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>.NoInherit<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="286"><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_int64(int64_t<sp/>Integer)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>*Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>Value-&gt;Type<sp/>=<sp/>MLInt64T;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>Value-&gt;Value<sp/>=<sp/>Integer;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal">int64_t<sp/>ml_integer_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Tag<sp/>=<sp/>ml_tag(Value);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tag<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int32_t)(intptr_t)Value;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tag<sp/>&gt;=<sp/>7)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_double_value_fast(Value);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Tag<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>ml_is_subtype(Value-&gt;Type,<sp/>MLInt64T))<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">ML_METHOD(MLRealT,<sp/>MLInt32T)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real((int32_t)(intptr_t)Args[0]);</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">ML_METHOD(MLRealT,<sp/>MLInt64T)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(((<ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>*)Args[0])-&gt;Value);</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_integer_hash(<ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>*Integer,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Integer-&gt;Value;</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_integer_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>*Integer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Integer-&gt;Value;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;=<sp/>0)<sp/>Index<sp/>+=<sp/>Count<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;=<sp/>0)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&gt;<sp/>Count)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Args[Index<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal">ML_TYPE(MLIntegerT,<sp/>(MLRealT,<sp/>MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;integer&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>64-bit<sp/>signed<sp/>integer<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>:mini:`fun<sp/>(I:<sp/>integer)(Arg/1,<sp/>...,<sp/>Arg/n):<sp/>any<sp/>|<sp/>nil`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>:mini:`I`-th<sp/>argument<sp/>or<sp/>:mini:`nil`<sp/>if<sp/>there<sp/>is<sp/>no<sp/>:mini:`I`-th<sp/>argument.<sp/>Negative<sp/>values<sp/>of<sp/>:mini:`I`<sp/>are<sp/>counted<sp/>from<sp/>the<sp/>last<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>In<sp/>particular,<sp/>:mini:`0(...)`<sp/>always<sp/>returns<sp/>:mini:`nil`<sp/>and<sp/>:mini:`1`<sp/>behaves<sp/>as<sp/>the<sp/>identity<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>2(&quot;a&quot;,<sp/>&quot;b&quot;,<sp/>&quot;c&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>-1(&quot;a&quot;,<sp/>&quot;b&quot;,<sp/>&quot;c&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>4(&quot;a&quot;,<sp/>&quot;b&quot;,<sp/>&quot;c&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>0(&quot;a&quot;,<sp/>&quot;b&quot;,<sp/>&quot;c&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_integer_hash,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_integer_call</highlight></codeline>
<codeline lineno="341"><highlight class="normal">);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_integer(int64_t<sp/>Value)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>*Integer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref>);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>Integer-&gt;Type<sp/>=<sp/>MLIntegerT;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>Integer-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Integer;</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>int64_t<sp/>ml_integer_value_fast(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">int64_t<sp/>ml_integer_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value-&gt;Type<sp/>==<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value-&gt;Type<sp/>==<sp/>MLDoubleT)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__double__t" kindref="compound">ml_double_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLIntegerT))<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLDoubleT))<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__double__t" kindref="compound">ml_double_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">ML_METHOD(MLRealT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(ml_integer_value_fast(Args[0]));</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_double_hash(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)ml_double_value_fast(Value);</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">ML_TYPE(MLDoubleT,<sp/>(MLRealT),<sp/></highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_double_hash,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>.NoInherit<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="379"><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_NANBOXING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ml_real_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Tag<sp/>=<sp/>ml_tag(Value);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tag<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int32_t)(intptr_t)Value;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tag<sp/>&gt;=<sp/>7)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_double_value_fast(Value);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Tag<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value-&gt;Type<sp/>==<sp/>MLInt64T)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal">ML_METHOD(MLDoubleT,<sp/>MLInt32T)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real((int32_t)(intptr_t)Args[0]);</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">ML_METHOD(MLDoubleT,<sp/>MLInt64T)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(((<ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>*)Args[0])-&gt;Value);</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_real(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Value)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__double__t" kindref="compound">ml_double_t</ref><sp/>*Real<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__double__t" kindref="compound">ml_double_t</ref>);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>Real-&gt;Type<sp/>=<sp/>MLDoubleT;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>Real-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Real;</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ml_real_value(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value-&gt;Type<sp/>==<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value-&gt;Type<sp/>==<sp/>MLDoubleT)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__double__t" kindref="compound">ml_double_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLIntegerT))<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLDoubleT))<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__double__t" kindref="compound">ml_double_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">ML_METHOD(MLDoubleT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(ml_integer_value_fast(Args[0]));</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal">ML_METHOD(MLIntegerT,<sp/>MLDoubleT)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">//&lt;Real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>:mini:`Real`<sp/>to<sp/>an<sp/>integer<sp/>(using<sp/>default<sp/>rounding).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(ml_double_value_fast(Args[0]));</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_arith_method_integer(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="443"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLIntegerT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="444"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="445"><highlight class="comment">//&gt;integer</highlight></codeline>
<codeline lineno="446"><highlight class="comment">//<sp/>Returns<sp/>:mini:`NAMEA`.</highlight></codeline>
<codeline lineno="447"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="448"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerA<sp/>=<sp/>ml_integer_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="449"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ml_integer(SYMBOL(IntegerA));<sp/>\</highlight></codeline>
<codeline lineno="450"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_arith_method_integer_integer(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="453"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="454"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="455"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="456"><highlight class="comment">//&gt;integer</highlight></codeline>
<codeline lineno="457"><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>NAME<sp/>B`.</highlight></codeline>
<codeline lineno="458"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="459"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerA<sp/>=<sp/>ml_integer_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="460"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerB<sp/>=<sp/>ml_integer_value_fast(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="461"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ml_integer(IntegerA<sp/>SYMBOL<sp/>IntegerB);<sp/>\</highlight></codeline>
<codeline lineno="462"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_arith_method_integer_integer_bitwise(NAME,<sp/>SYMBOL,<sp/>OP)<sp/>\</highlight></codeline>
<codeline lineno="465"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="466"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="467"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="468"><highlight class="comment">//&gt;integer</highlight></codeline>
<codeline lineno="469"><highlight class="comment">//<sp/>Returns<sp/>the<sp/>bitwise<sp/>OP<sp/>of<sp/>:mini:`A`<sp/>and<sp/>:mini:`B`.</highlight></codeline>
<codeline lineno="470"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="471"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerA<sp/>=<sp/>ml_integer_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="472"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerB<sp/>=<sp/>ml_integer_value_fast(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="473"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ml_integer(IntegerA<sp/>SYMBOL<sp/>IntegerB);<sp/>\</highlight></codeline>
<codeline lineno="474"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_arith_method_real(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="477"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLDoubleT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="478"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="479"><highlight class="comment">//&gt;real</highlight></codeline>
<codeline lineno="480"><highlight class="comment">//<sp/>Returns<sp/>:mini:`NAMEA`.</highlight></codeline>
<codeline lineno="481"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="482"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>RealA<sp/>=<sp/>ml_double_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="483"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ml_real(SYMBOL(RealA));<sp/>\</highlight></codeline>
<codeline lineno="484"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_arith_method_real_real(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="487"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLDoubleT,<sp/>MLDoubleT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="488"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="489"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="490"><highlight class="comment">//&gt;real</highlight></codeline>
<codeline lineno="491"><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>NAME<sp/>B`.</highlight></codeline>
<codeline lineno="492"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="493"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>RealA<sp/>=<sp/>ml_double_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="494"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>RealB<sp/>=<sp/>ml_double_value_fast(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="495"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ml_real(RealA<sp/>SYMBOL<sp/>RealB);<sp/>\</highlight></codeline>
<codeline lineno="496"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_arith_method_real_integer(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="499"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLDoubleT,<sp/>MLIntegerT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="500"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="501"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="502"><highlight class="comment">//&gt;real</highlight></codeline>
<codeline lineno="503"><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>NAME<sp/>B`.</highlight></codeline>
<codeline lineno="504"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="505"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>RealA<sp/>=<sp/>ml_double_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="506"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerB<sp/>=<sp/>ml_integer_value_fast(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="507"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ml_real(RealA<sp/>SYMBOL<sp/>IntegerB);<sp/>\</highlight></codeline>
<codeline lineno="508"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_arith_method_integer_real(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="511"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLIntegerT,<sp/>MLDoubleT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="512"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="513"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="514"><highlight class="comment">//&gt;real</highlight></codeline>
<codeline lineno="515"><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>NAME<sp/>B`.</highlight></codeline>
<codeline lineno="516"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="517"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerA<sp/>=<sp/>ml_integer_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="518"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>RealB<sp/>=<sp/>ml_double_value_fast(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="519"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ml_real(IntegerA<sp/>SYMBOL<sp/>RealB);<sp/>\</highlight></codeline>
<codeline lineno="520"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_arith_method_number(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="525"><highlight class="preprocessor">ml_arith_method_integer(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="526"><highlight class="preprocessor">ml_arith_method_real(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="527"><highlight class="preprocessor">ml_arith_method_complex(NAME,<sp/>SYMBOL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_arith_method_number_number(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="530"><highlight class="preprocessor">ml_arith_method_integer_integer(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="531"><highlight class="preprocessor">ml_arith_method_real_real(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="532"><highlight class="preprocessor">ml_arith_method_real_integer(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="533"><highlight class="preprocessor">ml_arith_method_integer_real(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="534"><highlight class="preprocessor">ml_arith_method_complex_complex(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="535"><highlight class="preprocessor">ml_arith_method_complex_real(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="536"><highlight class="preprocessor">ml_arith_method_complex_integer(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="537"><highlight class="preprocessor">ml_arith_method_integer_complex(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="538"><highlight class="preprocessor">ml_arith_method_real_complex(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="539"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_arith_method_number(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="543"><highlight class="preprocessor">ml_arith_method_integer(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="544"><highlight class="preprocessor">ml_arith_method_real(NAME,<sp/>SYMBOL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_arith_method_number_number(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="547"><highlight class="preprocessor">ml_arith_method_integer_integer(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="548"><highlight class="preprocessor">ml_arith_method_real_real(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="549"><highlight class="preprocessor">ml_arith_method_real_integer(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="550"><highlight class="preprocessor">ml_arith_method_integer_real(NAME,<sp/>SYMBOL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal">ml_arith_method_number(-,<sp/>-)</highlight></codeline>
<codeline lineno="555"><highlight class="normal">ml_arith_method_number_number(+,<sp/>+)</highlight></codeline>
<codeline lineno="556"><highlight class="normal">ml_arith_method_number_number(-,<sp/>-)</highlight></codeline>
<codeline lineno="557"><highlight class="normal">ml_arith_method_number_number(*,<sp/>*)</highlight></codeline>
<codeline lineno="558"><highlight class="normal">ml_arith_method_integer(~,<sp/>~);</highlight></codeline>
<codeline lineno="559"><highlight class="normal">ml_arith_method_integer_integer_bitwise(/\\,<sp/>&amp;,<sp/>and);</highlight></codeline>
<codeline lineno="560"><highlight class="normal">ml_arith_method_integer_integer_bitwise(\\/,<sp/>|,<sp/>or);</highlight></codeline>
<codeline lineno="561"><highlight class="normal">ml_arith_method_integer_integer_bitwise(&gt;&lt;,<sp/>^,<sp/>xor);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal">ML_METHOD(&quot;&lt;&lt;&quot;,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>&lt;&lt;<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerA<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerB<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerC;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntegerB<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IntegerC<sp/>=<sp/>IntegerA<sp/>&lt;&lt;<sp/>IntegerB;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntegerB<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntegerA<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IntegerC<sp/>=<sp/>-(-IntegerA<sp/>&gt;&gt;<sp/>-IntegerB);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IntegerC<sp/>=<sp/>IntegerA<sp/>&gt;&gt;<sp/>-IntegerB;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IntegerC<sp/>=<sp/>IntegerA;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(IntegerC);</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&gt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`A<sp/>&gt;&gt;<sp/>B`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerA<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerB<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerC;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntegerB<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntegerA<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IntegerC<sp/>=<sp/>-(-IntegerA<sp/>&gt;&gt;<sp/>IntegerB);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IntegerC<sp/>=<sp/>IntegerA<sp/>&gt;&gt;<sp/>IntegerB;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntegerB<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IntegerC<sp/>=<sp/>IntegerA<sp/>&lt;&lt;<sp/>-IntegerB;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IntegerC<sp/>=<sp/>IntegerA;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(IntegerC);</highlight></codeline>
<codeline lineno="605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;++&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Int<sp/>+<sp/>1`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(ml_integer_value_fast(Args[0])<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Int<sp/>-<sp/>1`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(ml_integer_value_fast(Args[0])<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal">ML_METHODZ(</highlight><highlight class="stringliteral">&quot;inc&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">//&lt;X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Atomic<sp/>equivalent<sp/>to<sp/>:mini:`X<sp/>:=<sp/>old<sp/>+<sp/>1`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value<sp/>=<sp/>ml_integer_value(ml_deref(Args[0]));</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_assign(Caller,<sp/>Args[0],<sp/>ml_integer(Value<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal">ML_METHODZ(</highlight><highlight class="stringliteral">&quot;dec&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="comment">//&lt;X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Atomic<sp/>equivalent<sp/>to<sp/>:mini:`X<sp/>:=<sp/>old<sp/>-<sp/>1`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value<sp/>=<sp/>ml_integer_value(ml_deref(Args[0]));</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_assign(Caller,<sp/>Args[0],<sp/>ml_integer(Value<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal">ML_METHODZ(</highlight><highlight class="stringliteral">&quot;inc&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="comment">//&lt;X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">//&lt;Y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Atomic<sp/>equivalent<sp/>to<sp/>:mini:`X<sp/>:=<sp/>old<sp/>+<sp/>Y`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value<sp/>=<sp/>ml_integer_value(ml_deref(Args[0]));</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Amount<sp/>=<sp/>ml_integer_value(ml_deref(Args[1]));</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_assign(Caller,<sp/>Args[0],<sp/>ml_integer(Value<sp/>+<sp/>Amount));</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal">ML_METHODZ(</highlight><highlight class="stringliteral">&quot;dec&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="comment">//&lt;X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="comment">//&lt;Y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Atomic<sp/>equivalent<sp/>to<sp/>:mini:`X<sp/>:=<sp/>old<sp/>-<sp/>Y`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value<sp/>=<sp/>ml_integer_value(ml_deref(Args[0]));</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Amount<sp/>=<sp/>ml_integer_value(ml_deref(Args[1]));</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_assign(Caller,<sp/>Args[0],<sp/>ml_integer(Value<sp/>-<sp/>Amount));</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;++&quot;</highlight><highlight class="normal">,<sp/>MLDoubleT)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment">//&lt;Real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Real<sp/>+<sp/>1`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(ml_double_value_fast(Args[0])<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">,<sp/>MLDoubleT)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="comment">//&lt;Real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Real<sp/>-<sp/>1`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(ml_double_value_fast(Args[0])<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal">ml_arith_method_real_real(/,<sp/>/)</highlight></codeline>
<codeline lineno="672"><highlight class="normal">ml_arith_method_real_integer(/,<sp/>/)</highlight></codeline>
<codeline lineno="673"><highlight class="normal">ml_arith_method_integer_real(/,<sp/>/)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_COMPLEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal">ml_arith_method_complex_complex(/,<sp/>/)</highlight></codeline>
<codeline lineno="678"><highlight class="normal">ml_arith_method_complex_integer(/,<sp/>/)</highlight></codeline>
<codeline lineno="679"><highlight class="normal">ml_arith_method_integer_complex(/,<sp/>/)</highlight></codeline>
<codeline lineno="680"><highlight class="normal">ml_arith_method_complex_real(/,<sp/>/)</highlight></codeline>
<codeline lineno="681"><highlight class="normal">ml_arith_method_real_complex(/,<sp/>/)</highlight></codeline>
<codeline lineno="682"><highlight class="normal">ml_arith_method_complex(~,<sp/>~);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer<sp/>|<sp/>real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Int/1<sp/>/<sp/>Int/2`<sp/>as<sp/>an<sp/>integer<sp/>if<sp/>the<sp/>division<sp/>is<sp/>exact,<sp/>otherwise<sp/>as<sp/>a<sp/>real.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>N<sp/>:=<sp/>10<sp/>/<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>type(N)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>R<sp/>:=<sp/>10<sp/>/<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>type(R)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerA<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerB<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IntegerB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntegerA<sp/>%<sp/>IntegerB<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(IntegerA<sp/>/<sp/>IntegerB);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)IntegerA<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)IntegerB);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>remainder<sp/>of<sp/>:mini:`Int/1`<sp/>divided<sp/>by<sp/>:mini:`Int/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>the<sp/>result<sp/>is<sp/>calculated<sp/>by<sp/>rounding<sp/>towards<sp/>0.<sp/>In<sp/>particular,<sp/>if<sp/>:mini:`Int/1`<sp/>is<sp/>negative,<sp/>the<sp/>result<sp/>will<sp/>be<sp/>negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>a<sp/>nonnegative<sp/>remainder,<sp/>use<sp/>:mini:`Int/1<sp/>mod<sp/>Int/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerA<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerB<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IntegerB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(IntegerA<sp/>%<sp/>IntegerB);</highlight></codeline>
<codeline lineno="716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Int/2`<sp/>if<sp/>it<sp/>is<sp/>divisible<sp/>by<sp/>:mini:`Int/1`<sp/>and<sp/>:mini:`nil`<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerA<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerB<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IntegerA)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(IntegerB<sp/>%<sp/>IntegerA)<sp/>?<sp/>MLNil<sp/>:<sp/>Args[1];</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;!|&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Int/2`<sp/>if<sp/>it<sp/>is<sp/>not<sp/>divisible<sp/>by<sp/>:mini:`Int/1`<sp/>and<sp/>:mini:`nil`<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerA<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerB<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IntegerA)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(IntegerB<sp/>%<sp/>IntegerA)<sp/>?<sp/>Args[1]<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;div&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>quotient<sp/>of<sp/>:mini:`Int/1`<sp/>divided<sp/>by<sp/>:mini:`Int/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>result<sp/>is<sp/>calculated<sp/>by<sp/>rounding<sp/>down<sp/>in<sp/>all<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerA<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerB<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IntegerB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>A<sp/>=<sp/>IntegerA;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>B<sp/>=<sp/>IntegerB;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Q<sp/>=<sp/>A<sp/>/<sp/>B;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>B<sp/>*<sp/>Q<sp/>!=<sp/>A)<sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(B<sp/>&lt;<sp/>0)<sp/>++Q;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>--Q;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Q);</highlight></codeline>
<codeline lineno="756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;mod&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>remainder<sp/>of<sp/>:mini:`Int/1`<sp/>divided<sp/>by<sp/>:mini:`Int/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>the<sp/>result<sp/>is<sp/>calculated<sp/>by<sp/>rounding<sp/>down<sp/>in<sp/>all<sp/>cases.<sp/>In<sp/>particular,<sp/>the<sp/>result<sp/>is<sp/>always<sp/>nonnegative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerA<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerB<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IntegerB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>A<sp/>=<sp/>IntegerA;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>B<sp/>=<sp/>IntegerB;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>R<sp/>=<sp/>A<sp/>%<sp/>B;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(R<sp/>&lt;<sp/>0)<sp/>R<sp/>+=<sp/>labs(B);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(R);</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;bsf&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>index<sp/>of<sp/>the<sp/>least<sp/>significant<sp/>1-bit<sp/>of<sp/>:mini:`A`,<sp/>or<sp/>:mini:`0`<sp/>if<sp/>:mini:`A<sp/>=<sp/>0`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>16:bsf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>10:bsf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>0:bsf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>A<sp/>=<sp/>(uint64_t)ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(__builtin_ffsl(A));</highlight></codeline>
<codeline lineno="783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;bsr&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>index<sp/>of<sp/>the<sp/>most<sp/>significant<sp/>1-bit<sp/>of<sp/>:mini:`A`,<sp/>or<sp/>:mini:`0`<sp/>if<sp/>:mini:`A<sp/>=<sp/>0`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>16:bsr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>10:bsr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>0:bsr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>A<sp/>=<sp/>(uint64_t)ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(A<sp/>?<sp/>64<sp/>-<sp/>__builtin_clzl(A)<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_comp_method_integer_integer(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="797"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="798"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="799"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="800"><highlight class="comment">//&gt;integer</highlight></codeline>
<codeline lineno="801"><highlight class="comment">//<sp/>Returns<sp/>:mini:`B`<sp/>if<sp/>:mini:`A<sp/>NAME<sp/>B`,<sp/>otherwise<sp/>returns<sp/>:mini:`nil`.</highlight></codeline>
<codeline lineno="802"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="803"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerA<sp/>=<sp/>ml_integer_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="804"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerB<sp/>=<sp/>ml_integer_value_fast(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="805"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>IntegerA<sp/>SYMBOL<sp/>IntegerB<sp/>?<sp/>Args[1]<sp/>:<sp/>MLNil;<sp/>\</highlight></codeline>
<codeline lineno="806"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_comp_method_real_real(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="809"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLDoubleT,<sp/>MLDoubleT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="810"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="811"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="812"><highlight class="comment">//&gt;real</highlight></codeline>
<codeline lineno="813"><highlight class="comment">//<sp/>Returns<sp/>:mini:`B`<sp/>if<sp/>:mini:`A<sp/>NAME<sp/>B`,<sp/>otherwise<sp/>returns<sp/>:mini:`nil`.</highlight></codeline>
<codeline lineno="814"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="815"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>RealA<sp/>=<sp/>ml_double_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="816"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>RealB<sp/>=<sp/>ml_double_value_fast(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="817"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>RealA<sp/>SYMBOL<sp/>RealB<sp/>?<sp/>Args[1]<sp/>:<sp/>MLNil;<sp/>\</highlight></codeline>
<codeline lineno="818"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_comp_method_real_integer(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="821"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLDoubleT,<sp/>MLIntegerT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="822"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="823"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="824"><highlight class="comment">//&gt;real</highlight></codeline>
<codeline lineno="825"><highlight class="comment">//<sp/>Returns<sp/>:mini:`B`<sp/>if<sp/>:mini:`A<sp/>NAME<sp/>B`,<sp/>otherwise<sp/>returns<sp/>:mini:`nil`.</highlight></codeline>
<codeline lineno="826"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="827"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>RealA<sp/>=<sp/>ml_double_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="828"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerB<sp/>=<sp/>ml_integer_value_fast(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="829"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>RealA<sp/>SYMBOL<sp/>IntegerB<sp/>?<sp/>Args[1]<sp/>:<sp/>MLNil;<sp/>\</highlight></codeline>
<codeline lineno="830"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_comp_method_integer_real(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="833"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLIntegerT,<sp/>MLDoubleT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="834"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="835"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="836"><highlight class="comment">//&gt;real</highlight></codeline>
<codeline lineno="837"><highlight class="comment">//<sp/>Returns<sp/>:mini:`B`<sp/>if<sp/>:mini:`A<sp/>NAME<sp/>B`,<sp/>otherwise<sp/>returns<sp/>:mini:`nil`.</highlight></codeline>
<codeline lineno="838"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="839"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerA<sp/>=<sp/>ml_integer_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="840"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>RealB<sp/>=<sp/>ml_double_value_fast(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="841"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>IntegerA<sp/>SYMBOL<sp/>RealB<sp/>?<sp/>Args[1]<sp/>:<sp/>MLNil;<sp/>\</highlight></codeline>
<codeline lineno="842"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_comp_method_number_number(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="845"><highlight class="preprocessor">ml_comp_method_integer_integer(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="846"><highlight class="preprocessor">ml_comp_method_real_real(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="847"><highlight class="preprocessor">ml_comp_method_real_integer(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="848"><highlight class="preprocessor">ml_comp_method_integer_real(NAME,<sp/>SYMBOL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal">ml_comp_method_number_number(=,<sp/>==)</highlight></codeline>
<codeline lineno="851"><highlight class="normal">ml_comp_method_number_number(!=,<sp/>!=)</highlight></codeline>
<codeline lineno="852"><highlight class="normal">ml_comp_method_number_number(&lt;,<sp/>&lt;)</highlight></codeline>
<codeline lineno="853"><highlight class="normal">ml_comp_method_number_number(&gt;,<sp/>&gt;)</highlight></codeline>
<codeline lineno="854"><highlight class="normal">ml_comp_method_number_number(&lt;=,<sp/>&lt;=)</highlight></codeline>
<codeline lineno="855"><highlight class="normal">ml_comp_method_number_number(&gt;=,<sp/>&gt;=)</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_select_method_integer_integer(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="858"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="859"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="860"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="861"><highlight class="comment">//&gt;integer</highlight></codeline>
<codeline lineno="862"><highlight class="comment">//<sp/>Returns<sp/>:mini:`NAME(A,<sp/>B)`.</highlight></codeline>
<codeline lineno="863"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="864"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerA<sp/>=<sp/>ml_integer_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="865"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerB<sp/>=<sp/>ml_integer_value_fast(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="866"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>IntegerA<sp/>SYMBOL<sp/>IntegerB<sp/>?<sp/>Args[0]<sp/>:<sp/>Args[1];<sp/>\</highlight></codeline>
<codeline lineno="867"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_select_method_real_real(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="870"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLDoubleT,<sp/>MLDoubleT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="871"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="872"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="873"><highlight class="comment">//&gt;real</highlight></codeline>
<codeline lineno="874"><highlight class="comment">//<sp/>Returns<sp/>:mini:`NAME(A,<sp/>B)`.</highlight></codeline>
<codeline lineno="875"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="876"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>RealA<sp/>=<sp/>ml_double_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="877"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>RealB<sp/>=<sp/>ml_double_value_fast(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="878"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>RealA<sp/>SYMBOL<sp/>RealB<sp/>?<sp/>Args[0]<sp/>:<sp/>Args[1];<sp/>\</highlight></codeline>
<codeline lineno="879"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_select_method_real_integer(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="882"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLDoubleT,<sp/>MLIntegerT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="883"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="884"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="885"><highlight class="comment">//&gt;real</highlight></codeline>
<codeline lineno="886"><highlight class="comment">//<sp/>Returns<sp/>:mini:`NAME(A,<sp/>B)`.</highlight></codeline>
<codeline lineno="887"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="888"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>RealA<sp/>=<sp/>ml_double_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="889"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerB<sp/>=<sp/>ml_integer_value_fast(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="890"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>RealA<sp/>SYMBOL<sp/>IntegerB<sp/>?<sp/>Args[0]<sp/>:<sp/>Args[1];<sp/>\</highlight></codeline>
<codeline lineno="891"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_select_method_integer_real(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="894"><highlight class="preprocessor">ML_METHOD(#NAME,<sp/>MLIntegerT,<sp/>MLDoubleT)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="895"><highlight class="preprocessor"></highlight><highlight class="comment">/*&lt;A</highlight></codeline>
<codeline lineno="896"><highlight class="comment">//&lt;B</highlight></codeline>
<codeline lineno="897"><highlight class="comment">//&gt;real</highlight></codeline>
<codeline lineno="898"><highlight class="comment">//<sp/>Returns<sp/>:mini:`NAME(A,<sp/>B)`.</highlight></codeline>
<codeline lineno="899"><highlight class="comment">*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="900"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerA<sp/>=<sp/>ml_integer_value_fast(Args[0]);<sp/>\</highlight></codeline>
<codeline lineno="901"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>double<sp/>RealB<sp/>=<sp/>ml_double_value_fast(Args[1]);<sp/>\</highlight></codeline>
<codeline lineno="902"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>IntegerA<sp/>SYMBOL<sp/>RealB<sp/>?<sp/>Args[0]<sp/>:<sp/>Args[1];<sp/>\</highlight></codeline>
<codeline lineno="903"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ml_select_method_number_number(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="906"><highlight class="preprocessor">ml_select_method_integer_integer(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="907"><highlight class="preprocessor">ml_select_method_real_real(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="908"><highlight class="preprocessor">ml_select_method_real_integer(NAME,<sp/>SYMBOL)<sp/>\</highlight></codeline>
<codeline lineno="909"><highlight class="preprocessor">ml_select_method_integer_real(NAME,<sp/>SYMBOL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal">ml_select_method_number_number(min,<sp/>&lt;);</highlight></codeline>
<codeline lineno="912"><highlight class="normal">ml_select_method_number_number(max,<sp/>&gt;);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_NANBOXING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NegOne<sp/>ml_int32(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>One<sp/>ml_int32(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Zero<sp/>ml_int32(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>One[1]<sp/>=<sp/>{{MLIntegerT,<sp/>1}};</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>NegOne[1]<sp/>=<sp/>{{MLIntegerT,<sp/>-1}};</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>Zero[1]<sp/>=<sp/>{{MLIntegerT,<sp/>0}};</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`-1`,<sp/>:mini:`0`<sp/>or<sp/>:mini:`1`<sp/>depending<sp/>on<sp/>whether<sp/>:mini:`Int/1`<sp/>is<sp/>less<sp/>than,<sp/>equal<sp/>to<sp/>or<sp/>greater<sp/>than<sp/>:mini:`Int/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerA<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerB<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntegerA<sp/>&lt;<sp/>IntegerB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)NegOne;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntegerA<sp/>&gt;<sp/>IntegerB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)One;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Zero;</highlight></codeline>
<codeline lineno="938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLDoubleT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="comment">//&lt;Real/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`-1`,<sp/>:mini:`0`<sp/>or<sp/>:mini:`1`<sp/>depending<sp/>on<sp/>whether<sp/>:mini:`Real/1`<sp/>is<sp/>less<sp/>than,<sp/>equal<sp/>to<sp/>or<sp/>greater<sp/>than<sp/>:mini:`Int/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RealA<sp/>=<sp/>ml_double_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerB<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RealA<sp/>&lt;<sp/>IntegerB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)NegOne;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RealA<sp/>&gt;<sp/>IntegerB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)One;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Zero;</highlight></codeline>
<codeline lineno="950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLDoubleT)<sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="comment">//&lt;Real/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`-1`,<sp/>:mini:`0`<sp/>or<sp/>:mini:`1`<sp/>depending<sp/>on<sp/>whether<sp/>:mini:`Int/1`<sp/>is<sp/>less<sp/>than,<sp/>equal<sp/>to<sp/>or<sp/>greater<sp/>than<sp/>:mini:`Real/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>IntegerA<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RealB<sp/>=<sp/>ml_double_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntegerA<sp/>&lt;<sp/>RealB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)NegOne;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntegerA<sp/>&gt;<sp/>RealB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)One;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Zero;</highlight></codeline>
<codeline lineno="962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLDoubleT,<sp/>MLDoubleT)<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment">//&lt;Real/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="comment">//&lt;Real/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`-1`,<sp/>:mini:`0`<sp/>or<sp/>:mini:`1`<sp/>depending<sp/>on<sp/>whether<sp/>:mini:`Real/1`<sp/>is<sp/>less<sp/>than,<sp/>equal<sp/>to<sp/>or<sp/>greater<sp/>than<sp/>:mini:`Real/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RealA<sp/>=<sp/>ml_double_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RealB<sp/>=<sp/>ml_double_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RealA<sp/>&lt;<sp/>RealB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)NegOne;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RealA<sp/>&gt;<sp/>RealB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)One;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Zero;</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;div&quot;</highlight><highlight class="normal">,<sp/>MLRealT,<sp/>MLRealT)<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="comment">//&lt;Real/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="comment">//&lt;Real/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>quotient<sp/>of<sp/>:mini:`Real/1`<sp/>divided<sp/>by<sp/>:mini:`Real/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>result<sp/>is<sp/>calculated<sp/>by<sp/>rounding<sp/>down<sp/>in<sp/>all<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RealA<sp/>=<sp/>ml_real_value(Args[0]);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RealB<sp/>=<sp/>ml_real_value(Args[1]);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(RealB)<sp/>&lt;<sp/>DBL_EPSILON)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(floor(RealA<sp/>/<sp/>RealB));</highlight></codeline>
<codeline lineno="986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;mod&quot;</highlight><highlight class="normal">,<sp/>MLRealT,<sp/>MLRealT)<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="comment">//&lt;Int/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>remainder<sp/>of<sp/>:mini:`Int/1`<sp/>divided<sp/>by<sp/>:mini:`Int/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>the<sp/>result<sp/>is<sp/>calculated<sp/>by<sp/>rounding<sp/>down<sp/>in<sp/>all<sp/>cases.<sp/>In<sp/>particular,<sp/>the<sp/>result<sp/>is<sp/>always<sp/>nonnegative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RealA<sp/>=<sp/>ml_real_value(Args[0]);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RealB<sp/>=<sp/>ml_real_value(Args[1]);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(RealB)<sp/>&lt;<sp/>DBL_EPSILON)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(RealA<sp/>-<sp/>floor(RealA<sp/>/<sp/>RealB)<sp/>*<sp/>RealB);</highlight></codeline>
<codeline lineno="998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal">,<sp/>MLRealT,<sp/>MLRealT)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="comment">//&lt;Real/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="comment">//&lt;Real/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>remainder<sp/>of<sp/>:mini:`Real/1`<sp/>divided<sp/>by<sp/>:mini:`Real/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>the<sp/>result<sp/>is<sp/>calculated<sp/>by<sp/>rounding<sp/>towards<sp/>0.<sp/>In<sp/>particular,<sp/>if<sp/>:mini:`Real/1`<sp/>is<sp/>negative,<sp/>the<sp/>result<sp/>will<sp/>be<sp/>negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>a<sp/>nonnegative<sp/>remainder,<sp/>use<sp/>:mini:`Real/1<sp/>mod<sp/>Real/2`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RealA<sp/>=<sp/>ml_real_value(Args[0]);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RealB<sp/>=<sp/>ml_real_value(Args[1]);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(RealB)<sp/>&lt;<sp/>DBL_EPSILON)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Q<sp/>=<sp/>RealA<sp/>/<sp/>RealB;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>D<sp/>=<sp/>Q<sp/>&lt;<sp/>0<sp/>?<sp/>ceil(Q)<sp/>:<sp/>floor(Q);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(RealA<sp/>-<sp/>D<sp/>*<sp/>RealB);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;isfinite&quot;</highlight><highlight class="normal">,<sp/>MLDoubleT)<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="comment">//&lt;Number:number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="comment">//&gt;number|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Number`<sp/>if<sp/>it<sp/>is<sp/>finite<sp/>(neither<sp/>|plusmn|\<sp/>|infin|<sp/>nor<sp/>``NaN``),<sp/>otherwise<sp/>returns<sp/>:mini:`nil`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X<sp/>=<sp/>ml_double_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isfinite(X))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;isnan&quot;</highlight><highlight class="normal">,<sp/>MLDoubleT)<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="comment">//&lt;Number:number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="comment">//&gt;number|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>:mini:`Number`<sp/>if<sp/>it<sp/>is<sp/>``NaN``,<sp/>otherwise<sp/>returns<sp/>:mini:`Number`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X<sp/>=<sp/>ml_double_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isnan(X))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal">ML_FUNCTION(RandomInteger)<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="comment">//@integer::random</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="comment">//&lt;Min?:number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="comment">//&lt;Max?:number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>random<sp/>integer<sp/>between<sp/>:mini:`Min`<sp/>and<sp/>:mini:`Max`<sp/>(where<sp/>:mini:`Max`<sp/>:math:`\leq<sp/>2^{32}<sp/>-<sp/>1`).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>omitted,<sp/>:mini:`Min`<sp/>defaults<sp/>to<sp/>:mini:`0`<sp/>and<sp/>:mini:`Max`<sp/>defaults<sp/>to<sp/>:math:`2^{32}<sp/>-<sp/>1`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLRealT);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLRealT);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Base<sp/>=<sp/>ml_integer_value(Args[0]);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Limit<sp/>=<sp/>ml_integer_value(Args[1])<sp/>+<sp/>1<sp/>-<sp/>Base;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Limit<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Divisor<sp/>=<sp/>RAND_MAX<sp/>/<sp/>Limit;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Random;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>Random<sp/>=<sp/>random()<sp/>/<sp/>Divisor;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Random<sp/>&gt;=<sp/>Limit);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Base<sp/>+<sp/>Random);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLRealT);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Limit<sp/>=<sp/>ml_integer_value(Args[0]);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Limit<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Divisor<sp/>=<sp/>RAND_MAX<sp/>/<sp/>Limit;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Random;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>Random<sp/>=<sp/>random()<sp/>/<sp/>Divisor;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Random<sp/>&gt;=<sp/>Limit);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Random<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(random());</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal">ML_FUNCTION(RandomPermutation)<sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="comment">//@integer::random_permutation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="comment">//&lt;Max:number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="comment">//&gt;list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>random<sp/>permutation<sp/>of<sp/>:mini:`1,<sp/>...,<sp/>Max`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Limit<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Limit<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Permutation<sp/>requires<sp/>positive<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Permutation<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(Permutation,<sp/>ml_integer(1));</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>2;<sp/>I<sp/>&lt;=<sp/>Limit;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Divisor<sp/>=<sp/>RAND_MAX<sp/>/<sp/>I,<sp/>J;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>random()<sp/>/<sp/>Divisor;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(J<sp/>&gt;=<sp/>I);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++J;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(J<sp/>==<sp/>I)<sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Permutation,<sp/>ml_integer(I));</highlight></codeline>
<codeline lineno="1079" refid="structml__constant__iter__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Old<sp/>=<sp/>ml_list_get(Permutation,<sp/>J);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_set(Permutation,<sp/>J,<sp/>ml_integer(I));</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Permutation,<sp/>Old);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Permutation;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal">ML_FUNCTION(RandomCycle)<sp/>{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="comment">//@integer::random_cycle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="comment">//&lt;Max:number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="comment">//&gt;list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>random<sp/>cyclic<sp/>permutation<sp/>(no<sp/>sub-cycles)<sp/>of<sp/>:mini:`1,<sp/>...,<sp/>Max`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Limit<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Limit<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Permutation<sp/>requires<sp/>positive<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Permutation<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(Permutation,<sp/>ml_integer(1));</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Limit<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Permutation;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_push(Permutation,<sp/>ml_integer(2));</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>2;<sp/>I<sp/>&lt;<sp/>Limit;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1101" refid="structml__integer__iter__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Divisor<sp/>=<sp/>RAND_MAX<sp/>/<sp/>I,<sp/>J;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>random()<sp/>/<sp/>Divisor;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(J<sp/>&gt;=<sp/>I);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++J;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Old<sp/>=<sp/>ml_list_get(Permutation,<sp/>J);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_set(Permutation,<sp/>J,<sp/>ml_integer(I<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Permutation,<sp/>Old);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Permutation;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal">ML_FUNCTION(RandomReal)<sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="comment">//@real::random</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="comment">//&lt;Min?:number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment">//&lt;Max?:number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>random<sp/>real<sp/>between<sp/>:mini:`Min`<sp/>and<sp/>:mini:`Max`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>omitted,<sp/>:mini:`Min`<sp/>defaults<sp/>to<sp/>:mini:`0`<sp/>and<sp/>:mini:`Max`<sp/>defaults<sp/>to<sp/>:mini:`1`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLRealT);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLRealT);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Base<sp/>=<sp/>ml_real_value(Args[0]);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Limit<sp/>=<sp/>ml_real_value(Args[1])<sp/>-<sp/>Base;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Limit<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Scale<sp/>=<sp/>Limit<sp/>/<sp/>(double)RAND_MAX;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Base<sp/>+<sp/>random()<sp/>*<sp/>Scale);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Limit<sp/>=<sp/>ml_real_value(Args[0]);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Limit<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Scale<sp/>=<sp/>Limit<sp/>/<sp/>(double)RAND_MAX;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(random()<sp/>*<sp/>Scale);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(random()<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)RAND_MAX);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal">}<sp/><ref refid="structml__constant__iter__t" kindref="compound">ml_constant_iter_t</ref>;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal">ML_TYPE(MLConstantIterT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;constant-iter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLConstantIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__constant__iter__t" kindref="compound">ml_constant_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLConstantIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__constant__iter__t" kindref="compound">ml_constant_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>++Iter-&gt;Index;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLConstantIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__constant__iter__t" kindref="compound">ml_constant_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Iter-&gt;Index));</highlight></codeline>
<codeline lineno="1157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Current,<sp/>Step,<sp/>Limit;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal">}<sp/><ref refid="structml__integer__iter__t" kindref="compound">ml_integer_iter_t</ref>;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal">ML_TYPE(MLIntegerUpIterT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;integer-iter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLIntegerUpIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__integer__iter__t" kindref="compound">ml_integer_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Iter-&gt;Current));</highlight></codeline>
<codeline lineno="1170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLIntegerUpIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__integer__iter__t" kindref="compound">ml_integer_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Current<sp/>+=<sp/>Iter-&gt;Step;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter-&gt;Current<sp/>&gt;<sp/>Iter-&gt;Limit)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>++Iter-&gt;Index;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLIntegerUpIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__integer__iter__t" kindref="compound">ml_integer_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Iter-&gt;Index));</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal">ML_TYPE(MLIntegerDownIterT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;integer-iter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLIntegerDownIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__integer__iter__t" kindref="compound">ml_integer_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Iter-&gt;Current));</highlight></codeline>
<codeline lineno="1188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLIntegerDownIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__integer__iter__t" kindref="compound">ml_integer_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Current<sp/>+=<sp/>Iter-&gt;Step;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter-&gt;Current<sp/>&lt;<sp/>Iter-&gt;Limit)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>++Iter-&gt;Index;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLIntegerDownIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__integer__iter__t" kindref="compound">ml_integer_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Iter-&gt;Index));</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal">ML_TYPE(MLIntegerRangeT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;integer-range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLIntegerRangeT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&gt;<sp/>Range-&gt;Limit)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__integer__iter__t" kindref="compound">ml_integer_iter_t</ref><sp/>*Iter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__integer__iter__t" kindref="compound">ml_integer_iter_t</ref>);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Type<sp/>=<sp/>MLIntegerUpIterT;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Current<sp/>=<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Limit<sp/>=<sp/>Range-&gt;Limit;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Step<sp/>=<sp/>Range-&gt;Step;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&lt;<sp/>Range-&gt;Limit)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__integer__iter__t" kindref="compound">ml_integer_iter_t</ref><sp/>*Iter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__integer__iter__t" kindref="compound">ml_integer_iter_t</ref>);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Type<sp/>=<sp/>MLIntegerDownIterT;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Current<sp/>=<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Limit<sp/>=<sp/>Range-&gt;Limit;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Step<sp/>=<sp/>Range-&gt;Step;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__constant__iter__t" kindref="compound">ml_constant_iter_t</ref><sp/>*Iter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__constant__iter__t" kindref="compound">ml_constant_iter_t</ref>);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Type<sp/>=<sp/>MLConstantIterT;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Value<sp/>=<sp/>ml_integer(Range-&gt;Start);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1235"><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight><highlight class="comment">//&lt;Limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>range<sp/>from<sp/>:mini:`Start`<sp/>to<sp/>:mini:`Limit`<sp/>(inclusive).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref>);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLIntegerRangeT;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;..&lt;&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="comment">//&lt;Limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>range<sp/>from<sp/>:mini:`Start`<sp/>to<sp/>:mini:`Limit`<sp/>(exclusive).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref>);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLIntegerRangeT;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>ml_integer_value_fast(Args[1])<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight><highlight class="comment">//&lt;Limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="comment">//&lt;Step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>range<sp/>from<sp/>:mini:`Start`<sp/>to<sp/>:mini:`Limit`<sp/>(inclusive).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref>);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLIntegerRangeT;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>ml_integer_value_fast(Args[2]);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;up&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1278"><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>unlimited<sp/>range<sp/>from<sp/>:mini:`Start`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref>);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLIntegerRangeT;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>LONG_MAX;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;up&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1291"><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="comment">//&lt;Count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>range<sp/>from<sp/>:mini:`Start`<sp/>to<sp/>:mini:`Start<sp/>+<sp/>Count<sp/>-<sp/>1`<sp/>(inclusive).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref>);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLIntegerRangeT;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>Range-&gt;Start<sp/>+<sp/>ml_integer_value_fast(Args[1])<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;by&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1305"><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="comment">//&lt;Step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>unlimited<sp/>range<sp/>from<sp/>:mini:`Start`<sp/>in<sp/>steps<sp/>of<sp/>:mini:`Step`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref>);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLIntegerRangeT;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>LONG_MIN;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>LONG_MAX;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;by&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1325"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="comment">//&lt;Step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>range<sp/>with<sp/>the<sp/>same<sp/>limits<sp/>as<sp/>:mini:`Range`<sp/>but<sp/>with<sp/>step<sp/>:mini:`Step`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range0<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref>);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLIntegerRangeT;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>Range0-&gt;Start;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>Range0-&gt;Limit;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="comment">//&lt;Shift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range0<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Shift<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref>);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLIntegerRangeT;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>Range0-&gt;Start<sp/>+<sp/>Shift;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>Range0-&gt;Limit<sp/>+<sp/>Shift;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>Range0-&gt;Step;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight><highlight class="comment">//&lt;Shift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range0<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Shift<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref>);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLIntegerRangeT;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>Range0-&gt;Start<sp/>-<sp/>Shift;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>Range0-&gt;Limit<sp/>-<sp/>Shift;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>Range0-&gt;Step;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1372"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="comment">//&lt;Scale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range0<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Scale<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref>);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLIntegerRangeT;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>Range0-&gt;Start<sp/>*<sp/>Scale;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>Range0-&gt;Limit<sp/>*<sp/>Scale;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>Range0-&gt;Step<sp/>*<sp/>Scale;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="comment">//&lt;Shift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Shift<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range0<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref>);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLIntegerRangeT;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>Shift<sp/>+<sp/>Range0-&gt;Start;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>Shift<sp/>+<sp/>Range0-&gt;Limit;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>Range0-&gt;Step;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="comment">//&lt;Shift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Shift<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range0<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref>);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLIntegerRangeT;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>Shift<sp/>-<sp/>Range0-&gt;Start;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>Shift<sp/>-<sp/>Range0-&gt;Limit;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>-Range0-&gt;Step;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1420"><highlight class="comment">//&lt;Scale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Scale<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range0<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref>);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLIntegerRangeT;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>Scale<sp/>*<sp/>Range0-&gt;Start;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>Scale<sp/>*<sp/>Range0-&gt;Limit;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>Scale<sp/>*<sp/>Range0-&gt;Step;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT,<sp/>MLIntegerRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1436"><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer::range|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Start<sp/>!=<sp/>B-&gt;Start)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Limit<sp/>!=<sp/>B-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Step<sp/>!=<sp/>B-&gt;Step)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT,<sp/>MLIntegerRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1450"><highlight class="comment">//&lt;A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight><highlight class="comment">//&lt;B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer::range|nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Start<sp/>!=<sp/>B-&gt;Start)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Limit<sp/>!=<sp/>B-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A-&gt;Step<sp/>!=<sp/>B-&gt;Step)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)B;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;precount&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1464"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>values<sp/>in<sp/>:mini:`Range`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&gt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(0);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>Diff<sp/>=<sp/>Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Diff<sp/>/<sp/>Range-&gt;Step<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&lt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(0);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>Diff<sp/>=<sp/>Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Diff<sp/>/<sp/>Range-&gt;Step<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(INFINITY);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;count&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>values<sp/>in<sp/>:mini:`Range`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&gt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(0);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>Diff<sp/>=<sp/>Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Diff<sp/>/<sp/>Range-&gt;Step<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&lt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(0);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>Diff<sp/>=<sp/>Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Diff<sp/>/<sp/>Range-&gt;Step<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(INFINITY);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;start&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1502"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>start<sp/>of<sp/>:mini:`Range`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Range-&gt;Start);</highlight></codeline>
<codeline lineno="1507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;limit&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1511"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>limit<sp/>of<sp/>:mini:`Range`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Range-&gt;Limit);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;step&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1520"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>limit<sp/>of<sp/>:mini:`Range`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Range-&gt;Step);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1529"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>start<sp/>of<sp/>:mini:`Range`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Diff<sp/>=<sp/>Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Range-&gt;Step)<sp/>{</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Range-&gt;Start);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Diff<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>Range-&gt;Step<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Diff<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>Range-&gt;Step<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Range-&gt;Start);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight></codeline>
<codeline lineno="1545" refid="structml__real__iter__t" refkind="compound"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>limit<sp/>of<sp/>:mini:`Range`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Diff<sp/>=<sp/>Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Range-&gt;Step)<sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Range-&gt;Start);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Diff<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>Range-&gt;Step<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Diff<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>Range-&gt;Step<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Range-&gt;Start<sp/>+<sp/>(Diff<sp/>/<sp/>Range-&gt;Step)<sp/>*<sp/>Range-&gt;Step);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLIntegerRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1565"><highlight class="comment">//&lt;X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight><highlight class="comment">//&gt;X<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Value<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&lt;<sp/>Range-&gt;Start)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&gt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal">,<sp/>MLDoubleT,<sp/>MLIntegerRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1577"><highlight class="comment">//&lt;X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight><highlight class="comment">//&gt;X<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Value<sp/>=<sp/>ml_double_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&lt;<sp/>Range-&gt;Start)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&gt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;random&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1589"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Range-&gt;Step)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Range-&gt;Start);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Diff<sp/>=<sp/>Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Diff<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>Range-&gt;Step<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Range-&gt;Start);</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Diff<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>Range-&gt;Step<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Range-&gt;Start);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Limit<sp/>=<sp/>Diff<sp/>/<sp/>Range-&gt;Step<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Divisor<sp/>=<sp/>RAND_MAX<sp/>/<sp/>Limit;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Random;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>Random<sp/>=<sp/>random()<sp/>/<sp/>Divisor;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Random<sp/>&gt;=<sp/>Limit);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Range-&gt;Start<sp/>+<sp/>Random<sp/>*<sp/>Range-&gt;Step);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__real__iter__t" kindref="compound">ml_real_iter_t</ref><sp/>{</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Current,<sp/>Step,<sp/>Limit;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal">}<sp/><ref refid="structml__real__iter__t" kindref="compound">ml_real_iter_t</ref>;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal">ML_TYPE(MLRealUpIterT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;real-iter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLRealUpIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__real__iter__t" kindref="compound">ml_real_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_real(Iter-&gt;Current));</highlight></codeline>
<codeline lineno="1614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLRealUpIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__real__iter__t" kindref="compound">ml_real_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Current<sp/>+=<sp/>Iter-&gt;Step;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter-&gt;Current<sp/>&gt;<sp/>Iter-&gt;Limit)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>++Iter-&gt;Index;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLRealUpIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__real__iter__t" kindref="compound">ml_real_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Iter-&gt;Index));</highlight></codeline>
<codeline lineno="1625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal">ML_TYPE(MLRealDownIterT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;real-iter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLRealDownIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__real__iter__t" kindref="compound">ml_real_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_real(Iter-&gt;Current));</highlight></codeline>
<codeline lineno="1632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLRealDownIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__real__iter__t" kindref="compound">ml_real_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Current<sp/>+=<sp/>Iter-&gt;Step;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter-&gt;Current<sp/>&lt;<sp/>Iter-&gt;Limit)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/>++Iter-&gt;Index;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLRealDownIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__real__iter__t" kindref="compound">ml_real_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Iter-&gt;Index));</highlight></codeline>
<codeline lineno="1643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal">ML_TYPE(MLRealRangeT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;real-range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLRealRangeT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&gt;<sp/>Range-&gt;Limit)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__real__iter__t" kindref="compound">ml_real_iter_t</ref><sp/>*Iter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__real__iter__t" kindref="compound">ml_real_iter_t</ref>);</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Type<sp/>=<sp/>MLRealUpIterT;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Current<sp/>=<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Limit<sp/>=<sp/>Range-&gt;Limit;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Step<sp/>=<sp/>Range-&gt;Step;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&lt;<sp/>Range-&gt;Limit)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__real__iter__t" kindref="compound">ml_real_iter_t</ref><sp/>*Iter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__real__iter__t" kindref="compound">ml_real_iter_t</ref>);</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Type<sp/>=<sp/>MLRealDownIterT;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Current<sp/>=<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Limit<sp/>=<sp/>Range-&gt;Limit;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Step<sp/>=<sp/>Range-&gt;Step;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__constant__iter__t" kindref="compound">ml_constant_iter_t</ref><sp/>*Iter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__constant__iter__t" kindref="compound">ml_constant_iter_t</ref>);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Type<sp/>=<sp/>MLConstantIterT;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Value<sp/>=<sp/>ml_real(Range-&gt;Start);</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iter-&gt;Index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">,<sp/>MLNumberT,<sp/>MLNumberT)<sp/>{</highlight></codeline>
<codeline lineno="1679"><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight><highlight class="comment">//&lt;Limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight><highlight class="comment">//&gt;real::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref>);</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLRealRangeT;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>ml_real_value(Args[0]);</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>ml_real_value(Args[1]);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">,<sp/>MLNumberT,<sp/>MLNumberT,<sp/>MLNumberT)<sp/>{</highlight></codeline>
<codeline lineno="1692"><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight><highlight class="comment">//&lt;Limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight><highlight class="comment">//&gt;real::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref>);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLRealRangeT;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>ml_real_value(Args[0]);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>ml_real_value(Args[1]);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>ml_real_value(Args[2]);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;by&quot;</highlight><highlight class="normal">,<sp/>MLNumberT,<sp/>MLNumberT)<sp/>{</highlight></codeline>
<codeline lineno="1705"><highlight class="comment">//&lt;Start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight><highlight class="comment">//&lt;Step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight><highlight class="comment">//&gt;real::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref>);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLRealRangeT;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>ml_real_value(Args[0]);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>ml_real_value(Args[1]);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>Range-&gt;Step<sp/>&gt;<sp/>0.0<sp/>?<sp/>INFINITY<sp/>:<sp/>-INFINITY;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;by&quot;</highlight><highlight class="normal">,<sp/>MLRealRangeT,<sp/>MLNumberT)<sp/>{</highlight></codeline>
<codeline lineno="1718"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight><highlight class="comment">//&lt;Step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight><highlight class="comment">//&gt;real::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range0<sp/>=<sp/>(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref>);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLRealRangeT;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>Range0-&gt;Start;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>Range0-&gt;Limit;</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>ml_real_value(Args[1]);</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1732"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight><highlight class="comment">//&lt;Count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight><highlight class="comment">//&gt;real::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range0<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>C<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(C<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>step<sp/>count&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Range0-&gt;Limit<sp/>-<sp/>Range0-&gt;Start)<sp/>%<sp/>C)<sp/>{</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref>);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLRealRangeT;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>Range0-&gt;Start;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>Range0-&gt;Limit;</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>(Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start)<sp/>/<sp/>C;</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref>);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLIntegerRangeT;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>Range0-&gt;Start;</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>Range0-&gt;Limit;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>(Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start)<sp/>/<sp/>C;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal">,<sp/>MLRealRangeT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1757"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight><highlight class="comment">//&lt;Count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight><highlight class="comment">//&gt;real::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range0<sp/>=<sp/>(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>C<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(C<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>step<sp/>count&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref>);</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLRealRangeT;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>Range0-&gt;Start;</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>Range0-&gt;Limit;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>(Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start)<sp/>/<sp/>C;</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;by&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT,<sp/>MLDoubleT)<sp/>{</highlight></codeline>
<codeline lineno="1773"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight><highlight class="comment">//&lt;Step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight><highlight class="comment">//&gt;real::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range0<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref>);</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLRealRangeT;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Start<sp/>=<sp/>Range0-&gt;Start;</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Limit<sp/>=<sp/>Range0-&gt;Limit;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Step<sp/>=<sp/>ml_double_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;bin&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1787"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&lt;<sp/>Range-&gt;Start)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&gt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer((Value<sp/>-<sp/>Range-&gt;Start)<sp/>/<sp/>Range-&gt;Step<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;bin&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT,<sp/>MLDoubleT)<sp/>{</highlight></codeline>
<codeline lineno="1799"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Value<sp/>=<sp/>ml_real_value(Args[1]);</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&lt;<sp/>Range-&gt;Start)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&gt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(floor((Value<sp/>-<sp/>Range-&gt;Start)<sp/>/<sp/>Range-&gt;Step)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ml_real_range_count(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range)<sp/>{</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&gt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Diff<sp/>=<sp/>Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Diff<sp/>/<sp/>Range-&gt;Step<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&lt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Diff<sp/>=<sp/>Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Diff<sp/>/<sp/>Range-&gt;Step<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;precount&quot;</highlight><highlight class="normal">,<sp/>MLRealRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1825"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>values<sp/>in<sp/>:mini:`Range`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&gt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(0);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Diff<sp/>=<sp/>Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Diff<sp/>/<sp/>Range-&gt;Step<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&lt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(0);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Diff<sp/>=<sp/>Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Diff<sp/>/<sp/>Range-&gt;Step<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(INFINITY);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;count&quot;</highlight><highlight class="normal">,<sp/>MLRealRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1844"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>values<sp/>in<sp/>:mini:`Range`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&gt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(0);</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Diff<sp/>=<sp/>Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Diff<sp/>/<sp/>Range-&gt;Step<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&lt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(0);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Diff<sp/>=<sp/>Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Diff<sp/>/<sp/>Range-&gt;Step<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(INFINITY);</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;start&quot;</highlight><highlight class="normal">,<sp/>MLRealRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1863"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>start<sp/>of<sp/>:mini:`Range`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Range-&gt;Start);</highlight></codeline>
<codeline lineno="1868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;limit&quot;</highlight><highlight class="normal">,<sp/>MLRealRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1872"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>limit<sp/>of<sp/>:mini:`Range`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Range-&gt;Limit);</highlight></codeline>
<codeline lineno="1877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;step&quot;</highlight><highlight class="normal">,<sp/>MLRealRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1881"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>step<sp/>of<sp/>:mini:`Range`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Range-&gt;Step);</highlight></codeline>
<codeline lineno="1886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">,<sp/>MLRealRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1890"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>start<sp/>of<sp/>:mini:`Range`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&gt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Range-&gt;Start);</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&lt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Range-&gt;Start);</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Range-&gt;Start);</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">,<sp/>MLRealRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1907"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>limit<sp/>of<sp/>:mini:`Range`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&gt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Diff<sp/>=<sp/>Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Range-&gt;Start<sp/>+<sp/>floor(Diff<sp/>/<sp/>Range-&gt;Step)<sp/>*<sp/>Range-&gt;Step);</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&lt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Diff<sp/>=<sp/>Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Range-&gt;Start<sp/>+<sp/>floor(Diff<sp/>/<sp/>Range-&gt;Step)<sp/>*<sp/>Range-&gt;Step);</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Range-&gt;Start);</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLRealRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1926"><highlight class="comment">//&lt;X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight><highlight class="comment">//&gt;X<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Value<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&lt;<sp/>Range-&gt;Start)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&gt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal">,<sp/>MLDoubleT,<sp/>MLRealRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1938"><highlight class="comment">//&lt;X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1940" refid="structml__integer__case__t" refkind="compound"><highlight class="normal"></highlight><highlight class="comment">//&gt;X<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Value<sp/>=<sp/>ml_double_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&lt;<sp/>Range-&gt;Start)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&gt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1945" refid="structml__integer__switch__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="1946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;random&quot;</highlight><highlight class="normal">,<sp/>MLRealRangeT)<sp/>{</highlight></codeline>
<codeline lineno="1950"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight><highlight class="comment">//&gt;real</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Limit;</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&gt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Diff<sp/>=<sp/>Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Limit<sp/>=<sp/>floor(Diff<sp/>/<sp/>Range-&gt;Step);</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Step<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Start<sp/>&lt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Diff<sp/>=<sp/>Range-&gt;Limit<sp/>-<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Limit<sp/>=<sp/>floor(Diff<sp/>/<sp/>Range-&gt;Step);</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Range-&gt;Start);</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Divisor<sp/>=<sp/>RAND_MAX<sp/>/<sp/>Limit;</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Random;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>Random<sp/>=<sp/>random()<sp/>/<sp/>Divisor;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Random<sp/>&gt;=<sp/>Limit);</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_real(Range-&gt;Start<sp/>+<sp/>Random<sp/>*<sp/>Range-&gt;Step);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;bin&quot;</highlight><highlight class="normal">,<sp/>MLRealRangeT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1973"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&lt;<sp/>Range-&gt;Start)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&gt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer((Value<sp/>-<sp/>Range-&gt;Start)<sp/>/<sp/>Range-&gt;Step<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1981"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;bin&quot;</highlight><highlight class="normal">,<sp/>MLRealRangeT,<sp/>MLDoubleT)<sp/>{</highlight></codeline>
<codeline lineno="1985"><highlight class="comment">//&lt;Range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer<sp/>|<sp/>nil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Value<sp/>=<sp/>ml_real_value(Args[1]);</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&lt;<sp/>Range-&gt;Start)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>&gt;<sp/>Range-&gt;Limit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(floor((Value<sp/>-<sp/>Range-&gt;Start)<sp/>/<sp/>Range-&gt;Step)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Switch<sp/>Functions<sp/>//</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Index;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Min,<sp/>Max;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal">}<sp/><ref refid="structml__integer__case__t" kindref="compound">ml_integer_case_t</ref>;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__case__t" kindref="compound">ml_integer_case_t</ref><sp/>Cases[];</highlight></codeline>
<codeline lineno="2006"><highlight class="normal">}<sp/><ref refid="structml__integer__switch__t" kindref="compound">ml_integer_switch_t</ref>;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_integer_switch(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__integer__switch__t" kindref="compound">ml_integer_switch_t</ref><sp/>*Switch,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg<sp/>=<sp/>ml_deref(Args[0]);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Arg,<sp/>MLNumberT))<sp/>{</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>number<sp/>for<sp/>argument<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value<sp/>=<sp/>ml_integer_value(Arg);</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__integer__case__t" kindref="compound">ml_integer_case_t</ref><sp/>*Case<sp/>=<sp/>Switch-&gt;Cases;;<sp/>++Case)<sp/>{</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Min<sp/>&lt;=<sp/>Value<sp/>&amp;&amp;<sp/>Value<sp/>&lt;=<sp/>Case-&gt;Max)<sp/>ML_RETURN(Case-&gt;Index);</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal">ML_TYPE(MLIntegerSwitchT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;integer-switch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_integer_switch</highlight></codeline>
<codeline lineno="2024"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal">ML_FUNCTION_INLINE(MLIntegerSwitch)<sp/>{</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Total<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLListT);</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Total<sp/>+=<sp/>ml_list_length(Args[I]);</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__switch__t" kindref="compound">ml_integer_switch_t</ref><sp/>*Switch<sp/>=<sp/>xnew(<ref refid="structml__integer__switch__t" kindref="compound">ml_integer_switch_t</ref>,<sp/>Total,<sp/><ref refid="structml__integer__case__t" kindref="compound">ml_integer_case_t</ref>);</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/>Switch-&gt;Type<sp/>=<sp/>MLIntegerSwitchT;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__case__t" kindref="compound">ml_integer_case_t</ref><sp/>*Case<sp/>=<sp/>Switch-&gt;Cases;</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[I],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLIntegerT))<sp/>{</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Min<sp/>=<sp/>Case-&gt;Max<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLDoubleT))<sp/>{</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Real<sp/>=<sp/>ml_real_value(Value),<sp/>Int<sp/>=<sp/>floor(Real);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Real<sp/>!=<sp/>Int)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Non-integer<sp/>value<sp/>in<sp/>integer<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Min<sp/>=<sp/>Case-&gt;Max<sp/>=<sp/>Int;</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLIntegerRangeT))<sp/>{</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Min<sp/>=<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Max<sp/>=<sp/>Range-&gt;Limit;</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLRealRangeT))<sp/>{</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Min<sp/>=<sp/>ceil(Range-&gt;Start);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Max<sp/>=<sp/>floor(Range-&gt;Limit);</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>value<sp/>in<sp/>integer<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Index<sp/>=<sp/>ml_integer(I);</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Case;</highlight></codeline>
<codeline lineno="2058" refid="structml__real__case__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Min<sp/>=<sp/>LONG_MIN;</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Max<sp/>=<sp/>LONG_MAX;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Index<sp/>=<sp/>ml_integer(Count);</highlight></codeline>
<codeline lineno="2063" refid="structml__real__switch__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Switch;</highlight></codeline>
<codeline lineno="2064"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_serialize,<sp/>MLIntegerSwitchT,<sp/><ref refid="structml__integer__switch__t" kindref="compound">ml_integer_switch_t</ref><sp/>*Switch)<sp/>{</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(Result,<sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;integer-switch&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Index<sp/>=<sp/>NULL,<sp/>*Last<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__integer__case__t" kindref="compound">ml_integer_case_t</ref><sp/>*Case<sp/>=<sp/>Switch-&gt;Cases;;<sp/>++Case)<sp/>{</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Min<sp/>&gt;<sp/>LONG_MIN<sp/>&amp;&amp;<sp/>Case-&gt;Max<sp/>&lt;<sp/>LONG_MAX)<sp/>{</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Index<sp/>!=<sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>=<sp/>Case-&gt;Index;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Last<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Result,<sp/>Last);</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Range<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Range,<sp/>ml_integer(Case-&gt;Min));</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Range,<sp/>ml_integer(Case-&gt;Max));</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Last,<sp/>Range);</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="2086"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal">ML_DESERIALIZER(</highlight><highlight class="stringliteral">&quot;integer-switch&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Total<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLListT);</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Total<sp/>+=<sp/>ml_list_length(Args[I]);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__switch__t" kindref="compound">ml_integer_switch_t</ref><sp/>*Switch<sp/>=<sp/>xnew(<ref refid="structml__integer__switch__t" kindref="compound">ml_integer_switch_t</ref>,<sp/>Total,<sp/><ref refid="structml__integer__case__t" kindref="compound">ml_integer_case_t</ref>);</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/>Switch-&gt;Type<sp/>=<sp/>MLIntegerSwitchT;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__case__t" kindref="compound">ml_integer_case_t</ref><sp/>*Case<sp/>=<sp/>Switch-&gt;Cases;</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[I],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLListT)<sp/>&amp;&amp;<sp/>ml_list_length(Value)<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Min<sp/>=<sp/>ml_integer_value(ml_list_get(Value,<sp/>1));</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Max<sp/>=<sp/>ml_integer_value(ml_list_get(Value,<sp/>2));</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>value<sp/>in<sp/>integer<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Index<sp/>=<sp/>ml_integer(I);</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Case;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Min<sp/>=<sp/>LONG_MIN;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Max<sp/>=<sp/>LONG_MAX;</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Index<sp/>=<sp/>ml_integer(Count);</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Switch;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Index;</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Min,<sp/>Max;</highlight></codeline>
<codeline lineno="2119"><highlight class="normal">}<sp/><ref refid="structml__real__case__t" kindref="compound">ml_real_case_t</ref>;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__case__t" kindref="compound">ml_real_case_t</ref><sp/>Cases[];</highlight></codeline>
<codeline lineno="2124"><highlight class="normal">}<sp/><ref refid="structml__real__switch__t" kindref="compound">ml_real_switch_t</ref>;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_real_switch(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__real__switch__t" kindref="compound">ml_real_switch_t</ref><sp/>*Switch,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg<sp/>=<sp/>ml_deref(Args[0]);</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Arg,<sp/>MLNumberT))<sp/>{</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>number<sp/>for<sp/>argument<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Value<sp/>=<sp/>ml_real_value(Arg);</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__real__case__t" kindref="compound">ml_real_case_t</ref><sp/>*Case<sp/>=<sp/>Switch-&gt;Cases;;<sp/>++Case)<sp/>{</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Min<sp/>&lt;=<sp/>Value<sp/>&amp;&amp;<sp/>Value<sp/>&lt;=<sp/>Case-&gt;Max)<sp/>ML_RETURN(Case-&gt;Index);</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="2137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="normal">ML_TYPE(MLRealSwitchT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;real-switch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_real_switch</highlight></codeline>
<codeline lineno="2142"><highlight class="normal">);</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal">ML_FUNCTION_INLINE(MLRealSwitch)<sp/>{</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Total<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLListT);</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Total<sp/>+=<sp/>ml_list_length(Args[I]);</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__switch__t" kindref="compound">ml_real_switch_t</ref><sp/>*Switch<sp/>=<sp/>xnew(<ref refid="structml__real__switch__t" kindref="compound">ml_real_switch_t</ref>,<sp/>Total,<sp/><ref refid="structml__real__case__t" kindref="compound">ml_real_case_t</ref>);</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/>Switch-&gt;Type<sp/>=<sp/>MLRealSwitchT;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__case__t" kindref="compound">ml_real_case_t</ref><sp/>*Case<sp/>=<sp/>Switch-&gt;Cases;</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[I],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLIntegerT))<sp/>{</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Min<sp/>=<sp/>Case-&gt;Max<sp/>=<sp/>ml_integer_value(Value);</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLDoubleT))<sp/>{</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Min<sp/>=<sp/>Case-&gt;Max<sp/>=<sp/>ml_real_value(Value);</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLIntegerRangeT))<sp/>{</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__integer__range__t" kindref="compound">ml_integer_range_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Min<sp/>=<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Max<sp/>=<sp/>Range-&gt;Limit;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLRealRangeT))<sp/>{</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__real__range__t" kindref="compound">ml_real_range_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Min<sp/>=<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Max<sp/>=<sp/>Range-&gt;Limit;</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>value<sp/>in<sp/>real<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Index<sp/>=<sp/>ml_integer(I);</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Case;</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Min<sp/>=<sp/>-INFINITY;</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Max<sp/>=<sp/>INFINITY;</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Index<sp/>=<sp/>ml_integer(Count);</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Switch;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_serialize,<sp/>MLRealSwitchT,<sp/><ref refid="structml__real__switch__t" kindref="compound">ml_real_switch_t</ref><sp/>*Switch)<sp/>{</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_list_put(Result,<sp/>ml_cstring(</highlight><highlight class="stringliteral">&quot;real-switch&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Index<sp/>=<sp/>NULL,<sp/>*Last<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__real__case__t" kindref="compound">ml_real_case_t</ref><sp/>*Case<sp/>=<sp/>Switch-&gt;Cases;;<sp/>++Case)<sp/>{</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Min<sp/>&gt;<sp/>DBL_MIN<sp/>&amp;&amp;<sp/>Case-&gt;Max<sp/>&lt;<sp/>DBL_MAX)<sp/>{</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Case-&gt;Index<sp/>!=<sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>=<sp/>Case-&gt;Index;</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Last<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Result,<sp/>Last);</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Range<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Range,<sp/>ml_real(Case-&gt;Min));</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Range,<sp/>ml_real(Case-&gt;Max));</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Last,<sp/>Range);</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="2202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal">ML_DESERIALIZER(</highlight><highlight class="stringliteral">&quot;real-switch&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Total<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLListT);</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Total<sp/>+=<sp/>ml_list_length(Args[I]);</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__switch__t" kindref="compound">ml_real_switch_t</ref><sp/>*Switch<sp/>=<sp/>xnew(<ref refid="structml__real__switch__t" kindref="compound">ml_real_switch_t</ref>,<sp/>Total,<sp/><ref refid="structml__integer__case__t" kindref="compound">ml_integer_case_t</ref>);</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/>Switch-&gt;Type<sp/>=<sp/>MLRealSwitchT;</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__real__case__t" kindref="compound">ml_real_case_t</ref><sp/>*Case<sp/>=<sp/>Switch-&gt;Cases;</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[I],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLListT)<sp/>&amp;&amp;<sp/>ml_list_length(Value)<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Min<sp/>=<sp/>ml_real_value(ml_list_get(Value,<sp/>1));</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Max<sp/>=<sp/>ml_real_value(ml_list_get(Value,<sp/>2));</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>value<sp/>in<sp/>integer<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Index<sp/>=<sp/>ml_integer(I);</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Case;</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Min<sp/>=<sp/>-INFINITY;</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Max<sp/>=<sp/>INFINITY;</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Index<sp/>=<sp/>ml_integer(Count);</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Switch;</highlight></codeline>
<codeline lineno="2230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_number_init()<sp/>{</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_number_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*TArgs[3]<sp/>=<sp/>{MLSequenceT,<sp/>MLIntegerT,<sp/>MLIntegerT};</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_parent(MLIntegerRangeT,<sp/>ml_generic_type(3,<sp/>TArgs));</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/>TArgs[2]<sp/>=<sp/>MLRealT;</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_parent(MLRealRangeT,<sp/>ml_generic_type(3,<sp/>TArgs));</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLIntegerT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;range&quot;</highlight><highlight class="normal">,<sp/>MLIntegerRangeT);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLIntegerT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;switch&quot;</highlight><highlight class="normal">,<sp/>MLIntegerSwitch);</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLIntegerT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;random&quot;</highlight><highlight class="normal">,<sp/>RandomInteger);</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLIntegerT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;random_permutation&quot;</highlight><highlight class="normal">,<sp/>RandomPermutation);</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLIntegerT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;random_cycle&quot;</highlight><highlight class="normal">,<sp/>RandomCycle);</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLRealT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;range&quot;</highlight><highlight class="normal">,<sp/>MLRealRangeT);</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLRealT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;switch&quot;</highlight><highlight class="normal">,<sp/>MLRealSwitch);</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLRealT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;random&quot;</highlight><highlight class="normal">,<sp/>RandomReal);</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(MLIntegerT-&gt;Constructor,<sp/>NULL,<sp/>ml_identity,<sp/>MLIntegerT,<sp/>NULL);</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;isfinite&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>ml_identity,<sp/>MLIntegerT,<sp/>NULL);</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_name(</highlight><highlight class="stringliteral">&quot;isnan&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>ml_return_nil,<sp/>MLIntegerT,<sp/>NULL);</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(MLDoubleT-&gt;Constructor,<sp/>NULL,<sp/>ml_identity,<sp/>MLDoubleT,<sp/>NULL);</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(MLRealT-&gt;Constructor,<sp/>NULL,<sp/>ml_identity,<sp/>MLDoubleT,<sp/>NULL);</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLRealT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;Inf&quot;</highlight><highlight class="normal">,<sp/>ml_real(INFINITY));</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLRealT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;NaN&quot;</highlight><highlight class="normal">,<sp/>ml_real(NAN));</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(MLNumberT-&gt;Constructor,<sp/>NULL,<sp/>ml_identity,<sp/>MLNumberT,<sp/>NULL);</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_infix_many(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_infix_many(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_infix_many(</highlight><highlight class="stringliteral">&quot;/\\&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_infix_many(</highlight><highlight class="stringliteral">&quot;\\/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2260"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_number.c"/>
  </compounddef>
</doxygen>
