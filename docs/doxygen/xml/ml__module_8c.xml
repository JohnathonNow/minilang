<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__module_8c" kind="file" language="C++">
    <compoundname>ml_module.c</compoundname>
    <includes refid="ml__module_8h" local="yes">ml_module.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdio.h</includes>
    <includes refid="ml__runtime_8h" local="yes">ml_runtime.h</includes>
    <includes local="yes">ml_module_init.c</includes>
    <incdepgraph>
      <node id="14">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_module.c</label>
        <link refid="ml__module_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ml_module.h</label>
        <link refid="ml__module_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="19">
        <label>gc/gc.h</label>
      </node>
      <node id="17">
        <label>limits.h</label>
      </node>
      <node id="16">
        <label>ml_config.h</label>
      </node>
      <node id="20">
        <label>ml_module_init.c</label>
      </node>
      <node id="7">
        <label>setjmp.h</label>
      </node>
      <node id="12">
        <label>stdarg.h</label>
      </node>
      <node id="15">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__mini__module__t" prot="public">ml_mini_module_t</innerclass>
    <innerclass refid="structml__module__state__t" prot="public">ml_module_state_t</innerclass>
    <innerclass refid="structml__fn__module__t" prot="public">ml_fn_module_t</innerclass>
    <innerclass refid="structml__module__lookup__state__t" prot="public">ml_module_lookup_state_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__module_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;module&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_module.c" line="8" column="10" bodyfile="src/ml_module.c" bodystart="8" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ml__module_8c_1a6ee02ac6388bf301758420dc2347a7ce" prot="public" static="no">
        <type>struct ml_module_state_t</type>
        <definition>typedef struct ml_module_state_t ml_module_state_t</definition>
        <argsstring></argsstring>
        <name>ml_module_state_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_module.c" line="70" column="19"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__module_8c_1a747b198f5d415ea699c920246dc0b73f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLMiniModuleT,(MLModuleT), &quot;module&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLMiniModuleT</type>
        </param>
        <param>
          <type>(MLModuleT)</type>
        </param>
        <param>
          <type>&quot;module&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_module.c" line="16" column="1" declfile="src/ml_module.c" declline="16" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__module_8c_1abb0610399ad68fd74fb8d82ecf5ec205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;::&quot;, MLMiniModuleT, MLStringT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;::&quot;</type>
        </param>
        <param>
          <type>MLMiniModuleT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_module.c" line="18" column="1" bodyfile="src/ml_module.c" bodystart="18" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="ml__module_8c_1a7f0f657c1ec8d24e08a7cba5b59854f7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_export</definition>
        <argsstring>(ml_state_t *Caller, ml_mini_module_t *Module, int Count, ml_value_t **Args)</argsstring>
        <name>ml_export</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__mini__module__t" kindref="compound">ml_mini_module_t</ref> *</type>
          <declname>Module</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_module.c" line="30" column="13" bodyfile="src/ml_module.c" bodystart="30" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="ml__module_8c_1a1c061acc0f421c56bc77efdd3b5c29e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLModuleStateT,(), &quot;module-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLModuleStateT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;module-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_module.c" line="72" column="1" declfile="src/ml_module.c" declline="72" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__module_8c_1a60096c23e80afeb7a54032b09bc8fef0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_module_done_run</definition>
        <argsstring>(ml_module_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_module_done_run</name>
        <param>
          <type><ref refid="structml__module__state__t" kindref="compound">ml_module_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_module.c" line="74" column="13" bodyfile="src/ml_module.c" bodystart="74" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="ml__module_8c_1adfd7e638aed1ec3f0339936d32a01251" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_module_init_run</definition>
        <argsstring>(ml_module_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_module_init_run</name>
        <param>
          <type><ref refid="structml__module__state__t" kindref="compound">ml_module_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_module.c" line="80" column="13" bodyfile="src/ml_module.c" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="ml__module_8c_1a56ffda5918807013dbc82173b40c0178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_module_compile2</definition>
        <argsstring>(ml_state_t *Caller, ml_parser_t *Parser, ml_compiler_t *Compiler, ml_value_t **Slot, int Flags)</argsstring>
        <name>ml_module_compile2</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref> *</type>
          <declname>Compiler</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Slot</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_module.c" line="86" column="6" bodyfile="src/ml_module.c" bodystart="86" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="ml__module_8c_1a1a0240b825f741723cae0d0a2301b9a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_module_compile</definition>
        <argsstring>(ml_state_t *Caller, ml_parser_t *Parser, ml_compiler_t *Compiler, ml_value_t **Slot)</argsstring>
        <name>ml_module_compile</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref> *</type>
          <declname>Parser</declname>
        </param>
        <param>
          <type><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref> *</type>
          <declname>Compiler</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Slot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_module.c" line="110" column="6" bodyfile="src/ml_module.c" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="ml__module_8c_1afd979cd5bfbb969fc17142abb6edcdcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLFnModuleT,(), &quot;module&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLFnModuleT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;module&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_module.c" line="119" column="1" declfile="src/ml_module.c" declline="119" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__module_8c_1aae43fd842d0884119ca6da2abd180c4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLModuleT, MLStringT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLModuleT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_module.c" line="121" column="1" bodyfile="src/ml_module.c" bodystart="121" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="ml__module_8c_1a3995e75fd57e81122bd90471eb5a5350" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_module_lookup_run</definition>
        <argsstring>(ml_module_lookup_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_module_lookup_run</name>
        <param>
          <type><ref refid="structml__module__lookup__state__t" kindref="compound">ml_module_lookup_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_module.c" line="140" column="13" bodyfile="src/ml_module.c" bodystart="140" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="ml__module_8c_1aa89d1d100906e9407574a44c0be18a35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;::&quot;, MLFnModuleT, MLStringT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;::&quot;</type>
        </param>
        <param>
          <type>MLFnModuleT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_module.c" line="148" column="1" bodyfile="src/ml_module.c" bodystart="148" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="ml__module_8c_1a42b665527d8320c401a495c5ed72e964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODZ</definition>
        <argsstring>(&quot;export&quot;, MLFnModuleT, MLStringT, MLAnyT)</argsstring>
        <name>ML_METHODZ</name>
        <param>
          <type>&quot;export&quot;</type>
        </param>
        <param>
          <type>MLFnModuleT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_module.c" line="168" column="1" bodyfile="src/ml_module.c" bodystart="168" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="ml__module_8c_1ab56d5781c6b6d61ee1ab3940659acbb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_module_init</definition>
        <argsstring>(stringmap_t *_Globals)</argsstring>
        <name>ml_module_init</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>_Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_module.c" line="175" column="6" bodyfile="src/ml_module.c" bodystart="175" bodyend="177"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ml_module.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_runtime.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;module&quot;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="structml__mini__module__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__module__t" kindref="compound">ml_module_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}<sp/><ref refid="structml__mini__module__t" kindref="compound">ml_mini_module_t</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">ML_TYPE(MLMiniModuleT,<sp/>(MLModuleT),<sp/></highlight><highlight class="stringliteral">&quot;module&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/>MLMiniModuleT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__mini__module__t" kindref="compound">ml_mini_module_t</ref><sp/>*Module<sp/>=<sp/>(<ref refid="structml__mini__module__t" kindref="compound">ml_mini_module_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)stringmap_slot(Module-&gt;Base.Exports,<sp/>Name);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*FullName<sp/>=<sp/>snew(strlen(Module-&gt;Base.Path)<sp/>+<sp/>strlen(</highlight><highlight class="stringliteral">&quot;Name&quot;</highlight><highlight class="normal">)<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(stpcpy(stpcpy(FullName,<sp/>Module-&gt;Base.Path),<sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">),<sp/>Name);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>ml_uninitialized(FullName,<sp/>ml_debugger_source(Caller));</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Slot[0]);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_export(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__mini__module__t" kindref="compound">ml_mini_module_t</ref><sp/>*Module,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(0,<sp/>MLNamesT);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_CHECKX_ARG_COUNT(0);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[0],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>=<sp/>Args[++Index];</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**)stringmap_slot(Module-&gt;Base.Exports,<sp/>Name);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Module-&gt;Flags<sp/>&amp;<sp/>MLMF_USE_GLOBALS)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Slot[0])<sp/>==<sp/>MLGlobalT)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Slot[0])<sp/>==<sp/>MLUninitializedT)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Global<sp/>=<sp/>ml_global(Name);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_uninitialized_set(Slot[0],<sp/>Global);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Global;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;ExportError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Duplicate<sp/>export<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Name);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>ml_global(Name);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_global_set(Slot[0],<sp/>Value);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Slot[0])<sp/>!=<sp/>MLUninitializedT)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;ExportError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Duplicate<sp/>export<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Name);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_uninitialized_set(Slot[0],<sp/>Value);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="structml__module__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__module__state__t" kindref="compound">ml_module_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Module;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}<sp/><ref refid="structml__module__state__t" kindref="compound">ml_module_state_t</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">ML_TYPE(MLModuleStateT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;module-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_module_done_run(<ref refid="structml__module__state__t" kindref="compound">ml_module_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State-&gt;Module);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_module_init_run(<ref refid="structml__module__state__t" kindref="compound">ml_module_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_module_done_run;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Value,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_module_compile2(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__mini__module__t" kindref="compound">ml_mini_module_t</ref><sp/>*Module;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Flags<sp/>&amp;<sp/>MLMF_USE_GLOBALS)<sp/>&amp;&amp;<sp/>Slot[0]<sp/>&amp;&amp;<sp/>ml_typeof(Slot[0])<sp/>==<sp/>MLMiniModuleT)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Module<sp/>=<sp/>(<ref refid="structml__mini__module__t" kindref="compound">ml_mini_module_t</ref><sp/>*)Slot[0];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Module<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__mini__module__t" kindref="compound">ml_mini_module_t</ref>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Module-&gt;Base.Type<sp/>=<sp/>MLMiniModuleT;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Module-&gt;Base.Path<sp/>=<sp/>ml_parser_name(Parser);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Module-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Module;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_compiler_define(Compiler,<sp/></highlight><highlight class="stringliteral">&quot;export&quot;</highlight><highlight class="normal">,<sp/>ml_cfunctionz(Module,<sp/>(ml_callbackx_t)ml_export));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__module__state__t" kindref="compound">ml_module_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__module__state__t" kindref="compound">ml_module_state_t</ref>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLModuleStateT;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_module_init_run;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Module<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Module;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmlc__expr__t" kindref="compound">mlc_expr_t</ref><sp/>*Expr<sp/>=<sp/>ml_accept_file(Parser);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Expr)<sp/>ML_RETURN(ml_parser_value(Parser));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_function_compile((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Expr,<sp/>Compiler,<sp/>NULL);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_module_compile(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__parser__t" kindref="compound">ml_parser_t</ref><sp/>*Parser,<sp/><ref refid="structml__compiler__t" kindref="compound">ml_compiler_t</ref><sp/>*Compiler,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Slot)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_module_compile2(Caller,<sp/>Parser,<sp/>Compiler,<sp/>Slot,<sp/>0);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="structml__fn__module__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__module__t" kindref="compound">ml_module_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Lookup;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}<sp/><ref refid="structml__fn__module__t" kindref="compound">ml_fn_module_t</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">ML_TYPE(MLFnModuleT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;module&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">ML_METHOD(MLModuleT,<sp/>MLStringT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//@module</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//&lt;Path:string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//&lt;Lookup:function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//&gt;module</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>generic<sp/>module<sp/>which<sp/>calls<sp/>resolves<sp/>:mini:`Module::Import`<sp/>by<sp/>calling<sp/>:mini:`Lookup(Import)`,<sp/>caching<sp/>results<sp/>for<sp/>future<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__fn__module__t" kindref="compound">ml_fn_module_t</ref><sp/>*Module<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__fn__module__t" kindref="compound">ml_fn_module_t</ref>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>Module-&gt;Base.Type<sp/>=<sp/>MLFnModuleT;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>Module-&gt;Base.Path<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>Module-&gt;Lookup<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Module;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="structml__module__lookup__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__fn__module__t" kindref="compound">ml_fn_module_t</ref><sp/>*Module;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name;</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}<sp/><ref refid="structml__module__lookup__state__t" kindref="compound">ml_module_lookup_state_t</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_module_lookup_run(<ref refid="structml__module__lookup__state__t" kindref="compound">ml_module_lookup_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(State-&gt;Module-&gt;Base.Exports,<sp/>State-&gt;Name,<sp/>Value);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/>MLFnModuleT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//&lt;Module</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//&gt;MLAnyT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Imports<sp/>a<sp/>symbol<sp/>from<sp/>a<sp/>module.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__fn__module__t" kindref="compound">ml_fn_module_t</ref><sp/>*Module<sp/>=<sp/>(<ref refid="structml__fn__module__t" kindref="compound">ml_fn_module_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>stringmap_search(Module-&gt;Base.Exports,<sp/>Name);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Value)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__module__lookup__state__t" kindref="compound">ml_module_lookup_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__module__lookup__state__t" kindref="compound">ml_module_lookup_state_t</ref>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_module_lookup_run;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Module<sp/>=<sp/>Module;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Name<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Module-&gt;Lookup,<sp/>1,<sp/>Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">ML_METHODZ(</highlight><highlight class="stringliteral">&quot;export&quot;</highlight><highlight class="normal">,<sp/>MLFnModuleT,<sp/>MLStringT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__fn__module__t" kindref="compound">ml_fn_module_t</ref><sp/>*Module<sp/>=<sp/>(<ref refid="structml__fn__module__t" kindref="compound">ml_fn_module_t</ref><sp/>*)ml_deref(Args[0]);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(ml_deref(Args[1]));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Module-&gt;Base.Exports,<sp/>Name,<sp/>Args[2]);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Args[2]);</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_module_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*_Globals)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_module_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_module.c"/>
  </compounddef>
</doxygen>
