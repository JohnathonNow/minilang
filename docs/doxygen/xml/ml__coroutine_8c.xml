<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__coroutine_8c" kind="file" language="C++">
    <compoundname>ml_coroutine.c</compoundname>
    <includes refid="minilang_8h" local="yes">minilang.h</includes>
    <includes refid="ml__coroutine_8h" local="yes">ml_coroutine.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes refid="coro_8h" local="yes">coro.h</includes>
    <incdepgraph>
      <node id="20">
        <label>coro.h</label>
        <link refid="coro_8h_source"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_coroutine.c</label>
        <link refid="ml__coroutine_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ml_coroutine.h</label>
        <link refid="ml__coroutine_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="19">
        <label>gc/gc.h</label>
      </node>
      <node id="16">
        <label>limits.h</label>
      </node>
      <node id="15">
        <label>ml_config.h</label>
      </node>
      <node id="6">
        <label>setjmp.h</label>
      </node>
      <node id="11">
        <label>stdarg.h</label>
      </node>
      <node id="21">
        <label>stddef.h</label>
      </node>
      <node id="14">
        <label>stdint.h</label>
      </node>
      <node id="9">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
      <node id="4">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__coro__state__t" prot="public">ml_coro_state_t</innerclass>
    <innerclass refid="structml__coro__call__t" prot="public">ml_coro_call_t</innerclass>
    <innerclass refid="structml__coro__entry__t" prot="public">ml_coro_entry_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__coroutine_8c_1a6423a880df59733d2d9b509c7718d3a9" prot="public" static="no">
        <name>STACK_SIZE</name>
        <initializer>(1 &lt;&lt; 20)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_coroutine.c" line="6" column="9" bodyfile="src/ml_coroutine.c" bodystart="6" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ml__coroutine_8c_1a1639ac6022450befccb25bc10472298f" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__coro__state__t" kindref="compound">ml_coro_state_t</ref> *</type>
        <definition>ml_coro_state_t* CoroCache</definition>
        <argsstring></argsstring>
        <name>CoroCache</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_coroutine.c" line="21" column="17" bodyfile="src/ml_coroutine.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="ml__coroutine_8c_1ac97b5fb0ada8c0fe2a19e2c3e1d85e4c" prot="public" static="yes" mutable="no">
        <type><ref refid="structml__coro__state__t" kindref="compound">ml_coro_state_t</ref> *</type>
        <definition>ml_coro_state_t * Current</definition>
        <argsstring></argsstring>
        <name>Current</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_coroutine.c" line="21" column="28" bodyfile="src/ml_coroutine.c" bodystart="21" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__coroutine_8c_1a51fdb6ad90d9b6bfc9d1b98fda67cf6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * ml_coro_escape</definition>
        <argsstring>(void *Data, void(*Callback)(ml_coro_state_t *, void *))</argsstring>
        <name>ml_coro_escape</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>void(*)(<ref refid="structml__coro__state__t" kindref="compound">ml_coro_state_t</ref> *, void *)</type>
          <declname>Callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_coroutine.c" line="23" column="6" bodyfile="src/ml_coroutine.c" bodystart="23" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="ml__coroutine_8c_1ac0098ebcd0bf8073ccd09fb8c0ffe498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_coro_resume</definition>
        <argsstring>(ml_coro_state_t *State, void *Data)</argsstring>
        <name>ml_coro_resume</name>
        <param>
          <type><ref refid="structml__coro__state__t" kindref="compound">ml_coro_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_coroutine.c" line="35" column="6" bodyfile="src/ml_coroutine.c" bodystart="35" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="ml__coroutine_8c_1aee38594d1e91e7356ed76e7b95abf180" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_coro_escape_call</definition>
        <argsstring>(ml_coro_state_t *State, ml_coro_call_t *Call)</argsstring>
        <name>ml_coro_escape_call</name>
        <param>
          <type><ref refid="structml__coro__state__t" kindref="compound">ml_coro_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__coro__call__t" kindref="compound">ml_coro_call_t</ref> *</type>
          <declname>Call</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_coroutine.c" line="50" column="13" bodyfile="src/ml_coroutine.c" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="ml__coroutine_8c_1ab12eac82a546270e6c798255bffcc25c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_coro_call</definition>
        <argsstring>(ml_value_t *Function, int Count, ml_value_t **Args)</argsstring>
        <name>ml_coro_call</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_coroutine.c" line="54" column="12" bodyfile="src/ml_coroutine.c" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="ml__coroutine_8c_1ae47edb0b21e13cd179c0f91667195c77" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_coro_start</definition>
        <argsstring>(ml_coro_state_t *State)</argsstring>
        <name>ml_coro_start</name>
        <param>
          <type><ref refid="structml__coro__state__t" kindref="compound">ml_coro_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_coroutine.c" line="65" column="13" bodyfile="src/ml_coroutine.c" bodystart="65" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="ml__coroutine_8c_1a63e2581418598132ced8a59c43350b17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_coro_enter</definition>
        <argsstring>(ml_state_t *Caller, ml_callback_t Function, int Count, ml_value_t **Args)</argsstring>
        <name>ml_coro_enter</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type>ml_callback_t</type>
          <declname>Function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_coroutine.c" line="74" column="6" bodyfile="src/ml_coroutine.c" bodystart="74" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="ml__coroutine_8c_1ad8852da2064bd828cfd2754b14b0bd16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_cofunction_call</definition>
        <argsstring>(ml_state_t *Caller, ml_cfunction_t *Function, int Count, ml_value_t **Args)</argsstring>
        <name>ml_cofunction_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__cfunction__t" kindref="compound">ml_cfunction_t</ref> *</type>
          <declname>Function</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_coroutine.c" line="88" column="13" bodyfile="src/ml_coroutine.c" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="ml__coroutine_8c_1aebf4b423c7a81f2554b33acd2b1a4575" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLCoFunctionT,(MLFunctionT), &quot;co-function&quot;,.call=(void *) ml_cofunction_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLCoFunctionT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;co-function&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_cofunction_call</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_coroutine.c" line="93" column="1" declfile="src/ml_coroutine.c" declline="93" declcolumn="1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;minilang.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_coroutine.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;coro.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STACK_SIZE<sp/>(1<sp/>&lt;&lt;<sp/>20)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="structml__coro__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__coro__state__t" kindref="compound">ml_coro_state_t</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__coro__state__t" kindref="compound">ml_coro_state_t</ref><sp/>*Next;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*Callback)(<ref refid="structml__coro__state__t" kindref="compound">ml_coro_state_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>coro_context<sp/>Return[1];</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>coro_context<sp/>Context[1];</highlight></codeline>
<codeline lineno="15"><highlight class="normal">};</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">__thread</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><ref refid="structml__coro__state__t" kindref="compound">ml_coro_state_t</ref><sp/>*CoroCache<sp/>=<sp/>NULL,<sp/>*Current<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ml_coro_escape(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*Callback)(<ref refid="structml__coro__state__t" kindref="compound">ml_coro_state_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__coro__state__t" kindref="compound">ml_coro_state_t</ref><sp/>*State<sp/>=<sp/>Current;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!State)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;StateError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Must<sp/>be<sp/>called<sp/>from<sp/>a<sp/>coroutine&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Callback<sp/>=<sp/>Callback;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Data<sp/>=<sp/>Data;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>Current<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>coro_transfer(State-&gt;Context,<sp/>State-&gt;Return);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>Current<sp/>=<sp/>State;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Callback<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;Data;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_coro_resume(<ref refid="structml__coro__state__t" kindref="compound">ml_coro_state_t</ref><sp/>*State,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Data<sp/>=<sp/>Data;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>coro_transfer(State-&gt;Return,<sp/>State-&gt;Context);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>Current<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Callback)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;Callback(State,<sp/>State-&gt;Data);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Next<sp/>=<sp/>CoroCache;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>CoroCache<sp/>=<sp/>State;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>State-&gt;Data);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="structml__coro__call__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function,<sp/>**Args;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}<sp/><ref refid="structml__coro__call__t" kindref="compound">ml_coro_call_t</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_coro_escape_call(<ref refid="structml__coro__state__t" kindref="compound">ml_coro_state_t</ref><sp/>*State,<sp/><ref refid="structml__coro__call__t" kindref="compound">ml_coro_call_t</ref><sp/>*Call)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Call-&gt;Function,<sp/>Call-&gt;Count,<sp/>Call-&gt;Args);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_coro_call(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__coro__call__t" kindref="compound">ml_coro_call_t</ref><sp/>Call<sp/>=<sp/>{Function,<sp/>Args,<sp/>Count};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_coro_escape(&amp;Call,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_coro_escape_call);</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="structml__coro__entry__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_callback_t<sp/>Function;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}<sp/><ref refid="structml__coro__entry__t" kindref="compound">ml_coro_entry_t</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_coro_start(<ref refid="structml__coro__state__t" kindref="compound">ml_coro_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Current<sp/>=<sp/>State;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__coro__entry__t" kindref="compound">ml_coro_entry_t</ref><sp/>*Entry<sp/>=<sp/>(<ref refid="structml__coro__entry__t" kindref="compound">ml_coro_entry_t</ref><sp/>*)State-&gt;Data;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Data<sp/>=<sp/>Entry-&gt;Function(State,<sp/>Entry-&gt;Count,<sp/>Entry-&gt;Args);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coro_transfer(State-&gt;Context,<sp/>State-&gt;Return);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_coro_enter(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/>ml_callback_t<sp/>Function,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__coro__state__t" kindref="compound">ml_coro_state_t</ref><sp/>*State<sp/>=<sp/>CoroCache;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!State)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__coro__state__t" kindref="compound">ml_coro_state_t</ref>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_coro_resume;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Stack<sp/>=<sp/>GC_memalign(STACK_SIZE,<sp/>16);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coro_create(State-&gt;Context,<sp/>(coro_func)ml_coro_start,<sp/>State,<sp/>Stack,<sp/>STACK_SIZE);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__coro__entry__t" kindref="compound">ml_coro_entry_t</ref><sp/>Entry<sp/>=<sp/>{Function,<sp/>Args,<sp/>Count};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_coro_resume(State,<sp/>&amp;Entry);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_cofunction_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__cfunction__t" kindref="compound">ml_cfunction_t</ref><sp/>*Function,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Count;<sp/>--I<sp/>&gt;=<sp/>0;)<sp/>Args[I]<sp/>=<sp/>ml_deref(Args[I]);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_coro_enter(Caller,<sp/>Function-&gt;Callback,<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">ML_TYPE(MLCoFunctionT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;co-function&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_cofunction_call</highlight></codeline>
<codeline lineno="96"><highlight class="normal">);</highlight></codeline>
    </programlisting>
    <location file="src/ml_coroutine.c"/>
  </compounddef>
</doxygen>
