<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="stringmap_8c" kind="file" language="C++">
    <compoundname>stringmap.c</compoundname>
    <includes refid="stringmap_8h" local="yes">stringmap.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="3">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/stringmap.c</label>
        <link refid="stringmap_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="4">
        <label>gc/gc.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structstringmap__node__t" prot="public">stringmap_node_t</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="stringmap_8c_1aa481ba578dcc6ee577942e60501d01a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
        <definition>stringmap_t * stringmap_new</definition>
        <argsstring>()</argsstring>
        <name>stringmap_new</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stringmap.c" line="13" column="13" bodyfile="src/stringmap.c" bodystart="13" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="stringmap_8c_1a7273c4ebbf957f49dc6b9efb026e256a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long stringmap_hash</definition>
        <argsstring>(const char *Key)</argsstring>
        <name>stringmap_hash</name>
        <param>
          <type>const char *</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stringmap.c" line="17" column="15" bodyfile="src/stringmap.c" bodystart="17" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="stringmap_8c_1ab45944db28f23991e981263a6a0f03f2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int compare</definition>
        <argsstring>(long Hash, const char *Key, stringmap_node_t *Node)</argsstring>
        <name>compare</name>
        <param>
          <type>long</type>
          <declname>Hash</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Key</declname>
        </param>
        <param>
          <type><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stringmap.c" line="23" column="19" bodyfile="src/stringmap.c" bodystart="23" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="stringmap_8c_1a5633f3cc8d545560ed73634d7877e211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * stringmap_search</definition>
        <argsstring>(const stringmap_t *Map, const char *Key)</argsstring>
        <name>stringmap_search</name>
        <param>
          <type>const <ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Map</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stringmap.c" line="29" column="6" bodyfile="src/stringmap.c" bodystart="29" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="stringmap_8c_1a26076292106741df9aa5f2e58e5ccea6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stringmap_balance</definition>
        <argsstring>(stringmap_node_t *Node)</argsstring>
        <name>stringmap_balance</name>
        <param>
          <type><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stringmap.c" line="43" column="12" bodyfile="src/stringmap.c" bodystart="43" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="stringmap_8c_1a923ff829171c220531d8a003ead92fbf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stringmap_update_depth</definition>
        <argsstring>(stringmap_node_t *Node)</argsstring>
        <name>stringmap_update_depth</name>
        <param>
          <type><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stringmap.c" line="50" column="13" bodyfile="src/stringmap.c" bodystart="50" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="stringmap_8c_1a90b4e887f02fa889088274301ab30e1b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stringmap_rotate_left</definition>
        <argsstring>(stringmap_node_t **Slot)</argsstring>
        <name>stringmap_rotate_left</name>
        <param>
          <type><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref> **</type>
          <declname>Slot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stringmap.c" line="57" column="13" bodyfile="src/stringmap.c" bodystart="57" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="stringmap_8c_1ac9e7af950c8769eff4354b823fee07d8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stringmap_rotate_right</definition>
        <argsstring>(stringmap_node_t **Slot)</argsstring>
        <name>stringmap_rotate_right</name>
        <param>
          <type><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref> **</type>
          <declname>Slot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stringmap.c" line="66" column="13" bodyfile="src/stringmap.c" bodystart="66" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="stringmap_8c_1a4b17e749aa8a9a3dd2064c9ef0096da2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stringmap_rebalance</definition>
        <argsstring>(stringmap_node_t **Slot)</argsstring>
        <name>stringmap_rebalance</name>
        <param>
          <type><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref> **</type>
          <declname>Slot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stringmap.c" line="75" column="13" bodyfile="src/stringmap.c" bodystart="75" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="stringmap_8c_1a01f82bfcf1e0bd994f621c20918efedb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>static void ** stringmap_slot_internal</definition>
        <argsstring>(stringmap_t *Map, stringmap_node_t **Slot, long Hash, const char *Key)</argsstring>
        <name>stringmap_slot_internal</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Map</declname>
        </param>
        <param>
          <type><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref> **</type>
          <declname>Slot</declname>
        </param>
        <param>
          <type>long</type>
          <declname>Hash</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stringmap.c" line="86" column="13" bodyfile="src/stringmap.c" bodystart="86" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="stringmap_8c_1a30e3dcebb967aaf27cc9a76603bae8b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** stringmap_slot</definition>
        <argsstring>(stringmap_t *Map, const char *Key)</argsstring>
        <name>stringmap_slot</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Map</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stringmap.c" line="106" column="6" bodyfile="src/stringmap.c" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="stringmap_8c_1aa998fa79f38f255353f826e936dab5ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * stringmap_insert</definition>
        <argsstring>(stringmap_t *Map, const char *Key, void *Value)</argsstring>
        <name>stringmap_insert</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Map</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stringmap.c" line="110" column="6" bodyfile="src/stringmap.c" bodystart="110" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="stringmap_8c_1adb9f3c9c4e665b0e330c3a4fa7ad1359" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * stringmap_hash_insert</definition>
        <argsstring>(stringmap_t *Map, long Hash, const char *Key, void *Value)</argsstring>
        <name>stringmap_hash_insert</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Map</declname>
        </param>
        <param>
          <type>long</type>
          <declname>Hash</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stringmap.c" line="117" column="6" bodyfile="src/stringmap.c" bodystart="117" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="stringmap_8c_1a7ed34d8364d05f7b923cc9044fa6ab95" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stringmap_remove_depth_helper</definition>
        <argsstring>(stringmap_node_t *Node)</argsstring>
        <name>stringmap_remove_depth_helper</name>
        <param>
          <type><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stringmap.c" line="124" column="13" bodyfile="src/stringmap.c" bodystart="124" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="stringmap_8c_1a068f9b01aea35dbaed817d67aeab78d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void * stringmap_remove_internal</definition>
        <argsstring>(stringmap_t *Map, stringmap_node_t **Slot, long Hash, const char *Key)</argsstring>
        <name>stringmap_remove_internal</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Map</declname>
        </param>
        <param>
          <type><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref> **</type>
          <declname>Slot</declname>
        </param>
        <param>
          <type>long</type>
          <declname>Hash</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stringmap.c" line="131" column="13" bodyfile="src/stringmap.c" bodystart="131" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="stringmap_8c_1a0417ec748d22adad862d966c22117cb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * stringmap_remove</definition>
        <argsstring>(stringmap_t *Map, const char *Key)</argsstring>
        <name>stringmap_remove</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Map</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stringmap.c" line="163" column="6" bodyfile="src/stringmap.c" bodystart="163" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="stringmap_8c_1ac15be1b3f132d7292ff08a3e23fc9c51" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int stringmap_node_foreach</definition>
        <argsstring>(stringmap_node_t *Node, void *Data, int(*callback)(const char *, void *, void *))</argsstring>
        <name>stringmap_node_foreach</name>
        <param>
          <type><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref> *</type>
          <declname>Node</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>int(*)(const char *, void *, void *)</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stringmap.c" line="167" column="12" bodyfile="src/stringmap.c" bodystart="167" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="stringmap_8c_1ad12eec37972389dfeec0d3496cb81d61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stringmap_foreach</definition>
        <argsstring>(stringmap_t *Map, void *Data, int(*callback)(const char *, void *, void *))</argsstring>
        <name>stringmap_foreach</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Map</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>int(*)(const char *, void *, void *)</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stringmap.c" line="174" column="5" bodyfile="src/stringmap.c" bodystart="174" bodyend="176"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;stringmap.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="structstringmap__node__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref><sp/>*Left,<sp/>*Right;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Key;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Depth;</highlight></codeline>
<codeline lineno="11"><highlight class="normal">};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*stringmap_new()<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref>);</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>stringmap_hash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Key)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash<sp/>=<sp/>5381;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*P<sp/>=<sp/>Key;<sp/>P[0];<sp/>++P)<sp/>Hash<sp/>=<sp/>((Hash<sp/>&lt;&lt;<sp/>5)<sp/>+<sp/>Hash)<sp/>+<sp/>P[0];</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Hash;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compare(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Key,<sp/><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hash<sp/>&lt;<sp/>Node-&gt;Hash)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hash<sp/>&gt;<sp/>Node-&gt;Hash)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcmp(Key,<sp/>Node-&gt;Key);</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stringmap_search(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Key)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref><sp/>*Node<sp/>=<sp/>Map-&gt;Root;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash<sp/>=<sp/>stringmap_hash(Key);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Node)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>compare(Hash,<sp/>Key,<sp/>Node);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Compare)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Node-&gt;Value;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node<sp/>=<sp/>Compare<sp/>&lt;<sp/>0<sp/>?<sp/>Node-&gt;Left<sp/>:<sp/>Node-&gt;Right;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stringmap_balance(<ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Delta<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Left)<sp/>Delta<sp/>=<sp/>Node-&gt;Left-&gt;Depth;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Right)<sp/>Delta<sp/>-=<sp/>Node-&gt;Right-&gt;Depth;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Delta;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stringmap_update_depth(<ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Depth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Left)<sp/>Depth<sp/>=<sp/>Node-&gt;Left-&gt;Depth;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Right<sp/>&amp;&amp;<sp/>Depth<sp/>&lt;<sp/>Node-&gt;Right-&gt;Depth)<sp/>Depth<sp/>=<sp/>Node-&gt;Right-&gt;Depth;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>Node-&gt;Depth<sp/>=<sp/>Depth<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stringmap_rotate_left(<ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref><sp/>**Slot)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref><sp/>*Ch<sp/>=<sp/>Slot[0]-&gt;Right;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>Slot[0]-&gt;Right<sp/>=<sp/>Slot[0]-&gt;Right-&gt;Left;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>Ch-&gt;Left<sp/>=<sp/>Slot[0];</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_update_depth(Slot[0]);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Ch;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_update_depth(Slot[0]);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stringmap_rotate_right(<ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref><sp/>**Slot)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref><sp/>*Ch<sp/>=<sp/>Slot[0]-&gt;Left;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>Slot[0]-&gt;Left<sp/>=<sp/>Slot[0]-&gt;Left-&gt;Right;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>Ch-&gt;Right<sp/>=<sp/>Slot[0];</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_update_depth(Slot[0]);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Ch;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_update_depth(Slot[0]);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stringmap_rebalance(<ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref><sp/>**Slot)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Delta<sp/>=<sp/>stringmap_balance(Slot[0]);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Delta<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stringmap_balance(Slot[0]-&gt;Left)<sp/>&lt;<sp/>0)<sp/>stringmap_rotate_left(&amp;Slot[0]-&gt;Left);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_rotate_right(Slot);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Delta<sp/>==<sp/>-2)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stringmap_balance(Slot[0]-&gt;Right)<sp/>&gt;<sp/>0)<sp/>stringmap_rotate_right(&amp;Slot[0]-&gt;Right);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_rotate_left(Slot);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**stringmap_slot_internal(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Map,<sp/><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref><sp/>**Slot,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Key)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref><sp/>*Node<sp/>=<sp/>Slot[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Depth<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Hash<sp/>=<sp/>Hash;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node-&gt;Key<sp/>=<sp/>Key;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Map-&gt;Size;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(Node-&gt;Value);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>compare(Hash,<sp/>Key,<sp/>Slot[0]);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Compare)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;Slot[0]-&gt;Value;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Result<sp/>=<sp/>stringmap_slot_internal(Map,<sp/>Compare<sp/>&lt;<sp/>0<sp/>?<sp/>&amp;Slot[0]-&gt;Left<sp/>:<sp/>&amp;Slot[0]-&gt;Right,<sp/>Hash,<sp/>Key);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_rebalance(Slot);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_update_depth(Slot[0]);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**stringmap_slot(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Key)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stringmap_slot_internal(Map,<sp/>&amp;Map-&gt;Root,<sp/>stringmap_hash(Key),<sp/>Key);</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stringmap_insert(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Slot<sp/>=<sp/>stringmap_slot(Map,<sp/>Key);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Old<sp/>=<sp/>Slot[0];</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Old;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stringmap_hash_insert(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Map,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**Slot<sp/>=<sp/>stringmap_slot_internal(Map,<sp/>&amp;Map-&gt;Root,<sp/>Hash,<sp/>Key);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Old<sp/>=<sp/>Slot[0];</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Old;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stringmap_remove_depth_helper(<ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref><sp/>*Node)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_remove_depth_helper(Node-&gt;Right);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_update_depth(Node);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stringmap_remove_internal(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Map,<sp/><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref><sp/>**Slot,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Hash,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Key)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>compare(Hash,<sp/>Key,<sp/>Slot[0]);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Removed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Compare)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Removed<sp/>=<sp/>Slot[0]-&gt;Value;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Slot[0]-&gt;Left<sp/>&amp;&amp;<sp/>Slot[0]-&gt;Right)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref><sp/>**Y<sp/>=<sp/>&amp;Slot[0]-&gt;Left;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Y[0]-&gt;Right)<sp/>Y<sp/>=<sp/>&amp;Y[0]-&gt;Right;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]-&gt;Key<sp/>=<sp/>Y[0]-&gt;Key;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]-&gt;Hash<sp/>=<sp/>Y[0]-&gt;Hash;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]-&gt;Value<sp/>=<sp/>Y[0]-&gt;Value;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Y[0]<sp/>=<sp/>Y[0]-&gt;Left;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_remove_depth_helper(Slot[0]-&gt;Left);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Slot[0]-&gt;Left)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Slot[0]-&gt;Left;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Slot[0]-&gt;Right)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>Slot[0]-&gt;Right;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Map-&gt;Size;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Removed<sp/>=<sp/>stringmap_remove_internal(Map,<sp/>Compare<sp/>&lt;<sp/>0<sp/>?<sp/>&amp;Slot[0]-&gt;Left<sp/>:<sp/>&amp;Slot[0]-&gt;Right,<sp/>Hash,<sp/>Key);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_update_depth(Slot[0]);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_rebalance(Slot);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Removed;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*stringmap_remove(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Map,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Key)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stringmap_remove_internal(Map,<sp/>&amp;Map-&gt;Root,<sp/>stringmap_hash(Key),<sp/>Key);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stringmap_node_foreach(<ref refid="structstringmap__node__t" kindref="compound">stringmap_node_t</ref><sp/>*Node,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*callback)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(callback(Node-&gt;Key,<sp/>Node-&gt;Value,<sp/>Data))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Left<sp/>&amp;&amp;<sp/>stringmap_node_foreach(Node-&gt;Left,<sp/>Data,<sp/>callback))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Node-&gt;Right<sp/>&amp;&amp;<sp/>stringmap_node_foreach(Node-&gt;Right,<sp/>Data,<sp/>callback))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stringmap_foreach(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Map,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*callback)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Map-&gt;Root<sp/>?<sp/>stringmap_node_foreach(Map-&gt;Root,<sp/>Data,<sp/>callback)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/stringmap.c"/>
  </compounddef>
</doxygen>
