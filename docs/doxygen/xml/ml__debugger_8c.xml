<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__debugger_8c" kind="file" language="C++">
    <compoundname>ml_debugger.c</compoundname>
    <includes refid="ml__debugger_8h" local="yes">ml_debugger.h</includes>
    <includes refid="ml__runtime_8h" local="yes">ml_runtime.h</includes>
    <includes refid="ml__compiler_8h" local="yes">ml_compiler.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <incdepgraph>
      <node id="10">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_debugger.c</label>
        <link refid="ml__debugger_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ml_debugger.h</label>
        <link refid="ml__debugger_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="18">
        <label>gc/gc.h</label>
      </node>
      <node id="14">
        <label>limits.h</label>
      </node>
      <node id="13">
        <label>ml_config.h</label>
      </node>
      <node id="16">
        <label>setjmp.h</label>
      </node>
      <node id="8">
        <label>stdarg.h</label>
      </node>
      <node id="12">
        <label>stdint.h</label>
      </node>
      <node id="6">
        <label>stdio.h</label>
      </node>
      <node id="11">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
      <node id="9">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structinteractive__debugger__info__t" prot="public">interactive_debugger_info_t</innerclass>
    <innerclass refid="structdebug__thread__t" prot="public">debug_thread_t</innerclass>
    <innerclass refid="structinteractive__debugger__t" prot="public">interactive_debugger_t</innerclass>
    <innerclass refid="structbreakpoints__t" prot="public">breakpoints_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__debugger_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;debugger&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="10" column="10" bodyfile="src/ml_debugger.c" bodystart="10" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ml__debugger_8c_1a769b5906a44abccca39500be7d05349c" prot="public" static="no">
        <type>struct interactive_debugger_info_t</type>
        <definition>typedef struct interactive_debugger_info_t interactive_debugger_info_t</definition>
        <argsstring></argsstring>
        <name>interactive_debugger_info_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="12" column="42" bodyfile="src/ml_debugger.c" bodystart="12" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__debugger_8c_1ae1b3316ad1a8346af2f5f5223f8336cf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t *</type>
        <definition>static size_t * debugger_breakpoints</definition>
        <argsstring>(interactive_debugger_t *Debugger, const char *Source, int Max)</argsstring>
        <name>debugger_breakpoints</name>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Source</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="43" column="15" bodyfile="src/ml_debugger.c" bodystart="43" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1a83697c97f07395b5bc252041c0a61c05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * interactive_debugger_get</definition>
        <argsstring>(interactive_debugger_t *Debugger, const char *Name)</argsstring>
        <name>interactive_debugger_get</name>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="62" column="12" bodyfile="src/ml_debugger.c" bodystart="62" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1a2484aadd307ca5dc801091967d382258" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__source__t" kindref="compound">ml_source_t</ref></type>
        <definition>ml_source_t interactive_debugger_switch</definition>
        <argsstring>(interactive_debugger_t *Debugger, int Index)</argsstring>
        <name>interactive_debugger_switch</name>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="76" column="13" bodyfile="src/ml_debugger.c" bodystart="76" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1a8fb1edd94694628c6ccf8a62a2db65e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void interactive_debugger_resume</definition>
        <argsstring>(interactive_debugger_t *Debugger, int Index)</argsstring>
        <name>interactive_debugger_resume</name>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="84" column="6" bodyfile="src/ml_debugger.c" bodystart="84" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1a13dee8f809f502db4adeccd5134eba69" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int debugger_breakpoints_fn</definition>
        <argsstring>(const char *Module, breakpoints_t *Breakpoints, ml_value_t *Result)</argsstring>
        <name>debugger_breakpoints_fn</name>
        <param>
          <type>const char *</type>
          <declname>Module</declname>
        </param>
        <param>
          <type><ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref> *</type>
          <declname>Breakpoints</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="104" column="12" bodyfile="src/ml_debugger.c" bodystart="104" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1ae2e82bb2aa05601b134bf3e10fd1ace4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * debugger_breakpoints_list</definition>
        <argsstring>(interactive_debugger_t *Debugger, int Count, ml_value_t **Args)</argsstring>
        <name>debugger_breakpoints_list</name>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="119" column="19" bodyfile="src/ml_debugger.c" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1a7e7276592f6454308ae41b5052e31887" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * debugger_breakpoint_set</definition>
        <argsstring>(interactive_debugger_t *Debugger, int Count, ml_value_t **Args)</argsstring>
        <name>debugger_breakpoint_set</name>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="125" column="19" bodyfile="src/ml_debugger.c" bodystart="125" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1ac47abf4d4a8ef266865a572537fdca49" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * debugger_breakpoint_clear</definition>
        <argsstring>(interactive_debugger_t *Debugger, int Count, ml_value_t **Args)</argsstring>
        <name>debugger_breakpoint_clear</name>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="137" column="19" bodyfile="src/ml_debugger.c" bodystart="137" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1ad4fd0e6bd1222d77413195eb8e237a55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * debugger_breakpoint_toggle</definition>
        <argsstring>(interactive_debugger_t *Debugger, int Count, ml_value_t **Args)</argsstring>
        <name>debugger_breakpoint_toggle</name>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="149" column="19" bodyfile="src/ml_debugger.c" bodystart="149" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1af7b314089bfb660ee6fdd9eb7fa5c475" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void debugger_continue</definition>
        <argsstring>(ml_state_t *Caller, interactive_debugger_t *Debugger, int Count, ml_value_t **Args)</argsstring>
        <name>debugger_continue</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="162" column="13" bodyfile="src/ml_debugger.c" bodystart="162" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1aceb158f154f1dab3d6ba3c8c6a5ceb22" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void debugger_continue_all</definition>
        <argsstring>(ml_state_t *Caller, interactive_debugger_t *Debugger, int Count, ml_value_t **Args)</argsstring>
        <name>debugger_continue_all</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="171" column="13" bodyfile="src/ml_debugger.c" bodystart="171" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1ad89878cabce1ddac7bf0c090c3f97681" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void debugger_step_in</definition>
        <argsstring>(ml_state_t *Caller, interactive_debugger_t *Debugger, int Count, ml_value_t **Args)</argsstring>
        <name>debugger_step_in</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="180" column="13" bodyfile="src/ml_debugger.c" bodystart="180" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1af3a4f1d5eaddef511801f8fd3e9586fc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void debugger_step_over</definition>
        <argsstring>(ml_state_t *Caller, interactive_debugger_t *Debugger, int Count, ml_value_t **Args)</argsstring>
        <name>debugger_step_over</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="189" column="13" bodyfile="src/ml_debugger.c" bodystart="189" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1adc561a53a9f4c78ff64e8e7216399e67" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void debugger_step_out</definition>
        <argsstring>(ml_state_t *Caller, interactive_debugger_t *Debugger, int Count, ml_value_t **Args)</argsstring>
        <name>debugger_step_out</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="198" column="13" bodyfile="src/ml_debugger.c" bodystart="198" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1ae8545b4b5f8dc617f87b9e0115ef6a34" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * debugger_locals</definition>
        <argsstring>(interactive_debugger_t *Debugger, int Count, ml_value_t **Args)</argsstring>
        <name>debugger_locals</name>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="207" column="19" bodyfile="src/ml_debugger.c" bodystart="207" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1a858a949313db2a8ecafc40b3d4135d2d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * debugger_frames</definition>
        <argsstring>(interactive_debugger_t *Debugger, int Count, ml_value_t **Args)</argsstring>
        <name>debugger_frames</name>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="230" column="19" bodyfile="src/ml_debugger.c" bodystart="230" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1a243f1f8ab7a83ce447706bfe937debd9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * debugger_frame_up</definition>
        <argsstring>(interactive_debugger_t *Debugger, int Count, ml_value_t **Args)</argsstring>
        <name>debugger_frame_up</name>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="246" column="19" bodyfile="src/ml_debugger.c" bodystart="246" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1aadee73d1afc60a530291467507b2c2db" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * debugger_frame_down</definition>
        <argsstring>(interactive_debugger_t *Debugger, int Count, ml_value_t **Args)</argsstring>
        <name>debugger_frame_down</name>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="262" column="19" bodyfile="src/ml_debugger.c" bodystart="262" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1adf196152422a1726631edb4bbf3aaae3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * debugger_threads</definition>
        <argsstring>(interactive_debugger_t *Debugger, int Count, ml_value_t **Args)</argsstring>
        <name>debugger_threads</name>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="283" column="19" bodyfile="src/ml_debugger.c" bodystart="283" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1a0718d0e2c4037fc9e5aca819375c14fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * debugger_thread</definition>
        <argsstring>(interactive_debugger_t *Debugger, int Count, ml_value_t **Args)</argsstring>
        <name>debugger_thread</name>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="296" column="19" bodyfile="src/ml_debugger.c" bodystart="296" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1a8d8e1769e4471b5aac730f5f6091613b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void debugger_run</definition>
        <argsstring>(interactive_debugger_t *Debugger, ml_state_t *State, ml_value_t *Value)</argsstring>
        <name>debugger_run</name>
        <param>
          <type><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *</type>
          <declname>Debugger</declname>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="308" column="13" bodyfile="src/ml_debugger.c" bodystart="308" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1a187986b0a35230bebd008dbf7852bae0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void interactive_debugger_fnx</definition>
        <argsstring>(ml_state_t *Caller, interactive_debugger_info_t *Info, int Count, ml_value_t **Args)</argsstring>
        <name>interactive_debugger_fnx</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structinteractive__debugger__info__t" kindref="compound">interactive_debugger_info_t</ref> *</type>
          <declname>Info</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="331" column="13" bodyfile="src/ml_debugger.c" bodystart="331" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="ml__debugger_8c_1a5e66c063cdb4c0afd58f7375f554ef5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * interactive_debugger</definition>
        <argsstring>(void(*enter)(void *Data, interactive_debugger_t *Debugger, ml_source_t Source, int Index), void(*exit)(void *Data, interactive_debugger_t *Debugger, ml_state_t *Caller, int Index), void(*log)(void *Data, ml_value_t *Value), void *Data, ml_getter_t GlobalGet, void *Globals)</argsstring>
        <name>interactive_debugger</name>
        <param>
          <type>void(*)(void *Data, <ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *Debugger, <ref refid="structml__source__t" kindref="compound">ml_source_t</ref> Source, int Index)</type>
          <declname>enter</declname>
        </param>
        <param>
          <type>void(*)(void *Data, <ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref> *Debugger, <ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *Caller, int Index)</type>
          <declname>exit</declname>
        </param>
        <param>
          <type>void(*)(void *Data, <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *Value)</type>
          <declname>log</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>ml_getter_t</type>
          <declname>GlobalGet</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_debugger.c" line="375" column="12" bodyfile="src/ml_debugger.c" bodystart="375" bodyend="391"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ml_debugger.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_runtime.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_compiler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;debugger&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinteractive__debugger__info__t" kindref="compound">interactive_debugger_info_t</ref><sp/><ref refid="structinteractive__debugger__info__t" kindref="compound">interactive_debugger_info_t</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="structinteractive__debugger__info__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinteractive__debugger__info__t" kindref="compound">interactive_debugger_info_t</ref><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*enter)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*exit)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*log)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_getter_t<sp/>GlobalGet;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Globals;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="structdebug__thread__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/>*Active;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}<sp/><ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="structinteractive__debugger__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__debugger__t" kindref="compound">ml_debugger_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinteractive__debugger__info__t" kindref="compound">interactive_debugger_info_t</ref><sp/>*Info;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref><sp/>*Threads;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref><sp/>*ActiveThread;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>Globals[1];</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>Modules[1];</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MaxThreads,<sp/>NumThreads;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="structbreakpoints__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Count;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Bits[];</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}<sp/><ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*debugger_breakpoints(<ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Max)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref><sp/>**Slot<sp/>=<sp/>(<ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref><sp/>**)stringmap_slot(Debugger-&gt;Modules,<sp/>Source);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>(Max<sp/>+<sp/>SIZE_BITS)<sp/>/<sp/>SIZE_BITS;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref><sp/>*New<sp/>=<sp/>(<ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref><sp/>*)GC_MALLOC_ATOMIC(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref>)<sp/>+<sp/>Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(size_t));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(New-&gt;Bits,<sp/>0,<sp/>Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>New-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>New;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&gt;<sp/>Slot[0]-&gt;Count)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref><sp/>*Old<sp/>=<sp/>Slot[0];</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref><sp/>*New<sp/>=<sp/>(<ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref><sp/>*)GC_MALLOC_ATOMIC(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref>)<sp/>+<sp/>Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(size_t));</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(New-&gt;Bits,<sp/>0,<sp/>Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(New-&gt;Bits,<sp/>Old-&gt;Bits,<sp/>Old-&gt;Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>New-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot[0]<sp/>=<sp/>New;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Slot[0]-&gt;Bits;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*interactive_debugger_get(<ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)stringmap_search(Debugger-&gt;Globals,<sp/>Name);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref><sp/>*Thread<sp/>=<sp/>Debugger-&gt;ActiveThread;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Thread)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/>ml_debugger_decls(Thread-&gt;Active);<sp/>Decl;<sp/>Decl<sp/>=<sp/>Decl-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Decl-&gt;Ident,<sp/>Name))<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Decl-&gt;Value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Decl-&gt;Value;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_debugger_local(Thread-&gt;Active,<sp/>Decl-&gt;Index);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>interactive_debugger_switch(<ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>0<sp/>||<sp/>Index<sp/>&gt;=<sp/>Debugger-&gt;MaxThreads)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__source__t" kindref="compound">ml_source_t</ref>){</highlight><highlight class="stringliteral">&quot;Invalid<sp/>thread&quot;</highlight><highlight class="normal">,<sp/>Index};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref><sp/>*Thread<sp/>=<sp/>Debugger-&gt;Threads<sp/>+<sp/>Index;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Thread)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__source__t" kindref="compound">ml_source_t</ref>){</highlight><highlight class="stringliteral">&quot;Invalid<sp/>thread&quot;</highlight><highlight class="normal">,<sp/>Index};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;ActiveThread<sp/>=<sp/>Thread;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_debugger_source(Thread-&gt;Active);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interactive_debugger_resume(<ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref><sp/>*Thread;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thread<sp/>=<sp/>Debugger-&gt;ActiveThread;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debugger-&gt;ActiveThread<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>&lt;=<sp/>Index<sp/>&amp;&amp;<sp/>Index<sp/>&lt;<sp/>Debugger-&gt;MaxThreads)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thread<sp/>=<sp/>Debugger-&gt;Threads<sp/>+<sp/>Index;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>Thread-&gt;State;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Thread-&gt;Value;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thread-&gt;Active<sp/>=<sp/>Thread-&gt;State<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thread-&gt;Value<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Debugger-&gt;NumThreads;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>State-&gt;run(State,<sp/>Value);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debugger_breakpoints_fn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Module,<sp/><ref refid="structbreakpoints__t" kindref="compound">breakpoints_t</ref><sp/>*Breakpoints,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Lines<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Breakpoints-&gt;Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Bits<sp/>=<sp/>Breakpoints-&gt;Bits[I];</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Bits)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Bits<sp/>%<sp/>2)<sp/>ml_list_put(Lines,<sp/>ml_integer(SIZE_BITS<sp/>*<sp/>I<sp/>+<sp/>J));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++J;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bits<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_map_insert(Result,<sp/>ml_string(Module,<sp/>-1),<sp/>Lines);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*debugger_breakpoints_list(<ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_foreach(Debugger-&gt;Modules,<sp/>Result,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)debugger_breakpoints_fn);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*debugger_breakpoint_set(<ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>LineNo<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*Breakpoints<sp/>=<sp/>debugger_breakpoints(Debugger,<sp/>Source,<sp/>LineNo);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>Breakpoints[LineNo<sp/>/<sp/>SIZE_BITS]<sp/>|=<sp/>1L<sp/>&lt;&lt;<sp/>(LineNo<sp/>%<sp/>SIZE_BITS);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>++Debugger-&gt;Base.Revision;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>debugger_breakpoints_list(Debugger,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*debugger_breakpoint_clear(<ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>LineNo<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*Breakpoints<sp/>=<sp/>debugger_breakpoints(Debugger,<sp/>Source,<sp/>LineNo);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>Breakpoints[LineNo<sp/>/<sp/>SIZE_BITS]<sp/>&amp;=<sp/>~(1L<sp/>&lt;&lt;<sp/>(LineNo<sp/>%<sp/>SIZE_BITS));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>++Debugger-&gt;Base.Revision;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>debugger_breakpoints_list(Debugger,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*debugger_breakpoint_toggle(<ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>LineNo<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*Breakpoints<sp/>=<sp/>debugger_breakpoints(Debugger,<sp/>Source,<sp/>LineNo);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Bit<sp/>=<sp/>1L<sp/>&lt;&lt;<sp/>(LineNo<sp/>%<sp/>SIZE_BITS);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>Breakpoints[LineNo<sp/>/<sp/>SIZE_BITS]<sp/>^=<sp/>Bit;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>++Debugger-&gt;Base.Revision;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Breakpoints[LineNo<sp/>/<sp/>SIZE_BITS]<sp/>&amp;<sp/>Bit);</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>debugger_continue(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref><sp/>*Thread<sp/>=<sp/>Debugger-&gt;ActiveThread;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Thread)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Thread<sp/>-<sp/>Debugger-&gt;Threads;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Base.StepIn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_debugger_step_mode(Thread-&gt;State,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Debugger-&gt;Info-&gt;exit(Debugger-&gt;Info-&gt;Data,<sp/>Debugger,<sp/>Caller,<sp/>Index);</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>debugger_continue_all(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref><sp/>*Thread<sp/>=<sp/>Debugger-&gt;Threads;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Debugger-&gt;MaxThreads;<sp/>++I,<sp/>++Thread)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Thread-&gt;State)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debugger-&gt;Info-&gt;exit(Debugger-&gt;Info-&gt;Data,<sp/>Debugger,<sp/>Caller,<sp/>I);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>debugger_step_in(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref><sp/>*Thread<sp/>=<sp/>Debugger-&gt;ActiveThread;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Thread)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Base.StepIn<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Thread<sp/>-<sp/>Debugger-&gt;Threads;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_debugger_step_mode(Thread-&gt;State,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Debugger-&gt;Info-&gt;exit(Debugger-&gt;Info-&gt;Data,<sp/>Debugger,<sp/>Caller,<sp/>Index);</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>debugger_step_over(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref><sp/>*Thread<sp/>=<sp/>Debugger-&gt;ActiveThread;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Thread)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Base.StepIn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Thread<sp/>-<sp/>Debugger-&gt;Threads;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_debugger_step_mode(Thread-&gt;State,<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Debugger-&gt;Info-&gt;exit(Debugger-&gt;Info-&gt;Data,<sp/>Debugger,<sp/>Caller,<sp/>Index);</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>debugger_step_out(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref><sp/>*Thread<sp/>=<sp/>Debugger-&gt;ActiveThread;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Thread)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Base.StepIn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Thread<sp/>-<sp/>Debugger-&gt;Threads;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_debugger_step_mode(Thread-&gt;State,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Debugger-&gt;Info-&gt;exit(Debugger-&gt;Info-&gt;Data,<sp/>Debugger,<sp/>Caller,<sp/>Index);</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*debugger_locals(<ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref><sp/>*Thread<sp/>=<sp/>Debugger-&gt;ActiveThread;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Thread)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;DebugError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>active<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Frame<sp/>=<sp/>Thread-&gt;Active;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Depth<sp/>=<sp/>ml_integer_value(Args[0]);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--Depth<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame<sp/>=<sp/>Frame-&gt;Caller;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Frame)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;DebugError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>frame<sp/>depth&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!ml_debugger_check(Frame));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Locals<sp/>=<sp/>ml_map();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__decl__t" kindref="compound">ml_decl_t</ref><sp/>*Decl<sp/>=<sp/>ml_debugger_decls(Frame);<sp/>Decl;<sp/>Decl<sp/>=<sp/>Decl-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Decl-&gt;Value<sp/>?:<sp/>ml_debugger_local(Frame,<sp/>Decl-&gt;Index);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Value)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_map_insert(Locals,<sp/>ml_string(Decl-&gt;Ident,<sp/>-1),<sp/>Value);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Locals;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*debugger_frames(<ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref><sp/>*Thread<sp/>=<sp/>Debugger-&gt;ActiveThread;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Thread)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;DebugError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>active<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Backtrace<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Frame<sp/>=<sp/>Thread-&gt;Active;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Frame)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_debugger_check(Frame))<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source<sp/>=<sp/>ml_debugger_source(Frame);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Location<sp/>=<sp/>ml_tuplev(2,<sp/>ml_string(Source.Name,<sp/>-1),<sp/>ml_integer(Source.Line));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Backtrace,<sp/>Location);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame<sp/>=<sp/>Frame-&gt;Caller;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Backtrace;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*debugger_frame_up(<ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref><sp/>*Thread<sp/>=<sp/>Debugger-&gt;ActiveThread;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Thread)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;DebugError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>active<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Frame<sp/>=<sp/>Thread-&gt;Active;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame<sp/>=<sp/>Frame-&gt;Caller;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Frame<sp/>&amp;&amp;<sp/>!ml_debugger_check(Frame));</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thread-&gt;Active<sp/>=<sp/>Frame;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source<sp/>=<sp/>ml_debugger_source(Frame);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_tuplev(2,<sp/>ml_string(Source.Name,<sp/>-1),<sp/>ml_integer(Source.Line));</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TraceError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Reached<sp/>top<sp/>of<sp/>debugging<sp/>stack&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*debugger_frame_down(<ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref><sp/>*Thread<sp/>=<sp/>Debugger-&gt;ActiveThread;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Thread)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;DebugError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>active<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Frame<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Current<sp/>=<sp/>Thread-&gt;State;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Active<sp/>=<sp/>Thread-&gt;Active;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Current<sp/>!=<sp/>Active)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_debugger_check(Current))<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frame<sp/>=<sp/>Current;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Current<sp/>=<sp/>Current-&gt;Caller;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Frame)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thread-&gt;Active<sp/>=<sp/>Frame;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source<sp/>=<sp/>ml_debugger_source(Frame);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_tuplev(2,<sp/>ml_string(Source.Name,<sp/>-1),<sp/>ml_integer(Source.Line));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TraceError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Reached<sp/>bottom<sp/>of<sp/>debugging<sp/>stack&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*debugger_threads(<ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Threads<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref><sp/>*Thread<sp/>=<sp/>Debugger-&gt;Threads;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Debugger-&gt;MaxThreads;<sp/>++I,<sp/>++Thread)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Thread-&gt;State)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source<sp/>=<sp/>ml_debugger_source(Thread-&gt;Active);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Location<sp/>=<sp/>ml_tuplev(3,<sp/>ml_integer(I),<sp/>ml_string(Source.Name,<sp/>-1),<sp/>ml_integer(Source.Line));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Threads,<sp/>Location);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Threads;</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*debugger_thread(<ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>ml_integer_value_fast(Args[0]);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>0<sp/>||<sp/>Index<sp/>&gt;=<sp/>Debugger-&gt;MaxThreads)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;IndexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>thread<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref><sp/>*Thread<sp/>=<sp/>Debugger-&gt;Threads<sp/>+<sp/>Index;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Thread-&gt;State)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;IndexError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>thread<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;ActiveThread<sp/>=<sp/>Thread;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source<sp/>=<sp/>ml_debugger_source(Thread-&gt;Active);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_tuplev(2,<sp/>ml_string(Source.Name,<sp/>-1),<sp/>ml_integer(Source.Line));</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>debugger_run(<ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Debugger-&gt;NumThreads<sp/>==<sp/>Debugger-&gt;MaxThreads)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MaxThreads<sp/>=<sp/>2<sp/>*<sp/>Debugger-&gt;MaxThreads;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref><sp/>*Threads<sp/>=<sp/>anew(<ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref>,<sp/>MaxThreads);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Threads,<sp/>Debugger-&gt;Threads,<sp/>Debugger-&gt;MaxThreads<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref>));</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/><sp/>Debugger-&gt;ActiveThread<sp/>-<sp/>Debugger-&gt;Threads;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debugger-&gt;Threads<sp/>=<sp/>Threads;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debugger-&gt;MaxThreads<sp/>=<sp/>MaxThreads;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debugger-&gt;ActiveThread<sp/>=<sp/>Threads<sp/>+<sp/>Index;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>++Debugger-&gt;NumThreads;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref><sp/>*Thread<sp/>=<sp/>Debugger-&gt;Threads;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Thread-&gt;State)<sp/>++Thread;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>Thread-&gt;State<sp/>=<sp/>Thread-&gt;Active<sp/>=<sp/>State;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>Thread-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;ActiveThread<sp/>=<sp/>Thread;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source<sp/>=<sp/>ml_debugger_source(State);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Debugger-&gt;Info-&gt;log(Debugger-&gt;Info-&gt;Data,<sp/>Value);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Info-&gt;enter(Debugger-&gt;Info-&gt;Data,<sp/>Debugger,<sp/>Source,<sp/>Thread<sp/>-<sp/>Debugger-&gt;Threads);</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interactive_debugger_fnx(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structinteractive__debugger__info__t" kindref="compound">interactive_debugger_info_t</ref><sp/>*Info,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)debugger_run;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Base.breakpoints<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)debugger_breakpoints;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Base.Revision<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Base.StepIn<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Base.BreakOnError<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Info<sp/>=<sp/>Info;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;MaxThreads<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;NumThreads<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>Debugger-&gt;Threads<sp/>=<sp/>anew(<ref refid="structdebug__thread__t" kindref="compound">debug_thread_t</ref>,<sp/>16);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Debugger-&gt;Globals,<sp/></highlight><highlight class="stringliteral">&quot;breakpoint_set&quot;</highlight><highlight class="normal">,<sp/>ml_cfunction(Debugger,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)debugger_breakpoint_set));</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Debugger-&gt;Globals,<sp/></highlight><highlight class="stringliteral">&quot;breakpoint_clear&quot;</highlight><highlight class="normal">,<sp/>ml_cfunction(Debugger,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)debugger_breakpoint_clear));</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Debugger-&gt;Globals,<sp/></highlight><highlight class="stringliteral">&quot;breakpoint_toggle&quot;</highlight><highlight class="normal">,<sp/>ml_cfunction(Debugger,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)debugger_breakpoint_toggle));</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Debugger-&gt;Globals,<sp/></highlight><highlight class="stringliteral">&quot;breakpoints&quot;</highlight><highlight class="normal">,<sp/>ml_cfunction(Debugger,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)debugger_breakpoints_list));</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Debugger-&gt;Globals,<sp/></highlight><highlight class="stringliteral">&quot;continue&quot;</highlight><highlight class="normal">,<sp/>ml_cfunctionx(Debugger,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)debugger_continue));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Debugger-&gt;Globals,<sp/></highlight><highlight class="stringliteral">&quot;continue_all&quot;</highlight><highlight class="normal">,<sp/>ml_cfunctionx(Debugger,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)debugger_continue_all));</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Debugger-&gt;Globals,<sp/></highlight><highlight class="stringliteral">&quot;step_in&quot;</highlight><highlight class="normal">,<sp/>ml_cfunctionx(Debugger,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)debugger_step_in));</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Debugger-&gt;Globals,<sp/></highlight><highlight class="stringliteral">&quot;step_over&quot;</highlight><highlight class="normal">,<sp/>ml_cfunctionx(Debugger,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)debugger_step_over));</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Debugger-&gt;Globals,<sp/></highlight><highlight class="stringliteral">&quot;step_out&quot;</highlight><highlight class="normal">,<sp/>ml_cfunctionx(Debugger,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)debugger_step_out));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Debugger-&gt;Globals,<sp/></highlight><highlight class="stringliteral">&quot;locals&quot;</highlight><highlight class="normal">,<sp/>ml_cfunction(Debugger,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)debugger_locals));</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Debugger-&gt;Globals,<sp/></highlight><highlight class="stringliteral">&quot;frames&quot;</highlight><highlight class="normal">,<sp/>ml_cfunction(Debugger,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)debugger_frames));</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Debugger-&gt;Globals,<sp/></highlight><highlight class="stringliteral">&quot;frame_up&quot;</highlight><highlight class="normal">,<sp/>ml_cfunction(Debugger,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)debugger_frame_up));</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Debugger-&gt;Globals,<sp/></highlight><highlight class="stringliteral">&quot;frame_down&quot;</highlight><highlight class="normal">,<sp/>ml_cfunction(Debugger,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)debugger_frame_down));</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Debugger-&gt;Globals,<sp/></highlight><highlight class="stringliteral">&quot;threads&quot;</highlight><highlight class="normal">,<sp/>ml_cfunction(Debugger,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)debugger_threads));</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Debugger-&gt;Globals,<sp/></highlight><highlight class="stringliteral">&quot;thread&quot;</highlight><highlight class="normal">,<sp/>ml_cfunction(Debugger,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)debugger_thread));</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State<sp/>=<sp/>ml_state(Caller);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_context_set(State-&gt;Context,<sp/>ML_DEBUGGER_INDEX,<sp/>Debugger);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Args[0],<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__call__state__t" kindref="compound">ml_call_state_t</ref><sp/>*State2<sp/>=<sp/>ml_call_state(State,<sp/>1);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args2<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ml_list_put(Args2,<sp/>Args[I]);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State2-&gt;Args[0]<sp/>=<sp/>Args2;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*FileName<sp/>=<sp/>ml_string_value(Args[0]);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_load_file((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State2,<sp/>Info-&gt;GlobalGet,<sp/>Info-&gt;Globals,<sp/>FileName,<sp/>NULL);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Function<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Function,<sp/>Count<sp/>-<sp/>1,<sp/>Args<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*interactive_debugger(</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*enter)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/><ref refid="structml__source__t" kindref="compound">ml_source_t</ref><sp/>Source,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index),</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*exit)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/><ref refid="structinteractive__debugger__t" kindref="compound">interactive_debugger_t</ref><sp/>*Debugger,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index),</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*log)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value),</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_getter_t<sp/>GlobalGet,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Globals</highlight></codeline>
<codeline lineno="382"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinteractive__debugger__info__t" kindref="compound">interactive_debugger_info_t</ref><sp/>*Info<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structinteractive__debugger__info__t" kindref="compound">interactive_debugger_info_t</ref>);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;enter<sp/>=<sp/>enter;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;exit<sp/>=<sp/>exit;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;log<sp/>=<sp/>log;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Data<sp/>=<sp/>Data;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;GlobalGet<sp/>=<sp/>GlobalGet;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Globals<sp/>=<sp/>Globals;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_cfunctionx(Info,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)interactive_debugger_fnx);</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_debugger.c"/>
  </compounddef>
</doxygen>
