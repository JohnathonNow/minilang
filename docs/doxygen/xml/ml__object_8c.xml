<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__object_8c" kind="file" language="C++">
    <compoundname>ml_object.c</compoundname>
    <includes refid="minilang_8h" local="yes">minilang.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes refid="ml__object_8h" local="yes">ml_object.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="yes">ml_object_init.c</includes>
    <incdepgraph>
      <node id="13">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_object.c</label>
        <link refid="ml__object_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ml_object.h</label>
        <link refid="ml__object_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="18">
        <label>gc/gc.h</label>
      </node>
      <node id="16">
        <label>limits.h</label>
      </node>
      <node id="15">
        <label>ml_config.h</label>
      </node>
      <node id="20">
        <label>ml_object_init.c</label>
      </node>
      <node id="6">
        <label>setjmp.h</label>
      </node>
      <node id="11">
        <label>stdarg.h</label>
      </node>
      <node id="14">
        <label>stdint.h</label>
      </node>
      <node id="9">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
      <node id="4">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__init__state__t" prot="public">ml_init_state_t</innerclass>
    <innerclass refid="structml__named__type__t" prot="public">ml_named_type_t</innerclass>
    <innerclass refid="structml__named__init__state__t" prot="public">ml_named_init_state_t</innerclass>
    <innerclass refid="structml__modified__field__t" prot="public">ml_modified_field_t</innerclass>
    <innerclass refid="structml__field__modifier__t" prot="public">ml_field_modifier_t</innerclass>
    <innerclass refid="structml__watcher__type__t" prot="public">ml_watcher_type_t</innerclass>
    <innerclass refid="structml__property__t" prot="public">ml_property_t</innerclass>
    <innerclass refid="structml__class__field__find__t" prot="public">ml_class_field_find_t</innerclass>
    <innerclass refid="structml__enum__value__t" prot="public">ml_enum_value_t</innerclass>
    <innerclass refid="structml__enum__t" prot="public">ml_enum_t</innerclass>
    <innerclass refid="structml__enum__iter__t" prot="public">ml_enum_iter_t</innerclass>
    <innerclass refid="structml__enum__range__iter__t" prot="public">ml_enum_range_iter_t</innerclass>
    <innerclass refid="structml__enum__range__t" prot="public">ml_enum_range_t</innerclass>
    <innerclass refid="structml__enum__switch__t" prot="public">ml_enum_switch_t</innerclass>
    <innerclass refid="structml__flags__t" prot="public">ml_flags_t</innerclass>
    <innerclass refid="structml__flags__value__t" prot="public">ml_flags_value_t</innerclass>
    <innerclass refid="structml__flags__value__append__t" prot="public">ml_flags_value_append_t</innerclass>
    <innerclass refid="structml__flags__spec__t" prot="public">ml_flags_spec_t</innerclass>
    <innerclass refid="structml__flags__case__t" prot="public">ml_flags_case_t</innerclass>
    <innerclass refid="structml__flags__switch__t" prot="public">ml_flags_switch_t</innerclass>
    <innerclass refid="structml__flags__value__list__t" prot="public">ml_flags_value_list_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__object_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;object&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="8" column="10" bodyfile="src/ml_object.c" bodystart="8" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ml__object_8c_1ab2e41035c4fd1d546aef2c4d5170e248" prot="public" static="no">
        <type>struct ml_property_t</type>
        <definition>typedef struct ml_property_t ml_property_t</definition>
        <argsstring></argsstring>
        <name>ml_property_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="570" column="15"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="ml__object_8c_1a5d7b1a70eeda9c69c91667ddbb7c4ed3" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref></type>
        <definition>ml_cfunctionx_t MLClass[]</definition>
        <argsstring>[]</argsstring>
        <name>MLClass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="144" column="24" declfile="src/ml_object.c" declline="144" declcolumn="24"/>
      </memberdef>
      <memberdef kind="variable" id="ml__object_8c_1add4fc96ee72978036ee8c68553da83b9" prot="public" static="no" extern="yes" mutable="no">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref></type>
        <definition>ml_type_t MLPropertyT[]</definition>
        <argsstring>[]</argsstring>
        <name>MLPropertyT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="584" column="18" declfile="src/ml_object.c" declline="584" declcolumn="18"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__object_8c_1a784f201c2cbdcc08cbfef78ff7a3577e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_field_deref</definition>
        <argsstring>(ml_field_t *Field)</argsstring>
        <name>ml_field_deref</name>
        <param>
          <type><ref refid="structml__field__t" kindref="compound">ml_field_t</ref> *</type>
          <declname>Field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="11" column="19" bodyfile="src/ml_object.c" bodystart="11" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1af4b589caa7fac9a40b9b5ff8200c2f07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLFieldT,(), &quot;field&quot;,.deref=(void *) ml_field_deref)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLFieldT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;field&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>deref</declname>
          <defval>(void *) ml_field_deref</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="15" column="1" declfile="src/ml_object.c" declline="15" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1aa56432b7404832d4557e7ae3509d7fc2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_field_assign</definition>
        <argsstring>(ml_state_t *Caller, ml_field_t *Field, ml_value_t *Value)</argsstring>
        <name>ml_field_assign</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__field__t" kindref="compound">ml_field_t</ref> *</type>
          <declname>Field</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="19" column="13" bodyfile="src/ml_object.c" bodystart="19" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1ae486a5592085cdd0a54b16d974ffd75c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLFieldMutableT,(MLFieldT), &quot;field::mutable&quot;,.deref=(void *) ml_field_deref,.assign=(void *) ml_field_assign)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLFieldMutableT</type>
        </param>
        <param>
          <type>(MLFieldT)</type>
        </param>
        <param>
          <type>&quot;field::mutable&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>deref</declname>
          <defval>(void *) ml_field_deref</defval>
        </param>
        <param>
          <type>.</type>
          <declname>assign</declname>
          <defval>(void *) ml_field_assign</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="25" column="1" declfile="src/ml_object.c" declline="25" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a67e646f6a9ac85d0c57a751d0473030a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_field_fn</definition>
        <argsstring>(void *Data, int Count, ml_value_t **Args)</argsstring>
        <name>ml_field_fn</name>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="30" column="12" bodyfile="src/ml_object.c" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1afa13c13fdf594b90f0be03deccdb73ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLFieldOwnerT,(), &quot;field::owner&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLFieldOwnerT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;field::owner&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="35" column="1" declfile="src/ml_object.c" declline="35" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a879ddfefbf2438a69f766cd6681ad4ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__object__t" kindref="compound">ml_object_t</ref> *</type>
        <definition>ml_object_t * ml_field_owner</definition>
        <argsstring>(ml_field_t *Field)</argsstring>
        <name>ml_field_owner</name>
        <param>
          <type><ref refid="structml__field__t" kindref="compound">ml_field_t</ref> *</type>
          <declname>Field</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="38" column="13" bodyfile="src/ml_object.c" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1ac80cf8258b5c16b08b0cfb8f13204d51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_INTERFACE</definition>
        <argsstring>(MLObjectT,(), &quot;object&quot;)</argsstring>
        <name>ML_INTERFACE</name>
        <param>
          <type>MLObjectT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;object&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="43" column="1" declfile="src/ml_object.c" declline="43" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a1ca6d115531602f384a15b7be9072d2a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_init_state_run</definition>
        <argsstring>(ml_init_state_t *State, ml_value_t *Result)</argsstring>
        <name>ml_init_state_run</name>
        <param>
          <type><ref refid="structml__init__state__t" kindref="compound">ml_init_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="52" column="13" bodyfile="src/ml_object.c" bodystart="52" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a282fbaee328822cd9d43169e9b857e84" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_object_constructor_fn</definition>
        <argsstring>(ml_state_t *Caller, ml_class_t *Class, int Count, ml_value_t **Args)</argsstring>
        <name>ml_object_constructor_fn</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__class__t" kindref="compound">ml_class_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="64" column="13" bodyfile="src/ml_object.c" bodystart="64" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a32404260ed6b46facc478f5ce9edf92f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_value_find_all, MLObjectT, ml_object_t *Value, void *Data, ml_value_find_fn RefFn)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_find_all</type>
        </param>
        <param>
          <type>MLObjectT</type>
        </param>
        <param>
          <type><ref refid="structml__object__t" kindref="compound">ml_object_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>ml_value_find_fn</type>
          <declname>RefFn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="117" column="13" bodyfile="src/ml_object.c" bodystart="117" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a5bdad040de8676902d559565551fa454" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ML_TYPED_FN</definition>
        <argsstring>(ml_value_is_constant, MLObjectT, ml_object_t *Value)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_is_constant</type>
        </param>
        <param>
          <type>MLObjectT</type>
        </param>
        <param>
          <type><ref refid="structml__object__t" kindref="compound">ml_object_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="123" column="12" bodyfile="src/ml_object.c" bodystart="123" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a0e7e41613bb9ec86e9757e8d83cbd149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;::&quot;, MLObjectT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;::&quot;</type>
        </param>
        <param>
          <type>MLObjectT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="132" column="1" bodyfile="src/ml_object.c" bodystart="132" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1aa57c22860432cdf1d8a66df17a3b3178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLClassT,(MLTypeT), &quot;class&quot;,.call=(void *) ml_type_call,.Constructor=(ml_value_t *) MLClass)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLClassT</type>
        </param>
        <param>
          <type>(MLTypeT)</type>
        </param>
        <param>
          <type>&quot;class&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_type_call</defval>
          <briefdescription><para>object </para>
</briefdescription>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLClass</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="146" column="1" declfile="src/ml_object.c" declline="146" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1ae4233d28d8801c6122532f042248ce04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;fields&quot;, MLClassT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;fields&quot;</type>
        </param>
        <param>
          <type>MLClassT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="153" column="1" bodyfile="src/ml_object.c" bodystart="153" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a7e5de8a348d7c593d68ae8e31db7fecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLObjectT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLObjectT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="162" column="1" bodyfile="src/ml_object.c" bodystart="162" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a23baeca41f4a48f39aad9b039a3d87a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLNamedTypeT,(MLTypeT), &quot;named-type&quot;,.call=(void *) ml_type_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLNamedTypeT</type>
        </param>
        <param>
          <type>(MLTypeT)</type>
        </param>
        <param>
          <type>&quot;named-type&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_type_call</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="188" column="1" declfile="src/ml_object.c" declline="188" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a990d679ba7974562b7fc33c4c28f0578" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_named_init_state_run</definition>
        <argsstring>(ml_named_init_state_t *State, ml_value_t *Result)</argsstring>
        <name>ml_named_init_state_run</name>
        <param>
          <type><ref refid="structml__named__init__state__t" kindref="compound">ml_named_init_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="202" column="13" bodyfile="src/ml_object.c" bodystart="202" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a2f02940e58686b5ba08013218f1367e7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_named_constructor_fn</definition>
        <argsstring>(ml_state_t *Caller, ml_named_type_t *Class, int Count, ml_value_t **Args)</argsstring>
        <name>ml_named_constructor_fn</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__named__type__t" kindref="compound">ml_named_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="221" column="13" bodyfile="src/ml_object.c" bodystart="221" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a64637aedbd3ac2c762c20a2eab62c7d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_named_initializer_fn</definition>
        <argsstring>(ml_state_t *Caller, ml_named_type_t *Class, int Count, ml_value_t **Args)</argsstring>
        <name>ml_named_initializer_fn</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__named__type__t" kindref="compound">ml_named_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="231" column="13" bodyfile="src/ml_object.c" bodystart="231" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a8545e8f7d54be123d21746d072a2ef45" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * get_field_fn</definition>
        <argsstring>(int Index)</argsstring>
        <name>get_field_fn</name>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="244" column="19" bodyfile="src/ml_object.c" bodystart="244" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a4dffd2ccf2c93883ff795d4696b390c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void add_field</definition>
        <argsstring>(ml_context_t *Context, ml_class_t *Class, ml_value_t *Method, ml_type_t *Type)</argsstring>
        <name>add_field</name>
        <param>
          <type><ref refid="structml__context__t" kindref="compound">ml_context_t</ref> *</type>
          <declname>Context</declname>
        </param>
        <param>
          <type><ref refid="structml__class__t" kindref="compound">ml_class_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Method</declname>
        </param>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="260" column="13" bodyfile="src/ml_object.c" bodystart="260" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a18d82bd95fad2865b096af5a154a734b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>ml_type_t * ml_class</definition>
        <argsstring>(const char *Name)</argsstring>
        <name>ml_class</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="280" column="11" bodyfile="src/ml_object.c" bodystart="280" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a414a1b1904fd6f4c13a404fd65328235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_class_add_parent</definition>
        <argsstring>(ml_context_t *Context, ml_type_t *Class0, ml_type_t *Parent0)</argsstring>
        <name>ml_class_add_parent</name>
        <param>
          <type><ref refid="structml__context__t" kindref="compound">ml_context_t</ref> *</type>
          <declname>Context</declname>
        </param>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class0</declname>
        </param>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Parent0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="299" column="6" bodyfile="src/ml_object.c" bodystart="299" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a617dd9654c6d5559c1e1d3d9f1d15989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_class_add_field</definition>
        <argsstring>(ml_context_t *Context, ml_type_t *Class0, ml_value_t *Field, ml_type_t *Type)</argsstring>
        <name>ml_class_add_field</name>
        <param>
          <type><ref refid="structml__context__t" kindref="compound">ml_context_t</ref> *</type>
          <declname>Context</declname>
        </param>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class0</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Field</declname>
        </param>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="309" column="6" bodyfile="src/ml_object.c" bodystart="309" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1adf22ad4042d7c0d90920e3f9f6226e28" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_object_call</definition>
        <argsstring>(ml_state_t *Caller, ml_object_t *Object, int Count, ml_value_t **Args)</argsstring>
        <name>ml_object_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__object__t" kindref="compound">ml_object_t</ref> *</type>
          <declname>Object</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="314" column="13" bodyfile="src/ml_object.c" bodystart="314" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a3213cb60e8d82e3cf0b0535fa927b417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_class_modify</definition>
        <argsstring>(ml_context_t *Context, ml_class_t *Class, ml_value_t *Modifier)</argsstring>
        <name>ml_class_modify</name>
        <param>
          <type><ref refid="structml__context__t" kindref="compound">ml_context_t</ref> *</type>
          <declname>Context</declname>
        </param>
        <param>
          <type><ref refid="structml__class__t" kindref="compound">ml_class_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Modifier</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="321" column="12" bodyfile="src/ml_object.c" bodystart="321" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1ab1aaa5554c412617f40974cc114b17e7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_class_modify, MLMethodT, ml_context_t *Context, ml_class_t *Class, ml_value_t *Field)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_class_modify</type>
        </param>
        <param>
          <type>MLMethodT</type>
        </param>
        <param>
          <type><ref refid="structml__context__t" kindref="compound">ml_context_t</ref> *</type>
          <declname>Context</declname>
        </param>
        <param>
          <type><ref refid="structml__class__t" kindref="compound">ml_class_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="327" column="19" bodyfile="src/ml_object.c" bodystart="327" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1af160786974b267efae5e88ae17907b67" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_class_modify, MLClassT, ml_context_t *Context, ml_class_t *Class, ml_class_t *Parent)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_class_modify</type>
        </param>
        <param>
          <type>MLClassT</type>
        </param>
        <param>
          <type><ref refid="structml__context__t" kindref="compound">ml_context_t</ref> *</type>
          <declname>Context</declname>
        </param>
        <param>
          <type><ref refid="structml__class__t" kindref="compound">ml_class_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structml__class__t" kindref="compound">ml_class_t</ref> *</type>
          <declname>Parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="332" column="19" bodyfile="src/ml_object.c" bodystart="332" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a65d4bc7db8695002512ed120750c1e53" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_class_modify, MLTypeT, ml_context_t *Context, ml_class_t *Class, ml_type_t *Parent)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_class_modify</type>
        </param>
        <param>
          <type>MLTypeT</type>
        </param>
        <param>
          <type><ref refid="structml__context__t" kindref="compound">ml_context_t</ref> *</type>
          <declname>Context</declname>
        </param>
        <param>
          <type><ref refid="structml__class__t" kindref="compound">ml_class_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="345" column="19" bodyfile="src/ml_object.c" bodystart="345" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1aee47bec03397aa5118a004073c227b38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONZ</definition>
        <argsstring>(MLClass)</argsstring>
        <name>ML_FUNCTIONZ</name>
        <param>
          <type>MLClass</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>object</para>
        </inbodydescription>
        <location file="src/ml_object.c" line="351" column="1" bodyfile="src/ml_object.c" bodystart="351" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1ac4c3ee7729b5dba387e6fbef9f815621" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_class_set_name_fn</definition>
        <argsstring>(const char *Export, ml_value_t *Value, const char *Prefix)</argsstring>
        <name>ml_class_set_name_fn</name>
        <param>
          <type>const char *</type>
          <declname>Export</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Prefix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="460" column="12" bodyfile="src/ml_object.c" bodystart="460" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a89ddd682c0e23155e75a2d95c916ab16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_value_set_name, MLNamedTypeT, ml_named_type_t *Class, const char *Name)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_set_name</type>
        </param>
        <param>
          <type>MLNamedTypeT</type>
        </param>
        <param>
          <type><ref refid="structml__named__type__t" kindref="compound">ml_named_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="467" column="13" bodyfile="src/ml_object.c" bodystart="467" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a85fd8560518af19bbdc60ece0ae01f04" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_value_set_name, MLClassT, ml_class_t *Class, const char *Name)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_set_name</type>
        </param>
        <param>
          <type>MLClassT</type>
        </param>
        <param>
          <type><ref refid="structml__class__t" kindref="compound">ml_class_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="472" column="13" bodyfile="src/ml_object.c" bodystart="472" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a1ad1963244e20fd868c8ed8b9424b78e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLModifiedFieldT,(), &quot;modified-field&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLModifiedFieldT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;modified-field&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="483" column="1" declfile="src/ml_object.c" declline="483" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1aa9496be0561dc1d54c67d025874bdfa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_modified_field</definition>
        <argsstring>(ml_value_t *Field, ml_type_t *Type)</argsstring>
        <name>ml_modified_field</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Field</declname>
        </param>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Type</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="486" column="12" bodyfile="src/ml_object.c" bodystart="486" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a3faf2f3889a0f51189872afc22e37085" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ML_TYPED_FN</definition>
        <argsstring>(ml_class_modify, MLModifiedFieldT, ml_context_t *Context, ml_class_t *Class, ml_modified_field_t *Modified)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_class_modify</type>
        </param>
        <param>
          <type>MLModifiedFieldT</type>
        </param>
        <param>
          <type><ref refid="structml__context__t" kindref="compound">ml_context_t</ref> *</type>
          <declname>Context</declname>
        </param>
        <param>
          <type><ref refid="structml__class__t" kindref="compound">ml_class_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type><ref refid="structml__modified__field__t" kindref="compound">ml_modified_field_t</ref> *</type>
          <declname>Modified</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="494" column="19" bodyfile="src/ml_object.c" bodystart="494" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1aeed61bd558935419e160662ee7e2229d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLFieldModifierT,(), &quot;field-modifier&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLFieldModifierT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;field-modifier&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="504" column="1" declfile="src/ml_object.c" declline="504" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1ace8aeda1444811b8ff8ad5ba3ac1f8e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_field_modifier</definition>
        <argsstring>(ml_type_t *Type)</argsstring>
        <name>ml_field_modifier</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Type</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="507" column="12" bodyfile="src/ml_object.c" bodystart="507" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a14f52fe47cc9b0fa2640111edb28878f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLMethodDefault, MLMethodT, MLFieldModifierT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLMethodDefault</type>
        </param>
        <param>
          <type>MLMethodT</type>
        </param>
        <param>
          <type>MLFieldModifierT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="514" column="1" bodyfile="src/ml_object.c" bodystart="514" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a65cf8de2628a73957febb5e2cbf838a9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_watched_field_deref</definition>
        <argsstring>(ml_field_t *Field)</argsstring>
        <name>ml_watched_field_deref</name>
        <param>
          <type><ref refid="structml__field__t" kindref="compound">ml_field_t</ref> *</type>
          <declname>Field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="524" column="19" bodyfile="src/ml_object.c" bodystart="524" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a6e19909bc15f8956acd77238b209dae3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_watched_field_assign</definition>
        <argsstring>(ml_state_t *Caller, ml_field_t *Field, ml_value_t *Value)</argsstring>
        <name>ml_watched_field_assign</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__field__t" kindref="compound">ml_field_t</ref> *</type>
          <declname>Field</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="528" column="13" bodyfile="src/ml_object.c" bodystart="528" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a2944d79192dc665f44074386992f57d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLFieldWatcherT,(), &quot;field-watcher&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLFieldWatcherT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;field-watcher&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="538" column="1" declfile="src/ml_object.c" declline="538" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1ae6efb29bee2094cb210b7ce485927842" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_VALUE</definition>
        <argsstring>(MLFieldWatcher, MLFieldWatcherT)</argsstring>
        <name>ML_VALUE</name>
        <param>
          <type>MLFieldWatcher</type>
        </param>
        <param>
          <type>MLFieldWatcherT</type>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="541" column="1" declfile="src/ml_object.c" declline="541" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a817595acb5b45fac4659c663f9ec8eb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLMethodDefault, MLMethodT, MLFieldWatcherT, MLFunctionT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLMethodDefault</type>
        </param>
        <param>
          <type>MLMethodT</type>
        </param>
        <param>
          <type>MLFieldWatcherT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="543" column="1" bodyfile="src/ml_object.c" bodystart="543" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a72cc072d5601a1da9736531a61ddf52c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_value_set_name, MLObjectT, ml_object_t *Object, const char *Name)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_set_name</type>
        </param>
        <param>
          <type>MLObjectT</type>
        </param>
        <param>
          <type><ref refid="structml__object__t" kindref="compound">ml_object_t</ref> *</type>
          <declname>Object</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="557" column="13" bodyfile="src/ml_object.c" bodystart="557" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a0304d8731e5769d77b499aaf56a1c4f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_property_deref</definition>
        <argsstring>(ml_property_t *Property)</argsstring>
        <name>ml_property_deref</name>
        <param>
          <type><ref refid="structml__property__t" kindref="compound">ml_property_t</ref> *</type>
          <declname>Property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="572" column="19" bodyfile="src/ml_object.c" bodystart="572" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a62aa96011f7a347baf576d7c0163d3f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_property_assign</definition>
        <argsstring>(ml_state_t *Caller, ml_property_t *Property, ml_value_t *Value)</argsstring>
        <name>ml_property_assign</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__property__t" kindref="compound">ml_property_t</ref> *</type>
          <declname>Property</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="576" column="13" bodyfile="src/ml_object.c" bodystart="576" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a516618c7befbe8fffab8451201421049" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_property_call</definition>
        <argsstring>(ml_state_t *Caller, ml_property_t *Property, int Count, ml_value_t **Args)</argsstring>
        <name>ml_property_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__property__t" kindref="compound">ml_property_t</ref> *</type>
          <declname>Property</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="580" column="13" bodyfile="src/ml_object.c" bodystart="580" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a04c84fb0624db3826340726bbc839d75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(MLProperty)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>MLProperty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="586" column="1" bodyfile="src/ml_object.c" bodystart="586" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a25ee34b8fc8e7e543933d65dd1b2c93b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLPropertyT,(), &quot;property&quot;,.deref=(void *) ml_property_deref,.assign=(void *) ml_property_assign,.call=(void *) ml_property_call,.Constructor=(ml_value_t *) MLProperty)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLPropertyT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;property&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>deref</declname>
          <defval>(void *) ml_property_deref</defval>
        </param>
        <param>
          <type>.</type>
          <declname>assign</declname>
          <defval>(void *) ml_property_assign</defval>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_property_call</defval>
        </param>
        <param>
          <type>.</type>
          <declname>Constructor</declname>
          <defval>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *) MLProperty</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="600" column="1" declfile="src/ml_object.c" declline="600" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a72b9060994dae637002560fa0fd76d1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ml_class_size</definition>
        <argsstring>(const ml_type_t *Value)</argsstring>
        <name>ml_class_size</name>
        <param>
          <type>const <ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="608" column="8" bodyfile="src/ml_object.c" bodystart="608" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a833a3ac3f65c1e92f7e3e0b27460e40f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_class_field_fn</definition>
        <argsstring>(const char *Name, ml_field_info_t *Info, ml_class_field_find_t *Find)</argsstring>
        <name>ml_class_field_fn</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type><ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref> *</type>
          <declname>Info</declname>
        </param>
        <param>
          <type><ref refid="structml__class__field__find__t" kindref="compound">ml_class_field_find_t</ref> *</type>
          <declname>Find</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="617" column="12" bodyfile="src/ml_object.c" bodystart="617" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a0ac288cb627f621d1b8bd67a6dcdbda5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ml_class_field_name</definition>
        <argsstring>(const ml_type_t *Class, int Index)</argsstring>
        <name>ml_class_field_name</name>
        <param>
          <type>const <ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="625" column="12" bodyfile="src/ml_object.c" bodystart="625" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a564914c7b92b365e4e72e3ad63eab02a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_object</definition>
        <argsstring>(ml_type_t *Class0,...)</argsstring>
        <name>ml_object</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Class0</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="631" column="12" bodyfile="src/ml_object.c" bodystart="631" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a1b7379af710459b4f746fc6b0ac93499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t ml_object_size</definition>
        <argsstring>(const ml_value_t *Value)</argsstring>
        <name>ml_object_size</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="658" column="8" bodyfile="src/ml_object.c" bodystart="658" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a121c0c0ca7a24a8c97eaef95b27d9e5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_object_field</definition>
        <argsstring>(const ml_value_t *Value, int Index)</argsstring>
        <name>ml_object_field</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="662" column="12" bodyfile="src/ml_object.c" bodystart="662" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a3dc2836e3b0b59a77211f42a04098e1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_object_foreach</definition>
        <argsstring>(const ml_value_t *Value, void *Data, int(*callback)(const char *, ml_value_t *, void *))</argsstring>
        <name>ml_object_foreach</name>
        <param>
          <type>const <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>int(*)(const char *, <ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *, void *)</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="666" column="6" bodyfile="src/ml_object.c" bodystart="666" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a4f5048e292be69861b1f1d16e027c5e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long ml_enum_value_hash</definition>
        <argsstring>(ml_enum_value_t *Value, ml_hash_chain_t *Chain)</argsstring>
        <name>ml_enum_value_hash</name>
        <param>
          <type><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref> *</type>
          <declname>Chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="690" column="13" bodyfile="src/ml_object.c" bodystart="690" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a2dba0dd0a39ef330428d3f5cc754700f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLEnumValueT,(MLIntegerT), &quot;enum-value&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLEnumValueT</type>
        </param>
        <param>
          <type>(MLIntegerT)</type>
        </param>
        <param>
          <type>&quot;enum-value&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="698" column="1" declfile="src/ml_object.c" declline="698" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a761c348b7dd0a844c8cda9424817b628" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLEnumValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLEnumValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="706" column="1" bodyfile="src/ml_object.c" bodystart="706" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a6806726893effd394b46d24e85a13490" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_enum_call</definition>
        <argsstring>(ml_state_t *Caller, ml_enum_t *Enum, int Count, ml_value_t **Args)</argsstring>
        <name>ml_enum_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref> *</type>
          <declname>Enum</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="713" column="13" bodyfile="src/ml_object.c" bodystart="713" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a782c41b4e5b80deda01db0a6f2476880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLEnumT,(MLTypeT, MLSequenceT), &quot;enum&quot;,.call=(void *) ml_enum_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLEnumT</type>
        </param>
        <param>
          <type>(MLTypeT, MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;enum&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_enum_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="732" column="1" declfile="src/ml_object.c" declline="732" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a65e3619ac73d3052563ea65514925e23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLEnumCyclicT,(MLEnumT), &quot;enum::cyclic&quot;,.call=(void *) ml_enum_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLEnumCyclicT</type>
        </param>
        <param>
          <type>(MLEnumT)</type>
        </param>
        <param>
          <type>&quot;enum::cyclic&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_enum_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="737" column="1" declfile="src/ml_object.c" declline="737" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a6b8eaafa0652605738215a95a4b943d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_value_set_name, MLEnumT, ml_enum_t *Enum, const char *Name)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_set_name</type>
        </param>
        <param>
          <type>MLEnumT</type>
        </param>
        <param>
          <type><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref> *</type>
          <declname>Enum</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="742" column="13" bodyfile="src/ml_object.c" bodystart="742" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1affb56d1f772f77128de6e35243854fcb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_enum_string_fn</definition>
        <argsstring>(void *Type, int Count, ml_value_t **Args)</argsstring>
        <name>ml_enum_string_fn</name>
        <param>
          <type>void *</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="746" column="19" bodyfile="src/ml_object.c" bodystart="746" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1ae8ded1cd7fe133352c081ff618d1e0e5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_enum_names_fn</definition>
        <argsstring>(void *Type, int Count, ml_value_t **Args)</argsstring>
        <name>ml_enum_names_fn</name>
        <param>
          <type>void *</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="768" column="19" bodyfile="src/ml_object.c" bodystart="768" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a5b570b3e5b7d6e3d695ad5f1b150c9f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>ml_type_t * ml_enum</definition>
        <argsstring>(const char *TypeName,...)</argsstring>
        <name>ml_enum</name>
        <param>
          <type>const char *</type>
          <declname>TypeName</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="915" column="11" bodyfile="src/ml_object.c" bodystart="915" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a036b70baf3a4020689cdede4d9abc652" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>ml_type_t * ml_enum_cyclic</definition>
        <argsstring>(const char *TypeName,...)</argsstring>
        <name>ml_enum_cyclic</name>
        <param>
          <type>const char *</type>
          <declname>TypeName</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="947" column="11" bodyfile="src/ml_object.c" bodystart="947" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a1aebcc7057589ae83011d04091d1b1fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>ml_type_t * ml_enum2</definition>
        <argsstring>(const char *TypeName,...)</argsstring>
        <name>ml_enum2</name>
        <param>
          <type>const char *</type>
          <declname>TypeName</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="979" column="11" bodyfile="src/ml_object.c" bodystart="979" bodyend="1011"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1ad49d5b4ce45b9cbf885e469757803f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_enum_value</definition>
        <argsstring>(ml_type_t *Type, int64_t Value)</argsstring>
        <name>ml_enum_value</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1013" column="12" bodyfile="src/ml_object.c" bodystart="1013" bodyend="1020"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a2d0eb331616d6be8f24f342a6df9da64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t ml_enum_value_value</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_enum_value_value</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1022" column="9" bodyfile="src/ml_object.c" bodystart="1022" bodyend="1024"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a0c31179e840acf0eea0e672ee7e69246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ml_enum_value_name</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_enum_value_name</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1026" column="12" bodyfile="src/ml_object.c" bodystart="1026" bodyend="1028"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a36ad24132de6b3c61bfd4415e132fca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ml_enum_value_index</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_enum_value_index</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1030" column="5" bodyfile="src/ml_object.c" bodystart="1030" bodyend="1034"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a495037475e29b645dd052851a2bf019b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;count&quot;, MLEnumT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;count&quot;</type>
        </param>
        <param>
          <type>MLEnumT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1036" column="1" bodyfile="src/ml_object.c" bodystart="1036" bodyend="1044"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1ac90f0a80b01d9c767ce0a5b473dd2ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;random&quot;, MLEnumT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;random&quot;</type>
        </param>
        <param>
          <type>MLEnumT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1046" column="1" bodyfile="src/ml_object.c" bodystart="1046" bodyend="1055"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a647d0c7dcc9110bc5552b2c8b374fbd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLIntegerT, MLEnumValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLEnumValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1057" column="1" bodyfile="src/ml_object.c" bodystart="1057" bodyend="1059"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a88f51e3a8e91c6657a959ebe1226495d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLEnumIterT,(), &quot;enum-iter&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLEnumIterT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;enum-iter&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1067" column="1" declfile="src/ml_object.c" declline="1067" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a597b829436dbe5692172760f1dfb3c4a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLEnumT, ml_state_t *Caller, ml_enum_t *Enum)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLEnumT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref> *</type>
          <declname>Enum</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1070" column="13" bodyfile="src/ml_object.c" bodystart="1070" bodyend="1079"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a65bf52486e4804e7c4995166ad1da74b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLEnumIterT, ml_state_t *Caller, ml_enum_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLEnumIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__enum__iter__t" kindref="compound">ml_enum_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1081" column="13" bodyfile="src/ml_object.c" bodystart="1081" bodyend="1084"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1ad94935d527a3b09be256bf81f173b141" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLEnumIterT, ml_state_t *Caller, ml_enum_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLEnumIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__enum__iter__t" kindref="compound">ml_enum_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1086" column="13" bodyfile="src/ml_object.c" bodystart="1086" bodyend="1088"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a4fe2c52e61945513ac25ea55ad18173b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLEnumIterT, ml_state_t *Caller, ml_enum_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLEnumIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__enum__iter__t" kindref="compound">ml_enum_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1090" column="13" bodyfile="src/ml_object.c" bodystart="1090" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1aa7920a127662243dd17f1abd7b5ac6eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLEnumRangeIterT,(), &quot;enum-range-iter&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLEnumRangeIterT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;enum-range-iter&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1101" column="1" declfile="src/ml_object.c" declline="1101" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1ad0cb0d427e8979adc37c38f024f4486e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLEnumRangeT,(MLSequenceT), &quot;enum-range&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLEnumRangeT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;enum-range&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1110" column="1" declfile="src/ml_object.c" declline="1110" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a98fc9aef0157b8dfeecee058a2749d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;..&quot;, MLEnumValueT, MLEnumValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;..&quot;</type>
        </param>
        <param>
          <type>MLEnumValueT</type>
        </param>
        <param>
          <type>MLEnumValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1113" column="1" bodyfile="src/ml_object.c" bodystart="1113" bodyend="1143"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1acd66aac2ac13f477a6a56153bf0e04cf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLEnumRangeT, ml_state_t *Caller, ml_enum_range_t *Range)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLEnumRangeT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__enum__range__t" kindref="compound">ml_enum_range_t</ref> *</type>
          <declname>Range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1145" column="13" bodyfile="src/ml_object.c" bodystart="1145" bodyend="1155"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a1bbd36590fb6a721305596bc987a8912" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLEnumRangeIterT, ml_state_t *Caller, ml_enum_range_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLEnumRangeIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__enum__range__iter__t" kindref="compound">ml_enum_range_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1157" column="13" bodyfile="src/ml_object.c" bodystart="1157" bodyend="1165"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1ac7b83632c49454193de68cd01bcb48a9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLEnumRangeIterT, ml_state_t *Caller, ml_enum_range_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLEnumRangeIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__enum__range__iter__t" kindref="compound">ml_enum_range_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1167" column="13" bodyfile="src/ml_object.c" bodystart="1167" bodyend="1169"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a88bdf1cf2108a96b00a3e3d92156c431" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLEnumRangeIterT, ml_state_t *Caller, ml_enum_range_iter_t *Iter)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLEnumRangeIterT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__enum__range__iter__t" kindref="compound">ml_enum_range_iter_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1171" column="13" bodyfile="src/ml_object.c" bodystart="1171" bodyend="1173"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a98c5e02e669110c09b6c966d0d1455d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_enum_switch</definition>
        <argsstring>(ml_state_t *Caller, ml_enum_switch_t *Switch, int Count, ml_value_t **Args)</argsstring>
        <name>ml_enum_switch</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__enum__switch__t" kindref="compound">ml_enum_switch_t</ref> *</type>
          <declname>Switch</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1181" column="13" bodyfile="src/ml_object.c" bodystart="1181" bodyend="1188"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a41530feb59b76db6478fb8a300c5a99c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLEnumSwitchT,(MLFunctionT), &quot;enum-switch&quot;,.call=(void *) ml_enum_switch)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLEnumSwitchT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;enum-switch&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_enum_switch</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1190" column="1" declfile="src/ml_object.c" declline="1190" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1ac75e213448d0e83c3a0639e2229f9d0c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_enum_switch_fn</definition>
        <argsstring>(ml_enum_t *Enum, int Count, ml_value_t **Args)</argsstring>
        <name>ml_enum_switch_fn</name>
        <param>
          <type><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref> *</type>
          <declname>Enum</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1195" column="19" bodyfile="src/ml_object.c" bodystart="1195" bodyend="1249"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a2fa46fecc67e8cd3c5e8ca068981fba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLCompilerSwitch, MLEnumT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLCompilerSwitch</type>
        </param>
        <param>
          <type>MLEnumT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_object.c" line="1251" column="1" bodyfile="src/ml_object.c" bodystart="1251" bodyend="1256"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1aa0127b6e88209e84c4c70feec203c9d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&gt;&quot;, MLEnumValueT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;&gt;&quot;</type>
        </param>
        <param>
          <type>MLEnumValueT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1258" column="1" bodyfile="src/ml_object.c" bodystart="1258" bodyend="1268"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1aabdf6bd67f72c6b887c5bb703dc68242" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&gt;&quot;, MLIntegerT, MLEnumValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;&gt;&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLEnumValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1270" column="1" bodyfile="src/ml_object.c" bodystart="1270" bodyend="1280"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a925a2f00e1edcfeb1c7fcfc84674e7fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;+&quot;, MLEnumValueT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;+&quot;</type>
        </param>
        <param>
          <type>MLEnumValueT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1282" column="1" bodyfile="src/ml_object.c" bodystart="1282" bodyend="1293"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a147f2c18725ab673f2cb65ad1c293135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;+&quot;, MLIntegerT, MLEnumValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;+&quot;</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <param>
          <type>MLEnumValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1295" column="1" bodyfile="src/ml_object.c" bodystart="1295" bodyend="1306"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a25aab491c2e125a04eed5bbafe0162cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&quot;, MLEnumValueT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&quot;</type>
        </param>
        <param>
          <type>MLEnumValueT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1308" column="1" bodyfile="src/ml_object.c" bodystart="1308" bodyend="1319"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a63740cbb16965a13110b0e6b16463b15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;next&quot;, MLEnumValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;next&quot;</type>
        </param>
        <param>
          <type>MLEnumValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1321" column="1" bodyfile="src/ml_object.c" bodystart="1321" bodyend="1332"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1adc7d6209f410cb7ef9bde58c58400904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;prev&quot;, MLEnumValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;prev&quot;</type>
        </param>
        <param>
          <type>MLEnumValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1334" column="1" bodyfile="src/ml_object.c" bodystart="1334" bodyend="1345"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1aa381534e1a680bc6f079c05a8de79982" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_flags_call</definition>
        <argsstring>(ml_state_t *Caller, ml_flags_t *Flags, int Count, ml_value_t **Args)</argsstring>
        <name>ml_flags_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__flags__t" kindref="compound">ml_flags_t</ref> *</type>
          <declname>Flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1359" column="13" bodyfile="src/ml_object.c" bodystart="1359" bodyend="1377"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a0f248cff11c4ae816b666db8188b3d1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLFlagsT,(MLTypeT), &quot;flags&quot;,.call=(void *) ml_flags_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLFlagsT</type>
        </param>
        <param>
          <type>(MLTypeT)</type>
        </param>
        <param>
          <type>&quot;flags&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_flags_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1379" column="1" declfile="src/ml_object.c" declline="1379" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1abefb4d89406084cc1f5ad9ae56e7ccf5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long ml_flag_value_hash</definition>
        <argsstring>(ml_flags_value_t *Value, ml_hash_chain_t *Chain)</argsstring>
        <name>ml_flag_value_hash</name>
        <param>
          <type><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref> *</type>
          <declname>Chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1384" column="13" bodyfile="src/ml_object.c" bodystart="1384" bodyend="1386"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1ac3a0e56a251febf738588f50f2e8462f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLFlagsValueT,(), &quot;flag-value&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLFlagsValueT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;flag-value&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1388" column="1" declfile="src/ml_object.c" declline="1388" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a97d64eac81109c626c0f15840abb707b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_flags_value_append</definition>
        <argsstring>(const char *Name, ml_flags_value_t *Flags, ml_flags_value_append_t *Append)</argsstring>
        <name>ml_flags_value_append</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref> *</type>
          <declname>Flags</declname>
        </param>
        <param>
          <type><ref refid="structml__flags__value__append__t" kindref="compound">ml_flags_value_append_t</ref> *</type>
          <declname>Append</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1398" column="12" bodyfile="src/ml_object.c" bodystart="1398" bodyend="1405"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1acf3fd02c218308b45bf94a34bcb4e4f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLFlagsValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLFlagsValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1407" column="1" bodyfile="src/ml_object.c" bodystart="1407" bodyend="1413"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1aadf0da9a902396c42a1eb7d799fee3b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLFlagsSpecT,(), &quot;flag-spec&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLFlagsSpecT</type>
        </param>
        <param>
          <type>()</type>
        </param>
        <param>
          <type>&quot;flag-spec&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1422" column="1" declfile="src/ml_object.c" declline="1422" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1abd7937120262310a30a63f820bfe2353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;append&quot;, MLStringBufferT, MLFlagsSpecT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;append&quot;</type>
        </param>
        <param>
          <type>MLStringBufferT</type>
        </param>
        <param>
          <type>MLFlagsSpecT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1426" column="1" bodyfile="src/ml_object.c" bodystart="1426" bodyend="1442"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1aa2520ce0cbf57a65553c6b060997194b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(MLFlagsT, MLStringT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>MLFlagsT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1444" column="1" bodyfile="src/ml_object.c" bodystart="1444" bodyend="1472"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a9f4c7d466a3e215f9b79c5ec091412dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODV</definition>
        <argsstring>(MLFlagsT, MLNamesT)</argsstring>
        <name>ML_METHODV</name>
        <param>
          <type>MLFlagsT</type>
        </param>
        <param>
          <type>MLNamesT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1474" column="1" bodyfile="src/ml_object.c" bodystart="1474" bodyend="1503"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a1c11cb57d6d0b175b74cde59db13ed0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>ml_type_t * ml_flags</definition>
        <argsstring>(const char *TypeName,...)</argsstring>
        <name>ml_flags</name>
        <param>
          <type>const char *</type>
          <declname>TypeName</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1505" column="11" bodyfile="src/ml_object.c" bodystart="1505" bodyend="1536"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a71ad8c98dae84457480be2f863512aef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
        <definition>ml_type_t * ml_flags2</definition>
        <argsstring>(const char *TypeName,...)</argsstring>
        <name>ml_flags2</name>
        <param>
          <type>const char *</type>
          <declname>TypeName</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1538" column="11" bodyfile="src/ml_object.c" bodystart="1538" bodyend="1570"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a887e5e16fd15e250f78f8dd61d323978" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_value_set_name, MLFlagsT, ml_flags_t *Flags, const char *Name)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_value_set_name</type>
        </param>
        <param>
          <type>MLFlagsT</type>
        </param>
        <param>
          <type><ref refid="structml__flags__t" kindref="compound">ml_flags_t</ref> *</type>
          <declname>Flags</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1572" column="13" bodyfile="src/ml_object.c" bodystart="1572" bodyend="1574"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1ae73f85be76af86969e688273e18e366f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>ml_value_t * ml_flags_value</definition>
        <argsstring>(ml_type_t *Type, uint64_t Flags)</argsstring>
        <name>ml_flags_value</name>
        <param>
          <type><ref refid="structml__type__t" kindref="compound">ml_type_t</ref> *</type>
          <declname>Type</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>Flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1576" column="12" bodyfile="src/ml_object.c" bodystart="1576" bodyend="1581"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1ab6f50968d01441cd12d8da8976babd7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t ml_flags_value_value</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_flags_value_value</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1583" column="10" bodyfile="src/ml_object.c" bodystart="1583" bodyend="1585"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a066edf5b12061ebbe7e2f420d2a85798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ml_flags_value_name</definition>
        <argsstring>(ml_value_t *Value)</argsstring>
        <name>ml_flags_value_name</name>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1587" column="12" bodyfile="src/ml_object.c" bodystart="1587" bodyend="1592"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a89cbcc94c652a9b8cc134a6c574be0f5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_flags_switch</definition>
        <argsstring>(ml_state_t *Caller, ml_flags_switch_t *Switch, int Count, ml_value_t **Args)</argsstring>
        <name>ml_flags_switch</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__flags__switch__t" kindref="compound">ml_flags_switch_t</ref> *</type>
          <declname>Switch</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1605" column="13" bodyfile="src/ml_object.c" bodystart="1605" bodyend="1616"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a94826975b8b171cc90cc9e83d527c07a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLFlagsSwitchT,(MLFunctionT), &quot;flags-switch&quot;,.call=(void *) ml_flags_switch)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLFlagsSwitchT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;flags-switch&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_flags_switch</defval>
          <briefdescription><para>internal </para>
</briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1618" column="1" declfile="src/ml_object.c" declline="1618" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a14d5d7021b99ec4aa8e96cdb01b80435" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
        <definition>static ml_value_t * ml_flags_switch_fn</definition>
        <argsstring>(ml_flags_t *Flags, int Count, ml_value_t **Args)</argsstring>
        <name>ml_flags_switch_fn</name>
        <param>
          <type><ref refid="structml__flags__t" kindref="compound">ml_flags_t</ref> *</type>
          <declname>Flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1623" column="19" bodyfile="src/ml_object.c" bodystart="1623" bodyend="1661"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1abb2b4756ff6ac3f1b77b3665665fcd0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLCompilerSwitch, MLFlagsT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLCompilerSwitch</type>
        </param>
        <param>
          <type>MLFlagsT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_object.c" line="1663" column="1" bodyfile="src/ml_object.c" bodystart="1663" bodyend="1666"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a21f635d892660154c1d4c0e3f93d802f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;+&quot;, MLFlagsValueT, MLFlagsValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;+&quot;</type>
        </param>
        <param>
          <type>MLFlagsValueT</type>
        </param>
        <param>
          <type>MLFlagsValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1668" column="1" bodyfile="src/ml_object.c" bodystart="1668" bodyend="1682"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a2efccba15650c33d3d65b1afc7e0e92e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;-&quot;, MLFlagsValueT, MLFlagsValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;-&quot;</type>
        </param>
        <param>
          <type>MLFlagsValueT</type>
        </param>
        <param>
          <type>MLFlagsValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1684" column="1" bodyfile="src/ml_object.c" bodystart="1684" bodyend="1698"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1aa4e0295ff5cd525f24ad1afcbddb9565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;&quot;, MLFlagsValueT, MLFlagsValueT)</argsstring>
        <name>ML_METHOD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1700" column="1" bodyfile="src/ml_object.c" bodystart="1700" bodyend="1716"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a8afa2bc96e386834ec966f81c93dfad8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&lt;=&quot;, MLFlagsValueT, MLFlagsValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&lt;=&quot;</type>
        </param>
        <param>
          <type>MLFlagsValueT</type>
        </param>
        <param>
          <type>MLFlagsValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1718" column="1" bodyfile="src/ml_object.c" bodystart="1718" bodyend="1734"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1ac9112372069582ad27a58f8b8d259d04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&gt;&quot;, MLFlagsValueT, MLFlagsValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>&quot;</type>
        </param>
        <param>
          <type>MLFlagsValueT</type>
        </param>
        <param>
          <type>MLFlagsValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1736" column="1" bodyfile="src/ml_object.c" bodystart="1736" bodyend="1752"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a2631dd0edaba94a50f0f6ccee043d297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;&gt;=&quot;, MLFlagsValueT, MLFlagsValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;&gt;=&quot;</type>
        </param>
        <param>
          <type>MLFlagsValueT</type>
        </param>
        <param>
          <type>MLFlagsValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1754" column="1" bodyfile="src/ml_object.c" bodystart="1754" bodyend="1770"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a43057a553297d04d706852052cff56f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;/&quot;, MLFlagsValueT, MLFlagsValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;/&quot;</type>
        </param>
        <param>
          <type>MLFlagsValueT</type>
        </param>
        <param>
          <type>MLFlagsValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1772" column="1" bodyfile="src/ml_object.c" bodystart="1772" bodyend="1785"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a3045be58fad0562e910bb429867698f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;/&quot;, MLFlagsValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;/&quot;</type>
        </param>
        <param>
          <type>MLFlagsValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1787" column="1" bodyfile="src/ml_object.c" bodystart="1787" bodyend="1797"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a98bc9bb73cb9950edd7de417b8ee6749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;in&quot;, MLFlagsValueT, MLFlagsSpecT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;in&quot;</type>
        </param>
        <param>
          <type>MLFlagsValueT</type>
        </param>
        <param>
          <type>MLFlagsSpecT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1799" column="1" bodyfile="src/ml_object.c" bodystart="1799" bodyend="1812"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a314e37392172aec3c258a6172ee636ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ml_flags_value_list</definition>
        <argsstring>(const char *Name, ml_flags_value_t *Flags, ml_flags_value_list_t *List)</argsstring>
        <name>ml_flags_value_list</name>
        <param>
          <type>const char *</type>
          <declname>Name</declname>
        </param>
        <param>
          <type><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref> *</type>
          <declname>Flags</declname>
        </param>
        <param>
          <type><ref refid="structml__flags__value__list__t" kindref="compound">ml_flags_value_list_t</ref> *</type>
          <declname>List</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1819" column="12" bodyfile="src/ml_object.c" bodystart="1819" bodyend="1822"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a3f1f57afa965188691ac1dc558d58d55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLListT, MLFlagsValueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLListT</type>
        </param>
        <param>
          <type>MLFlagsValueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1824" column="1" bodyfile="src/ml_object.c" bodystart="1824" bodyend="1828"/>
      </memberdef>
      <memberdef kind="function" id="ml__object_8c_1a08e4f63f432473b1e590ca6fcbddb580" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_object_init</definition>
        <argsstring>(stringmap_t *Globals)</argsstring>
        <name>ml_object_init</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_object.c" line="1830" column="6" bodyfile="src/ml_object.c" bodystart="1830" bodyend="1854"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;minilang.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_object.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;object&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_field_deref(<ref refid="structml__field__t" kindref="compound">ml_field_t</ref><sp/>*Field)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Field-&gt;Value;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">ML_TYPE(MLFieldT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>.deref<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_field_deref</highlight></codeline>
<codeline lineno="17"><highlight class="normal">);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_field_assign(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__field__t" kindref="compound">ml_field_t</ref><sp/>*Field,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Value)<sp/>==<sp/>MLUninitializedT)<sp/>ml_uninitialized_use(Value,<sp/>&amp;Field-&gt;Value);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>Field-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">ML_TYPE(MLFieldMutableT,<sp/>(MLFieldT),<sp/></highlight><highlight class="stringliteral">&quot;field::mutable&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>.deref<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_field_deref,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>.assign<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_field_assign</highlight></codeline>
<codeline lineno="28"><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_field_fn(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*Object<sp/>=<sp/>(<ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)Object<sp/>+<sp/>(uintptr_t)Data);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">ML_TYPE(MLFieldOwnerT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;field::owner&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*ml_field_owner(<ref refid="structml__field__t" kindref="compound">ml_field_t</ref><sp/>*Field)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>--Field;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Field-&gt;Type<sp/>!=<sp/>MLFieldOwnerT);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*)Field-&gt;Value;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">ML_INTERFACE(MLObjectT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parent<sp/>type<sp/>of<sp/>all<sp/>object<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="structml__init__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Object;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}<sp/><ref refid="structml__init__state__t" kindref="compound">ml_init_state_t</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_init_state_run(<ref refid="structml__init__state__t" kindref="compound">ml_init_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Result))<sp/>ML_RETURN(Result);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*Object<sp/>=<sp/>(<ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*)State-&gt;Object;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*Class<sp/>=<sp/>(<ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*)State-&gt;Object-&gt;Type;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__field__t" kindref="compound">ml_field_t</ref><sp/>*Field<sp/>=<sp/>Object-&gt;Fields<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref><sp/>*Info<sp/>=<sp/>Class-&gt;Fields;<sp/>Info;<sp/>Info<sp/>=<sp/>Info-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Field++)-&gt;Type<sp/>=<sp/>Info-&gt;Type;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State-&gt;Object);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_object_constructor_fn(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*Class,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*Object<sp/>=<sp/>xnew(<ref refid="structml__object__t" kindref="compound">ml_object_t</ref>,<sp/>Class-&gt;NumFields<sp/>+<sp/>1,<sp/><ref refid="structml__field__t" kindref="compound">ml_field_t</ref>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>Object-&gt;Type<sp/>=<sp/>Class;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__field__t" kindref="compound">ml_field_t</ref><sp/>*Slot<sp/>=<sp/>Object-&gt;Fields;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>Slot-&gt;Type<sp/>=<sp/>MLFieldOwnerT;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>Slot-&gt;Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Object;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>++Slot;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Class-&gt;NumFields<sp/>+<sp/>1;<sp/>--I<sp/>&gt;<sp/>0;<sp/>++Slot)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot-&gt;Type<sp/>=<sp/>MLFieldMutableT;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot-&gt;Value<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Class-&gt;Initializer)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__init__state__t" kindref="compound">ml_init_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__init__state__t" kindref="compound">ml_init_state_t</ref>,<sp/>Count<sp/>+<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Args[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Object;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>State-&gt;Args[I<sp/>+<sp/>1]<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_init_state_run;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Object<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Object;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Class-&gt;Initializer,<sp/>Count<sp/>+<sp/>1,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg<sp/>=<sp/>ml_deref(Args[I]);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Arg))<sp/>ML_RETURN(Arg);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Arg,<sp/>MLNamesT))<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_NAMES_CHECKX_ARG_COUNT(I);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Arg2<sp/>=<sp/>Args<sp/>+<sp/>I;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[I],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Iter-&gt;Value);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref><sp/>*Info<sp/>=<sp/>stringmap_search(Class-&gt;Names,<sp/>Name);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Info)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Class<sp/>%s<sp/>does<sp/>not<sp/>have<sp/>field<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Class-&gt;Base.Name,<sp/>Name);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__field__t" kindref="compound">ml_field_t</ref><sp/>*Field<sp/>=<sp/>&amp;Object-&gt;Fields[Info-&gt;Index];</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>*++Arg2;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Value)<sp/>==<sp/>MLUninitializedT)<sp/>ml_uninitialized_use(Value,<sp/>&amp;Field-&gt;Value);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Field-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I<sp/>&gt;<sp/>Class-&gt;NumFields)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Arg)<sp/>==<sp/>MLUninitializedT)<sp/>ml_uninitialized_use(Arg,<sp/>&amp;Object-&gt;Fields[I<sp/>+<sp/>1].Value);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Object-&gt;Fields[I<sp/>+<sp/>1].Value<sp/>=<sp/>Arg;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__field__t" kindref="compound">ml_field_t</ref><sp/>*Field<sp/>=<sp/>Object-&gt;Fields<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref><sp/>*Info<sp/>=<sp/>Class-&gt;Fields;<sp/>Info;<sp/>Info<sp/>=<sp/>Info-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Field++)-&gt;Type<sp/>=<sp/>Info-&gt;Type;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Object);</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_find_all,<sp/>MLObjectT,<sp/><ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/>ml_value_find_fn<sp/>RefFn)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RefFn(Data,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Value,<sp/>1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumFields<sp/>=<sp/>((<ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*)Value)-&gt;Type-&gt;NumFields;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;=<sp/>NumFields;<sp/>++I)<sp/>ml_value_find_all(Value-&gt;Fields[I].Value,<sp/>Data,<sp/>RefFn);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_is_constant,<sp/>MLObjectT,<sp/><ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumFields<sp/>=<sp/>((<ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*)Value)-&gt;Type-&gt;NumFields;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;=<sp/>NumFields;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value-&gt;Fields[I].Type<sp/>!=<sp/>MLFieldT)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_value_is_constant(Value-&gt;Fields[I].Value))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/>MLObjectT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//&lt;Object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//&lt;Field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//&gt;field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Retrieves<sp/>the<sp/>field<sp/>:mini:`Field`<sp/>from<sp/>:mini:`Object`.<sp/>Mainly<sp/>intended<sp/>for<sp/>unpacking<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*Object<sp/>=<sp/>(<ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Args[1]);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref><sp/>*Info<sp/>=<sp/>stringmap_search(Object-&gt;Type-&gt;Names,<sp/>Name);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Info)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;NameError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Type<sp/>%s<sp/>has<sp/>no<sp/>field<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Object-&gt;Type-&gt;Base.Name,<sp/>Name);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)&amp;Object-&gt;Fields[Info-&gt;Index];</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__cfunctionx__t" kindref="compound">ml_cfunctionx_t</ref><sp/>MLClass[];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">ML_TYPE(MLClassT,<sp/>(MLTypeT),<sp/></highlight><highlight class="stringliteral">&quot;class&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="148"><highlight class="comment">//<sp/>Type<sp/>of<sp/>all<sp/>object<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_type_call,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLClass</highlight></codeline>
<codeline lineno="151"><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;fields&quot;</highlight><highlight class="normal">,<sp/>MLClassT)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*Class<sp/>=<sp/>(<ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Fields<sp/>=<sp/>ml_list();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref><sp/>*Info<sp/>=<sp/>Class-&gt;Fields;<sp/>Info;<sp/>Info<sp/>=<sp/>Info-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_list_put(Fields,<sp/>Info-&gt;Method);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Fields;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLObjectT)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*Object<sp/>=<sp/>(<ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_printf(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;%s(&quot;</highlight><highlight class="normal">,<sp/>Object-&gt;Type-&gt;Base.Name);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Comma<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref><sp/>*Info<sp/>=<sp/>Object-&gt;Type-&gt;Fields;<sp/>Info;<sp/>Info<sp/>=<sp/>Info-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_method_name(Info-&gt;Method);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Name)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Comma)<sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Name,<sp/>strlen(Name));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>&quot;</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_simple_append(Buffer,<sp/>Object-&gt;Fields[Info-&gt;Index].Value);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Comma<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLSome;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="structml__named__type__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Native;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Constructor;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Initializer;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}<sp/><ref refid="structml__named__type__t" kindref="compound">ml_named_type_t</ref>;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal">ML_TYPE(MLNamedTypeT,<sp/>(MLTypeT),<sp/></highlight><highlight class="stringliteral">&quot;named-type&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_type_call</highlight></codeline>
<codeline lineno="191"><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="structml__named__init__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Object;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Old,<sp/>*New;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Init;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}<sp/><ref refid="structml__named__init__state__t" kindref="compound">ml_named_init_state_t</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_named_init_state_run(<ref refid="structml__named__init__state__t" kindref="compound">ml_named_init_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Old<sp/>=<sp/>ml_typeof(Result);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Old<sp/>==<sp/>State-&gt;Old)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result-&gt;Type<sp/>=<sp/>State-&gt;New;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Old-&gt;Type<sp/>==<sp/>MLTypeGenericT<sp/>&amp;&amp;<sp/>ml_generic_type_args(Old)[0]<sp/>==<sp/>State-&gt;Old)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result-&gt;Type<sp/>=<sp/>State-&gt;New;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Result);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Init)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Object<sp/>=<sp/>State-&gt;Args[0]<sp/>=<sp/>Result;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_init_state_run;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>State-&gt;Init,<sp/>State-&gt;Count,<sp/>State-&gt;Args);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CONTINUE(State-&gt;Base.Caller,<sp/>Result);</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_named_constructor_fn(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__named__type__t" kindref="compound">ml_named_type_t</ref><sp/>*Class,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__named__init__state__t" kindref="compound">ml_named_init_state_t</ref><sp/>*State<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__named__init__state__t" kindref="compound">ml_named_init_state_t</ref>);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_named_init_state_run;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Old<sp/>=<sp/>Class-&gt;Native;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;New<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Class;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Class-&gt;Native-&gt;Constructor,<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_named_initializer_fn(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__named__type__t" kindref="compound">ml_named_type_t</ref><sp/>*Class,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__named__init__state__t" kindref="compound">ml_named_init_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__named__init__state__t" kindref="compound">ml_named_init_state_t</ref>,<sp/>Count<sp/>+<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>State-&gt;Args[I<sp/>+<sp/>1]<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_named_init_state_run;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Old<sp/>=<sp/>Class-&gt;Native;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;New<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Class;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Init<sp/>=<sp/>Class-&gt;Initializer;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Count<sp/>=<sp/>Count<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(State,<sp/>Class-&gt;Native-&gt;Constructor,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*get_field_fn(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**FieldFns<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumFieldFns<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&gt;=<sp/>NumFieldFns)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**NewFieldFns<sp/>=<sp/>anew(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*,<sp/>Index<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(NewFieldFns,<sp/>FieldFns,<sp/>NumFieldFns<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>NumFieldFns;<sp/>I<sp/>&lt;=<sp/>Index;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Offset<sp/>=<sp/>&amp;((<ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*)0)-&gt;Fields[I];</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NewFieldFns[I]<sp/>=<sp/>ml_cfunction(Offset,<sp/>ml_field_fn);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FieldFns<sp/>=<sp/>NewFieldFns;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumFieldFns<sp/>=<sp/>Index<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FieldFns[Index];</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_field(<ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context,<sp/><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*Class,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Method,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref><sp/>**Slot<sp/>=<sp/>&amp;Class-&gt;Fields;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Slot[0])<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Slot[0]-&gt;Method<sp/>==<sp/>Method)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Index;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot<sp/>=<sp/>&amp;Slot[0]-&gt;Next;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>++Class-&gt;NumFields;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref><sp/>*Info<sp/>=<sp/>Slot[0]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Method<sp/>=<sp/>Method;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Type<sp/>=<sp/>Type;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>Info-&gt;Index<sp/>=<sp/>Index;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_method_name(Method);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Name)<sp/>stringmap_insert(Class-&gt;Names,<sp/>Name,<sp/>Info);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__methods__t" kindref="compound">ml_methods_t</ref><sp/>*Methods<sp/>=<sp/>Context-&gt;Values[ML_METHODS_INDEX];</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Types[1]<sp/>=<sp/>{(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Class};</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_insert(Methods,<sp/>(<ref refid="structml__method__t" kindref="compound">ml_method_t</ref><sp/>*)Info-&gt;Method,<sp/>get_field_fn(Index),<sp/>1,<sp/>NULL,<sp/>Types);</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_class(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*Class<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__class__t" kindref="compound">ml_class_t</ref>);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>Class-&gt;Base.Type<sp/>=<sp/>MLClassT;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Name)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Base.Name<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GC_asprintf((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;Class-&gt;Base.Name,<sp/></highlight><highlight class="stringliteral">&quot;class:%lx&quot;</highlight><highlight class="normal">,<sp/>(uintptr_t)Class);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>Class-&gt;Base.hash<sp/>=<sp/>ml_default_hash;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>Class-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>Class-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>Class-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Constructor<sp/>=<sp/>ml_cfunctionx(Class,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_object_constructor_fn);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>Class-&gt;Base.Constructor<sp/>=<sp/>Constructor;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_parent((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Class,<sp/>MLObjectT);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Class-&gt;Base.Exports,<sp/></highlight><highlight class="stringliteral">&quot;new&quot;</highlight><highlight class="normal">,<sp/>Constructor);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Class;</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_class_add_parent(<ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class0,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Parent0)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>Context<sp/>=<sp/>Context<sp/>?:<sp/>&amp;MLRootContext;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*Class<sp/>=<sp/>(<ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*)Class0;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*Parent<sp/>=<sp/>(<ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*)Parent0;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref><sp/>*Info<sp/>=<sp/>Parent-&gt;Fields;<sp/>Info;<sp/>Info<sp/>=<sp/>Info-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_field(Context,<sp/>Class,<sp/>Info-&gt;Method,<sp/>Info-&gt;Type);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_parent((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Class,<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Parent);</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_class_add_field(<ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class0,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Field,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>Context<sp/>=<sp/>Context<sp/>?:<sp/>&amp;MLRootContext;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>add_field(Context,<sp/>(<ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*)Class0,<sp/>Field,<sp/>Type);</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_object_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*Object,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args2<sp/>=<sp/>ml_alloc_args(Count<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(Args2<sp/>+<sp/>1,<sp/>Args,<sp/>Count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>Args2[0]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Object;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Object-&gt;Type-&gt;Call,<sp/>Count<sp/>+<sp/>1,<sp/>Args2);</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_class_modify(<ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context,<sp/><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*Class,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Modifier)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>typeof(ml_class_modify)<sp/>*function<sp/>=<sp/>ml_typed_fn_get(ml_typeof(Modifier),<sp/>ml_class_modify);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(function)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(Context,<sp/>Class,<sp/>Modifier);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>class<sp/>modifier:<sp/>&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Modifier)-&gt;Name);</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_class_modify,<sp/>MLMethodT,<sp/><ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context,<sp/><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*Class,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Field)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>add_field(Context,<sp/>Class,<sp/>Field,<sp/>MLFieldMutableT);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_class_modify,<sp/>MLClassT,<sp/><ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context,<sp/><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*Class,<sp/><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*Parent)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref><sp/>*Info<sp/>=<sp/>Parent-&gt;Fields;<sp/>Info;<sp/>Info<sp/>=<sp/>Info-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_field(Context,<sp/>Class,<sp/>Info-&gt;Method,<sp/>Info-&gt;Type);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_parent((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Class,<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Parent);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parent-&gt;Call)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Base.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_object_call;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Call<sp/>=<sp/>Parent-&gt;Call;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_type_add_parent((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Class,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_class_modify,<sp/>MLTypeT,<sp/><ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context,<sp/><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*Class,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Parent)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parent-&gt;NoInherit)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Classes<sp/>can<sp/>not<sp/>inherit<sp/>from<sp/>&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>Parent-&gt;Name);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_parent((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Class,<sp/>Parent);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal">ML_FUNCTIONZ(MLClass)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="comment">//@class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">//&lt;Parents...:class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fields...:method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">//&lt;Exports...:names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//&gt;class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>class<sp/>inheriting<sp/>from<sp/>:mini:`Parents`,<sp/>with<sp/>fields<sp/>:mini:`Fields`<sp/>and<sp/>exports<sp/>:mini:`Exports`.<sp/>The<sp/>special<sp/>exports<sp/>:mini:`::of`<sp/>and<sp/>:mini:`::init`<sp/>can<sp/>be<sp/>set<sp/>to<sp/>override<sp/>the<sp/>default<sp/>conversion<sp/>and<sp/>initialization<sp/>behaviour.<sp/>The<sp/>:mini:`::new`<sp/>export<sp/>will<sp/>*always*<sp/>be<sp/>set<sp/>to<sp/>the<sp/>original<sp/>constructor<sp/>for<sp/>this<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*NativeType<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Args[I])<sp/>==<sp/>MLNamesT)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[I]<sp/>=<sp/>ml_deref(Args[I]);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_typeof(Args[I])<sp/>==<sp/>MLMethodT)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Args[I],<sp/>MLClassT))<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Args[I],<sp/>MLNamedTypeT))<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__named__type__t" kindref="compound">ml_named_type_t</ref><sp/>*Parent<sp/>=<sp/>(<ref refid="structml__named__type__t" kindref="compound">ml_named_type_t</ref><sp/>*)Args[I];</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NativeType<sp/>&amp;&amp;<sp/>NativeType<sp/>!=<sp/>Parent-&gt;Native)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Classes<sp/>can<sp/>not<sp/>inherit<sp/>from<sp/>multiple<sp/>native<sp/>types&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NativeType<sp/>=<sp/>Parent-&gt;Native;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Args[I],<sp/>MLTypeT))<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Parent<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[I];</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parent-&gt;NoInherit)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Classes<sp/>can<sp/>not<sp/>inherit<sp/>from<sp/>&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>Parent-&gt;Name);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Parent-&gt;Interface)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NativeType<sp/>&amp;&amp;<sp/>NativeType<sp/>!=<sp/>Parent)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Classes<sp/>can<sp/>not<sp/>inherit<sp/>from<sp/>multiple<sp/>native<sp/>types&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NativeType<sp/>=<sp/>Parent;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NativeType)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__named__type__t" kindref="compound">ml_named_type_t</ref><sp/>*Class<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__named__type__t" kindref="compound">ml_named_type_t</ref>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Base.Type<sp/>=<sp/>MLNamedTypeT;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GC_asprintf((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;Class-&gt;Base.Name,<sp/></highlight><highlight class="stringliteral">&quot;named-%s:%lx&quot;</highlight><highlight class="normal">,<sp/>NativeType-&gt;Name,<sp/>(uintptr_t)Class);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Base.hash<sp/>=<sp/>NativeType-&gt;hash;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Base.call<sp/>=<sp/>NativeType-&gt;call;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Base.deref<sp/>=<sp/>NativeType-&gt;deref;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Base.assign<sp/>=<sp/>NativeType-&gt;assign;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Native<sp/>=<sp/>NativeType;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Constructor<sp/>=<sp/>ml_cfunctionz(Class,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_named_constructor_fn);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Base.Constructor<sp/>=<sp/>Constructor;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Args[I],<sp/>MLTypeT))<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Parent<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Args[I];</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_type_add_parent((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Class,<sp/>Parent);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Args[I],<sp/>MLNamesT))<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_NAMES_CHECKX_ARG_COUNT(I);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[I],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Key);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Args[++I];</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Class-&gt;Base.Exports,<sp/>Name,<sp/>Value);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Name,<sp/></highlight><highlight class="stringliteral">&quot;of&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Base.Constructor<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Name,<sp/></highlight><highlight class="stringliteral">&quot;init&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Initializer<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Base.Constructor<sp/>=<sp/>ml_cfunctionz(Class,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_named_initializer_fn);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>argument<sp/>type:<sp/>&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Args[I])-&gt;Name);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Class-&gt;Base.Exports,<sp/></highlight><highlight class="stringliteral">&quot;new&quot;</highlight><highlight class="normal">,<sp/>Constructor);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Class);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*Class<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__class__t" kindref="compound">ml_class_t</ref>);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Base.Type<sp/>=<sp/>MLClassT;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GC_asprintf((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;Class-&gt;Base.Name,<sp/></highlight><highlight class="stringliteral">&quot;class:%lx&quot;</highlight><highlight class="normal">,<sp/>(uintptr_t)Class);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Base.hash<sp/>=<sp/>ml_default_hash;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Constructor<sp/>=<sp/>ml_cfunctionz(Class,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_object_constructor_fn);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Base.Constructor<sp/>=<sp/>Constructor;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Args[I],<sp/>MLNamesT))<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_NAMES_CHECKX_ARG_COUNT(I);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[I],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name<sp/>=<sp/>ml_string_value(Key);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Args[++I];</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Class-&gt;Base.Exports,<sp/>Name,<sp/>Value);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Name,<sp/></highlight><highlight class="stringliteral">&quot;of&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Base.Constructor<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Name,<sp/></highlight><highlight class="stringliteral">&quot;init&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Initializer<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(Name,<sp/></highlight><highlight class="stringliteral">&quot;()&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Base.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_object_call;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Class-&gt;Call<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_type_add_parent((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Class,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Error<sp/>=<sp/>ml_class_modify(Caller-&gt;Context,<sp/>Class,<sp/>Args[I]);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Error)<sp/>ML_RETURN(Error);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_type_add_parent((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Class,<sp/>MLObjectT);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Class-&gt;Base.Exports,<sp/></highlight><highlight class="stringliteral">&quot;new&quot;</highlight><highlight class="normal">,<sp/>Constructor);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Class);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_class_set_name_fn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Export,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Prefix)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_asprintf((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;Name,<sp/></highlight><highlight class="stringliteral">&quot;%s::%s&quot;</highlight><highlight class="normal">,<sp/>Prefix,<sp/>Export);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_value_set_name(Value,<sp/>Name);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_set_name,<sp/>MLNamedTypeT,<sp/><ref refid="structml__named__type__t" kindref="compound">ml_named_type_t</ref><sp/>*Class,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>Class-&gt;Base.Name<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_foreach(Class-&gt;Base.Exports,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Name,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_class_set_name_fn);</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_set_name,<sp/>MLClassT,<sp/><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*Class,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>Class-&gt;Base.Name<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_foreach(Class-&gt;Base.Exports,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)Name,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_class_set_name_fn);</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477" refid="structml__modified__field__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Field;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*FieldType;</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}<sp/><ref refid="structml__modified__field__t" kindref="compound">ml_modified_field_t</ref>;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">ML_TYPE(MLModifiedFieldT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;modified-field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_modified_field(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Field,<sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__modified__field__t" kindref="compound">ml_modified_field_t</ref><sp/>*Typed<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__modified__field__t" kindref="compound">ml_modified_field_t</ref>);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>Typed-&gt;Type<sp/>=<sp/>MLModifiedFieldT;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>Typed-&gt;Field<sp/>=<sp/>Field;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>Typed-&gt;FieldType<sp/>=<sp/>Type;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Typed;</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ML_TYPED_FN(ml_class_modify,<sp/>MLModifiedFieldT,<sp/><ref refid="structml__context__t" kindref="compound">ml_context_t</ref><sp/>*Context,<sp/><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*Class,<sp/><ref refid="structml__modified__field__t" kindref="compound">ml_modified_field_t</ref><sp/>*Modified)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>add_field(Context,<sp/>Class,<sp/>Modified-&gt;Field,<sp/>Modified-&gt;FieldType);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="structml__field__modifier__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*FieldType;</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}<sp/><ref refid="structml__field__modifier__t" kindref="compound">ml_field_modifier_t</ref>;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal">ML_TYPE(MLFieldModifierT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;field-modifier&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_field_modifier(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__field__modifier__t" kindref="compound">ml_field_modifier_t</ref><sp/>*Modifier<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__field__modifier__t" kindref="compound">ml_field_modifier_t</ref>);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>Modifier-&gt;Type<sp/>=<sp/>MLFieldModifierT;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>Modifier-&gt;FieldType<sp/>=<sp/>Type;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Modifier;</highlight></codeline>
<codeline lineno="512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal">ML_METHOD(MLMethodDefault,<sp/>MLMethodT,<sp/>MLFieldModifierT)<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__field__modifier__t" kindref="compound">ml_field_modifier_t</ref><sp/>*Modifier<sp/>=<sp/>(<ref refid="structml__field__modifier__t" kindref="compound">ml_field_modifier_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_modified_field(Args[0],<sp/>Modifier-&gt;FieldType);</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="structml__watcher__type__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Method,<sp/>*Callback;</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}<sp/><ref refid="structml__watcher__type__t" kindref="compound">ml_watcher_type_t</ref>;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_watched_field_deref(<ref refid="structml__field__t" kindref="compound">ml_field_t</ref><sp/>*Field)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Field-&gt;Value;</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_watched_field_assign(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__field__t" kindref="compound">ml_field_t</ref><sp/>*Field,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>Field-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__watcher__type__t" kindref="compound">ml_watcher_type_t</ref><sp/>*Watcher<sp/>=<sp/>(<ref refid="structml__watcher__type__t" kindref="compound">ml_watcher_type_t</ref><sp/>*)Field-&gt;Type;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args<sp/>=<sp/>ml_alloc_args(3);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>Watcher-&gt;Method;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)ml_field_owner(Field);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[2]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Watcher-&gt;Callback,<sp/>3,<sp/>Args);</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">ML_TYPE(MLFieldWatcherT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;field-watcher&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal">ML_VALUE(MLFieldWatcher,<sp/>MLFieldWatcherT);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal">ML_METHOD(MLMethodDefault,<sp/>MLMethodT,<sp/>MLFieldWatcherT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__watcher__type__t" kindref="compound">ml_watcher_type_t</ref><sp/>*Watcher<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__watcher__type__t" kindref="compound">ml_watcher_type_t</ref>);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>Watcher-&gt;Base.Type<sp/>=<sp/>MLTypeT;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_asprintf((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;Watcher-&gt;Base.Name,<sp/></highlight><highlight class="stringliteral">&quot;watcher:%lx&quot;</highlight><highlight class="normal">,<sp/>(uintptr_t)Watcher);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>Watcher-&gt;Base.deref<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_watched_field_deref;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>Watcher-&gt;Base.assign<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_watched_field_assign;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>Watcher-&gt;Base.hash<sp/>=<sp/>ml_default_hash;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>Watcher-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_init((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Watcher,<sp/>MLFieldMutableT,<sp/>NULL);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>Watcher-&gt;Method<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>Watcher-&gt;Callback<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_modified_field(Args[0],<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Watcher);</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_set_name,<sp/>MLObjectT,<sp/><ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*Object,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*NameField<sp/>=<sp/>stringmap_search(Object-&gt;Type-&gt;Base.Exports,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!NameField)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(NameField,<sp/>MLMethodT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref><sp/>*Info<sp/>=<sp/>stringmap_search(Object-&gt;Type-&gt;Names,<sp/>ml_method_name(NameField));</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Info)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__field__t" kindref="compound">ml_field_t</ref><sp/>*Field<sp/>=<sp/>&amp;Object-&gt;Fields[Info-&gt;Index];</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>Field-&gt;Value<sp/>=<sp/>ml_string(Name,<sp/>-1);</highlight></codeline>
<codeline lineno="565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567" refid="structml__property__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__property__t" kindref="compound">ml_property_t</ref><sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/>*Setter;</highlight></codeline>
<codeline lineno="570"><highlight class="normal">}<sp/><ref refid="structml__property__t" kindref="compound">ml_property_t</ref>;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_property_deref(<ref refid="structml__property__t" kindref="compound">ml_property_t</ref><sp/>*Property)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Property-&gt;Value;</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_property_assign(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__property__t" kindref="compound">ml_property_t</ref><sp/>*Property,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Property-&gt;Setter,<sp/>1,<sp/>&amp;Value);</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_property_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__property__t" kindref="compound">ml_property_t</ref><sp/>*Property,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>Property-&gt;Value,<sp/>Count,<sp/>Args);</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>MLPropertyT[];</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal">ML_FUNCTIONX(MLProperty)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">//@property</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment">//&lt;Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="comment">//&lt;Set:function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment">//&gt;property</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>property<sp/>which<sp/>dereferences<sp/>to<sp/>:mini:`Value`.<sp/>Assigning<sp/>to<sp/>the<sp/>property<sp/>will<sp/>call<sp/>:mini:`Set(NewValue)`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__property__t" kindref="compound">ml_property_t</ref><sp/>*Property<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__property__t" kindref="compound">ml_property_t</ref>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>Property-&gt;Type<sp/>=<sp/>MLPropertyT;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>Property-&gt;Value<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>Property-&gt;Setter<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Property);</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal">ML_TYPE(MLPropertyT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;property&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>value<sp/>with<sp/>an<sp/>associated<sp/>setter<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>.deref<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_property_deref,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>.assign<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_property_assign,</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_property_call,</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>.Constructor<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)MLProperty</highlight></codeline>
<codeline lineno="606"><highlight class="normal">);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ml_class_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*)Value)-&gt;NumFields;</highlight></codeline>
<codeline lineno="610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612" refid="structml__class__field__find__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index;</highlight></codeline>
<codeline lineno="615"><highlight class="normal">}<sp/><ref refid="structml__class__field__find__t" kindref="compound">ml_class_field_find_t</ref>;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_class_field_fn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/><ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref><sp/>*Info,<sp/><ref refid="structml__class__field__find__t" kindref="compound">ml_class_field_find_t</ref><sp/>*Find)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Find-&gt;Index<sp/>==<sp/>Info-&gt;Index)<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Find-&gt;Name<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_class_field_name(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__class__field__find__t" kindref="compound">ml_class_field_find_t</ref><sp/>Find<sp/>=<sp/>{NULL,<sp/>Index};</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_foreach(((<ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*)Class)-&gt;Names,<sp/>&amp;Find,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_class_field_fn);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Find.Name;</highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_object(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Class0,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*Class<sp/>=<sp/>(<ref refid="structml__class__t" kindref="compound">ml_class_t</ref><sp/>*)Class0;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*Object<sp/>=<sp/>xnew(<ref refid="structml__object__t" kindref="compound">ml_object_t</ref>,<sp/>Class-&gt;NumFields<sp/>+<sp/>1,<sp/><ref refid="structml__field__t" kindref="compound">ml_field_t</ref>);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>Object-&gt;Type<sp/>=<sp/>Class;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__field__t" kindref="compound">ml_field_t</ref><sp/>*Slot<sp/>=<sp/>Object-&gt;Fields;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>Slot-&gt;Type<sp/>=<sp/>MLFieldOwnerT;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>Slot-&gt;Value<sp/>=<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Object;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>++Slot;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>Class-&gt;NumFields<sp/>+<sp/>1;<sp/>--I<sp/>&gt;<sp/>0;<sp/>++Slot)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot-&gt;Type<sp/>=<sp/>MLFieldMutableT;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Slot-&gt;Value<sp/>=<sp/>MLNil;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Arg;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Arg,<sp/>Class0);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((Name<sp/>=<sp/>va_arg(Arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)))<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref><sp/>*Info<sp/>=<sp/>stringmap_search(Class-&gt;Names,<sp/>Name);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Info)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Class<sp/>%s<sp/>does<sp/>not<sp/>have<sp/>field<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>Class-&gt;Base.Name,<sp/>Name);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__field__t" kindref="compound">ml_field_t</ref><sp/>*Field<sp/>=<sp/>&amp;Object-&gt;Fields[Info-&gt;Index];</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Field-&gt;Value<sp/>=<sp/>va_arg(Arg,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref><sp/>*Info<sp/>=<sp/>Class-&gt;Fields;<sp/>Info;<sp/>Info<sp/>=<sp/>Info-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Object-&gt;Fields[Info-&gt;Index].Type<sp/>=<sp/>Info-&gt;Type;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Object;</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ml_object_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_class_size(Value-&gt;Type);</highlight></codeline>
<codeline lineno="660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_object_field(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*)Value)-&gt;Fields[Index].Value;</highlight></codeline>
<codeline lineno="664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_object_foreach(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*callback)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*Object<sp/>=<sp/>(<ref refid="structml__object__t" kindref="compound">ml_object_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__field__t" kindref="compound">ml_field_t</ref><sp/>*Field<sp/>=<sp/>Object-&gt;Fields<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__field__info__t" kindref="compound">ml_field_info_t</ref><sp/>*Info<sp/>=<sp/>Object-&gt;Type-&gt;Fields;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Info)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(callback(ml_method_name(Info-&gt;Method),<sp/>Field-&gt;Value,<sp/>Data))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Field;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Info<sp/>=<sp/>Info-&gt;Next;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679" refid="structml__enum__value__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__integer__t" kindref="compound">ml_integer_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Name;</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}<sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref>;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684" refid="structml__enum__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Switch;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>Values[];</highlight></codeline>
<codeline lineno="688"><highlight class="normal">}<sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref>;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_enum_value_hash(<ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*Value,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)Value-&gt;Base.Type<sp/>+<sp/>Value-&gt;Base.Value;</highlight></codeline>
<codeline lineno="692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_NANBOXING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLIntegerT<sp/>MLInt64T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal">ML_TYPE(MLEnumValueT,<sp/>(MLIntegerT),<sp/></highlight><highlight class="stringliteral">&quot;enum-value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="comment">//@enum::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>instance<sp/>of<sp/>an<sp/>enumeration<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_NANBOXING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MLIntegerT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLEnumValueT)<sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*Value<sp/>=<sp/>(<ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>ml_string_value(Value-&gt;Name),<sp/>ml_string_length(Value-&gt;Name));</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[0];</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_enum_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg<sp/>=<sp/>ml_deref(Args[0]);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Arg,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>stringmap_search(Enum-&gt;Base.Exports,<sp/>ml_string_value(Arg));</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Value)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;EnumError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>enum<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Arg,<sp/>MLIntegerT))<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*Value<sp/>=<sp/>Enum-&gt;Values;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>Index<sp/>=<sp/>ml_integer_value_fast(Arg);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Enum-&gt;Base.Exports-&gt;Size;<sp/>++I,<sp/>++Value)<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value-&gt;Base.Value<sp/>==<sp/>Index)<sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;EnumError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>enum<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>&lt;integer&gt;<sp/>or<sp/>&lt;string&gt;<sp/>not<sp/>&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Arg)-&gt;Name);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal">ML_TYPE(MLEnumT,<sp/>(MLTypeT,<sp/>MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;enum&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>base<sp/>type<sp/>of<sp/>enumeration<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_enum_call</highlight></codeline>
<codeline lineno="735"><highlight class="normal">);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal">ML_TYPE(MLEnumCyclicT,<sp/>(MLEnumT),<sp/></highlight><highlight class="stringliteral">&quot;enum::cyclic&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="comment">//@enum::cyclic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_enum_call</highlight></codeline>
<codeline lineno="740"><highlight class="normal">);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_set_name,<sp/>MLEnumT,<sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Name<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_enum_string_fn(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum<sp/>=<sp/>xnew(<ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref>,<sp/>Count,<sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref>);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Type;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_asprintf((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;Enum-&gt;Base.Name,<sp/></highlight><highlight class="stringliteral">&quot;enum:%lx&quot;</highlight><highlight class="normal">,<sp/>(uintptr_t)Enum);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_enum_value_hash;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_init((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum,<sp/>MLEnumValueT,<sp/>NULL);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Exports[0]<sp/>=<sp/>(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref>)STRINGMAP_INIT;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*Value<sp/>=<sp/>Enum-&gt;Values;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I,<sp/>++Value)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Base.Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Name<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Base.Value<sp/>=<sp/>I<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Enum-&gt;Base.Exports,<sp/>ml_string_value(Args[I]),<sp/>Value);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Enum;</highlight></codeline>
<codeline lineno="766"><highlight class="normal">}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_enum_names_fn(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_CHECK_ARG_COUNT(0);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum<sp/>=<sp/>xnew(<ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref>,<sp/>Count<sp/>-<sp/>1,<sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref>);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Type;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_asprintf((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;Enum-&gt;Base.Name,<sp/></highlight><highlight class="stringliteral">&quot;enum:%lx&quot;</highlight><highlight class="normal">,<sp/>(uintptr_t)Enum);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_enum_value_hash;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_init((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum,<sp/>MLEnumValueT,<sp/>NULL);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Exports[0]<sp/>=<sp/>(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref>)STRINGMAP_INIT;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*Value<sp/>=<sp/>Enum-&gt;Values;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[0],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Base.Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Name<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Base.Value<sp/>=<sp/>ml_integer_value(Args[++Index]);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Enum-&gt;Base.Exports,<sp/>ml_string_value(Iter-&gt;Value),<sp/>Value);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Value;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Enum;</highlight></codeline>
<codeline lineno="791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="794"><highlight class="comment">ML_METHODV(MLEnumT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="comment">//&lt;Names...</highlight></codeline>
<codeline lineno="796"><highlight class="comment">//&gt;enum</highlight></codeline>
<codeline lineno="797"><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>enumeration<sp/>type.</highlight></codeline>
<codeline lineno="798"><highlight class="comment">//$=<sp/>let<sp/>day<sp/>:=<sp/>enum(&quot;Mon&quot;,<sp/>&quot;Tue&quot;,<sp/>&quot;Wed&quot;,<sp/>&quot;Thu&quot;,<sp/>&quot;Fri&quot;,<sp/>&quot;Sat&quot;,<sp/>&quot;Sun&quot;)</highlight></codeline>
<codeline lineno="799"><highlight class="comment">//$=<sp/>day::Wed</highlight></codeline>
<codeline lineno="800"><highlight class="comment">//$=<sp/>day::Fri<sp/>+<sp/>0</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_enum_t<sp/>*Enum<sp/>=<sp/>xnew(ml_enum_t,<sp/>Count,<sp/>ml_enum_value_t);</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Type<sp/>=<sp/>MLEnumT;</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/><sp/><sp/><sp/>GC_asprintf((char<sp/>**)&amp;Enum-&gt;Base.Name,<sp/>&quot;enum:%lx&quot;,<sp/>(uintptr_t)Enum);</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.hash<sp/>=<sp/>(void<sp/>*)ml_enum_value_hash;</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_type_init((ml_type_t<sp/>*)Enum,<sp/>MLEnumValueT,<sp/>NULL);</highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Exports[0]<sp/>=<sp/>(stringmap_t)STRINGMAP_INIT;</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_enum_value_t<sp/>*Value<sp/>=<sp/>Enum-&gt;Values;</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I,<sp/>++Value)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Base.Type<sp/>=<sp/>(ml_type_t<sp/>*)Enum;</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Name<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Base.Value<sp/>=<sp/>I<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Enum-&gt;Base.Exports,<sp/>ml_string_value(Args[I]),<sp/>Value);</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)Enum;</highlight></codeline>
<codeline lineno="820"><highlight class="comment">}</highlight></codeline>
<codeline lineno="821"><highlight class="comment"></highlight></codeline>
<codeline lineno="822"><highlight class="comment">ML_METHODV(MLEnumT,<sp/>MLNamesT)<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="comment">//&lt;Name,Value</highlight></codeline>
<codeline lineno="824"><highlight class="comment">//&gt;enum</highlight></codeline>
<codeline lineno="825"><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>enumeration<sp/>type.</highlight></codeline>
<codeline lineno="826"><highlight class="comment">//$=<sp/>let<sp/>colour<sp/>:=<sp/>enum(Red<sp/>is<sp/>10,<sp/>Green<sp/>is<sp/>20,<sp/>Blue<sp/>is<sp/>30)</highlight></codeline>
<codeline lineno="827"><highlight class="comment">//$=<sp/>colour::Red</highlight></codeline>
<codeline lineno="828"><highlight class="comment">//$=<sp/>list(colour,<sp/>_<sp/>+<sp/>0)</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/><sp/><sp/><sp/>ML_NAMES_CHECK_ARG_COUNT(0);</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_enum_t<sp/>*Enum<sp/>=<sp/>xnew(ml_enum_t,<sp/>Count<sp/>-<sp/>1,<sp/>ml_enum_value_t);</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Type<sp/>=<sp/>MLEnumT;</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/><sp/><sp/>GC_asprintf((char<sp/>**)&amp;Enum-&gt;Base.Name,<sp/>&quot;enum:%lx&quot;,<sp/>(uintptr_t)Enum);</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.hash<sp/>=<sp/>(void<sp/>*)ml_enum_value_hash;</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_type_init((ml_type_t<sp/>*)Enum,<sp/>MLEnumValueT,<sp/>NULL);</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Exports[0]<sp/>=<sp/>(stringmap_t)STRINGMAP_INIT;</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_enum_value_t<sp/>*Value<sp/>=<sp/>Enum-&gt;Values;</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[0],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Base.Type<sp/>=<sp/>(ml_type_t<sp/>*)Enum;</highlight></codeline>
<codeline lineno="845"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Name<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="846"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Base.Value<sp/>=<sp/>ml_integer_value(Args[++Index]);</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Enum-&gt;Base.Exports,<sp/>ml_string_value(Iter-&gt;Value),<sp/>Value);</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Value;</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)Enum;</highlight></codeline>
<codeline lineno="851"><highlight class="comment">}</highlight></codeline>
<codeline lineno="852"><highlight class="comment"></highlight></codeline>
<codeline lineno="853"><highlight class="comment">ML_METHODV(MLEnumCyclicT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="comment">//@enum::cyclic</highlight></codeline>
<codeline lineno="855"><highlight class="comment">//&lt;Names...</highlight></codeline>
<codeline lineno="856"><highlight class="comment">//&gt;enum</highlight></codeline>
<codeline lineno="857"><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>enumeration<sp/>type.</highlight></codeline>
<codeline lineno="858"><highlight class="comment">//$=<sp/>let<sp/>day<sp/>:=<sp/>enum::cyclic(&quot;Mon&quot;,<sp/>&quot;Tue&quot;,<sp/>&quot;Wed&quot;,<sp/>&quot;Thu&quot;,<sp/>&quot;Fri&quot;,<sp/>&quot;Sat&quot;,<sp/>&quot;Sun&quot;)</highlight></codeline>
<codeline lineno="859"><highlight class="comment">//$=<sp/>day::Wed</highlight></codeline>
<codeline lineno="860"><highlight class="comment">//$=<sp/>day::Fri<sp/>+<sp/>0</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_enum_t<sp/>*Enum<sp/>=<sp/>xnew(ml_enum_t,<sp/>Count,<sp/>ml_enum_value_t);</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Type<sp/>=<sp/>MLEnumCyclicT;</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/><sp/><sp/><sp/>GC_asprintf((char<sp/>**)&amp;Enum-&gt;Base.Name,<sp/>&quot;enum:%lx&quot;,<sp/>(uintptr_t)Enum);</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.hash<sp/>=<sp/>(void<sp/>*)ml_enum_value_hash;</highlight></codeline>
<codeline lineno="868"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_type_init((ml_type_t<sp/>*)Enum,<sp/>MLEnumValueT,<sp/>NULL);</highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Exports[0]<sp/>=<sp/>(stringmap_t)STRINGMAP_INIT;</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_enum_value_t<sp/>*Value<sp/>=<sp/>Enum-&gt;Values;</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I,<sp/>++Value)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Base.Type<sp/>=<sp/>(ml_type_t<sp/>*)Enum;</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Name<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="876"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Base.Value<sp/>=<sp/>I<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Enum-&gt;Base.Exports,<sp/>ml_string_value(Args[I]),<sp/>Value);</highlight></codeline>
<codeline lineno="878"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)Enum;</highlight></codeline>
<codeline lineno="880"><highlight class="comment">}</highlight></codeline>
<codeline lineno="881"><highlight class="comment"></highlight></codeline>
<codeline lineno="882"><highlight class="comment">ML_METHODV(MLEnumCyclicT,<sp/>MLNamesT)<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="comment">//@enum::cyclic</highlight></codeline>
<codeline lineno="884"><highlight class="comment">//&lt;Name,Value</highlight></codeline>
<codeline lineno="885"><highlight class="comment">//&gt;enum</highlight></codeline>
<codeline lineno="886"><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>enumeration<sp/>type.</highlight></codeline>
<codeline lineno="887"><highlight class="comment">//$=<sp/>let<sp/>colour<sp/>:=<sp/>enum::cyclic(Red<sp/>is<sp/>10,<sp/>Green<sp/>is<sp/>20,<sp/>Blue<sp/>is<sp/>30)</highlight></codeline>
<codeline lineno="888"><highlight class="comment">//$=<sp/>colour::Red</highlight></codeline>
<codeline lineno="889"><highlight class="comment">//$=<sp/>list(colour,<sp/>_<sp/>+<sp/>0)</highlight></codeline>
<codeline lineno="890"><highlight class="comment"><sp/><sp/><sp/><sp/>ML_NAMES_CHECK_ARG_COUNT(0);</highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_enum_t<sp/>*Enum<sp/>=<sp/>xnew(ml_enum_t,<sp/>Count<sp/>-<sp/>1,<sp/>ml_enum_value_t);</highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Type<sp/>=<sp/>MLEnumCyclicT;</highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/><sp/><sp/><sp/>GC_asprintf((char<sp/>**)&amp;Enum-&gt;Base.Name,<sp/>&quot;enum:%lx&quot;,<sp/>(uintptr_t)Enum);</highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="896"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="897"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.hash<sp/>=<sp/>(void<sp/>*)ml_enum_value_hash;</highlight></codeline>
<codeline lineno="898"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_type_init((ml_type_t<sp/>*)Enum,<sp/>MLEnumValueT,<sp/>NULL);</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Exports[0]<sp/>=<sp/>(stringmap_t)STRINGMAP_INIT;</highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/><sp/><sp/><sp/>ml_enum_value_t<sp/>*Value<sp/>=<sp/>Enum-&gt;Values;</highlight></codeline>
<codeline lineno="903"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="904"><highlight class="comment"><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[0],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Base.Type<sp/>=<sp/>(ml_type_t<sp/>*)Enum;</highlight></codeline>
<codeline lineno="906"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Name<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="907"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Base.Value<sp/>=<sp/>ml_integer_value(Args[++Index]);</highlight></codeline>
<codeline lineno="908"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Enum-&gt;Base.Exports,<sp/>ml_string_value(Iter-&gt;Value),<sp/>Value);</highlight></codeline>
<codeline lineno="909"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Value;</highlight></codeline>
<codeline lineno="910"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>(ml_value_t<sp/>*)Enum;</highlight></codeline>
<codeline lineno="912"><highlight class="comment">}</highlight></codeline>
<codeline lineno="913"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_enum(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TypeName,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>TypeName);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(va_arg(Args,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*))<sp/>++Size;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum<sp/>=<sp/>xnew(<ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref>,<sp/>Size,<sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref>);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Type<sp/>=<sp/>MLEnumT;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Name<sp/>=<sp/>TypeName;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_enum_value_hash;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_init((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum,<sp/>MLEnumValueT,<sp/>NULL);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Exports[0]<sp/>=<sp/>(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref>)STRINGMAP_INIT;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*Value<sp/>=<sp/>Enum-&gt;Values;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>TypeName);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((String<sp/>=<sp/>va_arg(Args,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)))<sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Name<sp/>=<sp/>ml_string(String,<sp/>-1);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Base.Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Name<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Base.Value<sp/>=<sp/>++Index;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Enum-&gt;Base.Exports,<sp/>String,<sp/>Value);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Value;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum;</highlight></codeline>
<codeline lineno="945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_enum_cyclic(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TypeName,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>TypeName);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(va_arg(Args,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*))<sp/>++Size;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum<sp/>=<sp/>xnew(<ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref>,<sp/>Size,<sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref>);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Type<sp/>=<sp/>MLEnumCyclicT;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Name<sp/>=<sp/>TypeName;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_enum_value_hash;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_init((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum,<sp/>MLEnumValueT,<sp/>NULL);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Exports[0]<sp/>=<sp/>(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref>)STRINGMAP_INIT;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*Value<sp/>=<sp/>Enum-&gt;Values;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>TypeName);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((String<sp/>=<sp/>va_arg(Args,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)))<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Name<sp/>=<sp/>ml_string(String,<sp/>-1);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Base.Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Name<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Base.Value<sp/>=<sp/>++Index;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Enum-&gt;Base.Exports,<sp/>String,<sp/>Value);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Value;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum;</highlight></codeline>
<codeline lineno="977"><highlight class="normal">}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_enum2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TypeName,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>TypeName);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(va_arg(Args,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Size;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_arg(Args,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum<sp/>=<sp/>xnew(<ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref>,<sp/>Size,<sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref>);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Type<sp/>=<sp/>MLEnumT;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Name<sp/>=<sp/>TypeName;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_enum_value_hash;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_init((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum,<sp/>MLEnumValueT,<sp/>NULL);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>Enum-&gt;Base.Exports[0]<sp/>=<sp/>(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref>)STRINGMAP_INIT;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*Value<sp/>=<sp/>Enum-&gt;Values;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>TypeName);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((String<sp/>=<sp/>va_arg(Args,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)))<sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Name<sp/>=<sp/>ml_string(String,<sp/>-1);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Base.Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Name<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Base.Value<sp/>=<sp/>va_arg(Args,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Enum-&gt;Base.Exports,<sp/>String,<sp/>Value);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Value;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_enum_value(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type,<sp/>int64_t<sp/>Value)<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*)Type;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*EnumValue<sp/>=<sp/>Enum-&gt;Values;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Enum-&gt;Base.Exports-&gt;Size;<sp/>++I,<sp/>++EnumValue)<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(EnumValue-&gt;Base.Value<sp/>==<sp/>Value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)EnumValue;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;EnumError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>enum<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal">int64_t<sp/>ml_enum_value_value(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*)Value)-&gt;Base.Value;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_enum_value_name(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_string_value(((<ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*)Value)-&gt;Name);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_enum_value_index(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*EnumValue<sp/>=<sp/>(<ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*)EnumValue-&gt;Base.Type;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EnumValue<sp/>-<sp/>Enum-&gt;Values;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;count&quot;</highlight><highlight class="normal">,<sp/>MLEnumT)<sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="comment">//&lt;Enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="comment">//&gt;integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>size<sp/>of<sp/>the<sp/>enumeration<sp/>:mini:`Enum`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>day<sp/>:=<sp/>enum(&quot;Mon&quot;,<sp/>&quot;Tue&quot;,<sp/>&quot;Wed&quot;,<sp/>&quot;Thu&quot;,<sp/>&quot;Fri&quot;,<sp/>&quot;Sat&quot;,<sp/>&quot;Sun&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>day:count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(Enum-&gt;Base.Exports-&gt;Size);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;random&quot;</highlight><highlight class="normal">,<sp/>MLEnumT)<sp/>{</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="comment">//&lt;Enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="comment">//&gt;enum::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Limit<sp/>=<sp/>Enum-&gt;Base.Exports-&gt;Size;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Divisor<sp/>=<sp/>RAND_MAX<sp/>/<sp/>Limit;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Random;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>Random<sp/>=<sp/>random()<sp/>/<sp/>Divisor;<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(Random<sp/>&gt;=<sp/>Limit);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)(Enum-&gt;Values<sp/>+<sp/>Random);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal">ML_METHOD(MLIntegerT,<sp/>MLEnumValueT)<sp/>{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(ml_enum_value_value(Args[0]));</highlight></codeline>
<codeline lineno="1059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061" refid="structml__enum__iter__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*Values;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/>Size;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal">}<sp/><ref refid="structml__enum__iter__t" kindref="compound">ml_enum_iter_t</ref>;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal">ML_TYPE(MLEnumIterT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;enum-iter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLEnumT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Enum-&gt;Base.Exports-&gt;Size;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Size)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__iter__t" kindref="compound">ml_enum_iter_t</ref><sp/>*Iter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__enum__iter__t" kindref="compound">ml_enum_iter_t</ref>);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Type<sp/>=<sp/>MLEnumIterT;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Values<sp/>=<sp/>Enum-&gt;Values;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Size<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLEnumIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__enum__iter__t" kindref="compound">ml_enum_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Iter-&gt;Index<sp/>==<sp/>Iter-&gt;Size)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLEnumIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__enum__iter__t" kindref="compound">ml_enum_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Iter-&gt;Index<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="1088"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLEnumIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__enum__iter__t" kindref="compound">ml_enum_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter-&gt;Values<sp/>+<sp/>Iter-&gt;Index);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094" refid="structml__enum__range__iter__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*Values;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/>Count;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Current,<sp/>Max;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal">}<sp/><ref refid="structml__enum__range__iter__t" kindref="compound">ml_enum_range_iter_t</ref>;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal">ML_TYPE(MLEnumRangeIterT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;enum-range-iter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104" refid="structml__enum__range__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Start,<sp/>Count;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal">}<sp/><ref refid="structml__enum__range__t" kindref="compound">ml_enum_range_t</ref>;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal">ML_TYPE(MLEnumRangeT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;enum-range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>range<sp/>of<sp/>enum<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;..&quot;</highlight><highlight class="normal">,<sp/>MLEnumValueT,<sp/>MLEnumValueT)<sp/>{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="comment">//&lt;Min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment">//&lt;Max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="comment">//&gt;enum::range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>range<sp/>of<sp/>enum<sp/>values.<sp/>:mini:`Min`<sp/>and<sp/>:mini:`Max`<sp/>must<sp/>belong<sp/>to<sp/>the<sp/>same<sp/>enumeration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>day<sp/>:=<sp/>enum(&quot;Mon&quot;,<sp/>&quot;Tue&quot;,<sp/>&quot;Wed&quot;,<sp/>&quot;Thu&quot;,<sp/>&quot;Fri&quot;,<sp/>&quot;Sat&quot;,<sp/>&quot;Sun&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>day::Mon<sp/>..<sp/>day::Fri</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*ValueA<sp/>=<sp/>(<ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*ValueB<sp/>=<sp/>(<ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ValueA-&gt;Base.Type<sp/>!=<sp/>ValueB-&gt;Base.Type)<sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Enum<sp/>types<sp/>do<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__range__t" kindref="compound">ml_enum_range_t</ref><sp/>*Range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__enum__range__t" kindref="compound">ml_enum_range_t</ref>);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Types[2]<sp/>=<sp/>{MLEnumRangeT,<sp/>ValueA-&gt;Base.Type};</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>ml_generic_type(2,<sp/>Types);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>Range-&gt;Type<sp/>=<sp/>MLEnumRangeT;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum<sp/>=<sp/>Range-&gt;Enum<sp/>=<sp/>(<ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*)ValueA-&gt;Base.Type;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Start<sp/>=<sp/>Range-&gt;Start<sp/>=<sp/>ValueA<sp/>-<sp/>Enum-&gt;Values;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Last<sp/>=<sp/>ValueB<sp/>-<sp/>Enum-&gt;Values;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Last<sp/>&gt;=<sp/>Range-&gt;Start)<sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range-&gt;Count<sp/>=<sp/>(Last<sp/>-<sp/>Start)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Enum-&gt;Base.Type<sp/>==<sp/>MLEnumCyclicT)<sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range-&gt;Count<sp/>=<sp/>(Last<sp/>+<sp/>Enum-&gt;Base.Exports-&gt;Size<sp/>-<sp/>Start)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range-&gt;Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Range;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLEnumRangeT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__enum__range__t" kindref="compound">ml_enum_range_t</ref><sp/>*Range)<sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Count<sp/>==<sp/>0)<sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__range__iter__t" kindref="compound">ml_enum_range_iter_t</ref><sp/>*Iter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__enum__range__iter__t" kindref="compound">ml_enum_range_iter_t</ref>);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Type<sp/>=<sp/>MLEnumRangeIterT;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Values<sp/>=<sp/>Range-&gt;Enum-&gt;Values;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Count<sp/>=<sp/>Range-&gt;Count;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Current<sp/>=<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>Iter-&gt;Max<sp/>=<sp/>Range-&gt;Enum-&gt;Base.Exports-&gt;Size;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLEnumRangeIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__enum__range__iter__t" kindref="compound">ml_enum_range_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter-&gt;Index<sp/>==<sp/>Iter-&gt;Count)<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Iter-&gt;Index;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++Iter-&gt;Current<sp/>==<sp/>Iter-&gt;Max)<sp/>Iter-&gt;Current<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Iter);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLEnumRangeIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__enum__range__iter__t" kindref="compound">ml_enum_range_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(ml_integer(Iter-&gt;Index));</highlight></codeline>
<codeline lineno="1169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLEnumRangeIterT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__enum__range__iter__t" kindref="compound">ml_enum_range_iter_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Iter-&gt;Values<sp/>+<sp/>Iter-&gt;Current);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175" refid="structml__enum__switch__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Cases[];</highlight></codeline>
<codeline lineno="1179"><highlight class="normal">}<sp/><ref refid="structml__enum__switch__t" kindref="compound">ml_enum_switch_t</ref>;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_enum_switch(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__enum__switch__t" kindref="compound">ml_enum_switch_t</ref><sp/>*Switch,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg<sp/>=<sp/>ml_deref(Args[0]);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Arg,<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Switch-&gt;Enum))<sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>%s<sp/>for<sp/>argument<sp/>1&quot;</highlight><highlight class="normal">,<sp/>Switch-&gt;Enum-&gt;Base.Name);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Switch-&gt;Cases[ml_enum_value_index(Arg)]);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal">ML_TYPE(MLEnumSwitchT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;enum-switch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_enum_switch</highlight></codeline>
<codeline lineno="1193"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_enum_switch_fn(<ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Total<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLListT);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Total<sp/>+=<sp/>ml_list_length(Args[I]);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>Enum-&gt;Base.Exports-&gt;Size;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__switch__t" kindref="compound">ml_enum_switch_t</ref><sp/>*Switch<sp/>=<sp/>xnew(<ref refid="structml__enum__switch__t" kindref="compound">ml_enum_switch_t</ref>,<sp/>Size,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>Switch-&gt;Type<sp/>=<sp/>MLEnumSwitchT;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>Switch-&gt;Enum<sp/>=<sp/>Enum;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Default<sp/>=<sp/>ml_integer(Count);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Size;<sp/>++I)<sp/>Switch-&gt;Cases[I]<sp/>=<sp/>Default;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Case<sp/>=<sp/>ml_integer(I);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[I],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum))<sp/>{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Switch-&gt;Cases[ml_enum_value_index(Value)]<sp/>=<sp/>Case;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLSymbolT))<sp/>{</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*EnumValue<sp/>=<sp/>stringmap_search(Enum-&gt;Base.Exports,<sp/>ml_symbol_name(Value));</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EnumValue)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;EnumError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>enum<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Switch-&gt;Cases[EnumValue<sp/>-<sp/>Enum-&gt;Values]<sp/>=<sp/>Case;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*EnumValue<sp/>=<sp/>stringmap_search(Enum-&gt;Base.Exports,<sp/>ml_string_value(Value));</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EnumValue)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;EnumError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>enum<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Switch-&gt;Cases[EnumValue<sp/>-<sp/>Enum-&gt;Values]<sp/>=<sp/>Case;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLEnumRangeT))<sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__enum__range__t" kindref="compound">ml_enum_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__enum__range__t" kindref="compound">ml_enum_range_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Range-&gt;Enum<sp/>!=<sp/>Enum)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>value<sp/>in<sp/>enum<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>Range-&gt;Start;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>L<sp/>=<sp/>Range-&gt;Count;<sp/>--L<sp/>&gt;=<sp/>0;)<sp/>{</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Switch-&gt;Cases[J]<sp/>=<sp/>Case;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++J<sp/>==<sp/>Size)<sp/>J<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLSymbolRangeT))<sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__symbol__range__t" kindref="compound">ml_symbol_range_t</ref><sp/>*Range<sp/>=<sp/>(<ref refid="structml__symbol__range__t" kindref="compound">ml_symbol_range_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*Min<sp/>=<sp/>stringmap_search(Enum-&gt;Base.Exports,<sp/>Range-&gt;First);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*Max<sp/>=<sp/>stringmap_search(Enum-&gt;Base.Exports,<sp/>Range-&gt;Last);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Min)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;EnumError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>enum<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Max)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;EnumError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>enum<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MinIndex<sp/>=<sp/>Min<sp/>-<sp/>Enum-&gt;Values;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MaxIndex<sp/>=<sp/>Max<sp/>-<sp/>Enum-&gt;Values;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MaxIndex<sp/>&gt;=<sp/>MinIndex)<sp/>{</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>MinIndex;<sp/>J<sp/>&lt;=<sp/>MaxIndex;<sp/>++J)<sp/>Switch-&gt;Cases[J]<sp/>=<sp/>Case;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Enum-&gt;Base.Type<sp/>==<sp/>MLEnumCyclicT)<sp/>{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>MinIndex;<sp/>J<sp/>&lt;<sp/>Size;<sp/>++J)<sp/>Switch-&gt;Cases[J]<sp/>=<sp/>Case;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;=<sp/>MaxIndex;<sp/>++J)<sp/>Switch-&gt;Cases[J]<sp/>=<sp/>Case;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>value<sp/>in<sp/>enum<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Switch;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal">ML_METHOD(MLCompilerSwitch,<sp/>MLEnumT)<sp/>{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Enum-&gt;Switch)<sp/>Enum-&gt;Switch<sp/>=<sp/>ml_inline_function(ml_cfunction(Enum,<sp/>(ml_callback_t)ml_enum_switch_fn));</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Enum-&gt;Switch;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLEnumValueT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*TypeA<sp/>=<sp/>ml_typeof(Args[0]);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*TypeB<sp/>=<sp/>ml_typeof(Args[1]);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TypeA<sp/>&lt;<sp/>TypeB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(-1);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TypeA<sp/>&gt;<sp/>TypeB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(1);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>A<sp/>=<sp/>ml_enum_value_value(Args[0]);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>B<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A<sp/>&lt;<sp/>B)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(-1);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A<sp/>&gt;<sp/>B)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(1);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(0);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLEnumValueT)<sp/>{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*TypeA<sp/>=<sp/>ml_typeof(Args[0]);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*TypeB<sp/>=<sp/>ml_typeof(Args[1]);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TypeA<sp/>&lt;<sp/>TypeB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(-1);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TypeA<sp/>&gt;<sp/>TypeB)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(1);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>A<sp/>=<sp/>ml_integer_value(Args[0]);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>B<sp/>=<sp/>ml_enum_value_value(Args[1]);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A<sp/>&lt;<sp/>B)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(-1);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(A<sp/>&gt;<sp/>B)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(1);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_integer(0);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>MLEnumValueT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value<sp/>=<sp/>A-&gt;Base.Value<sp/>+<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*)A-&gt;Base.Type;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Enum-&gt;Base.Type<sp/>==<sp/>MLEnumCyclicT)<sp/>{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>(Value<sp/>-<sp/>1)<sp/>%<sp/>Enum-&gt;Base.Exports-&gt;Size;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>0)<sp/>Index<sp/>+=<sp/>Enum-&gt;Base.Exports-&gt;Size;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)(Enum-&gt;Values<sp/>+<sp/>Index);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_enum_value((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum,<sp/>Value);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>MLIntegerT,<sp/>MLEnumValueT)<sp/>{</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value<sp/>=<sp/>A-&gt;Base.Value<sp/>+<sp/>ml_integer_value(Args[0]);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*)A-&gt;Base.Type;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Enum-&gt;Base.Type<sp/>==<sp/>MLEnumCyclicT)<sp/>{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>(Value<sp/>-<sp/>1)<sp/>%<sp/>Enum-&gt;Base.Exports-&gt;Size;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>0)<sp/>Index<sp/>+=<sp/>Enum-&gt;Base.Exports-&gt;Size;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)(Enum-&gt;Values<sp/>+<sp/>Index);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_enum_value((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum,<sp/>Value);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>MLEnumValueT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value<sp/>=<sp/>A-&gt;Base.Value<sp/>-<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*)A-&gt;Base.Type;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Enum-&gt;Base.Type<sp/>==<sp/>MLEnumCyclicT)<sp/>{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>(Value<sp/>-<sp/>1)<sp/>%<sp/>Enum-&gt;Base.Exports-&gt;Size;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>0)<sp/>Index<sp/>+=<sp/>Enum-&gt;Base.Exports-&gt;Size;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)(Enum-&gt;Values<sp/>+<sp/>Index);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_enum_value((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum,<sp/>Value);</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;next&quot;</highlight><highlight class="normal">,<sp/>MLEnumValueT)<sp/>{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value<sp/>=<sp/>A-&gt;Base.Value<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*)A-&gt;Base.Type;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Enum-&gt;Base.Type<sp/>==<sp/>MLEnumCyclicT)<sp/>{</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>(Value<sp/>-<sp/>1)<sp/>%<sp/>Enum-&gt;Base.Exports-&gt;Size;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>0)<sp/>Index<sp/>+=<sp/>Enum-&gt;Base.Exports-&gt;Size;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)(Enum-&gt;Values<sp/>+<sp/>Index);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_enum_value((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum,<sp/>Value);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;prev&quot;</highlight><highlight class="normal">,<sp/>MLEnumValueT)<sp/>{</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__enum__value__t" kindref="compound">ml_enum_value_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>Value<sp/>=<sp/>A-&gt;Base.Value<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*Enum<sp/>=<sp/>(<ref refid="structml__enum__t" kindref="compound">ml_enum_t</ref><sp/>*)A-&gt;Base.Type;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Enum-&gt;Base.Type<sp/>==<sp/>MLEnumCyclicT)<sp/>{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>(Value<sp/>-<sp/>1)<sp/>%<sp/>Enum-&gt;Base.Exports-&gt;Size;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Index<sp/>&lt;<sp/>0)<sp/>Index<sp/>+=<sp/>Enum-&gt;Base.Exports-&gt;Size;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)(Enum-&gt;Values<sp/>+<sp/>Index);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_enum_value((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Enum,<sp/>Value);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349" refid="structml__flags__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Names[];</highlight></codeline>
<codeline lineno="1352"><highlight class="normal">}<sp/><ref refid="structml__flags__t" kindref="compound">ml_flags_t</ref>;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354" refid="structml__flags__value__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>Value;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal">}<sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref>;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_flags_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__flags__t" kindref="compound">ml_flags_t</ref><sp/>*Flags,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref>);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/>Value-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Flags;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg<sp/>=<sp/>ml_deref(Args[I]);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Arg,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Flag<sp/>=<sp/>stringmap_search(Flags-&gt;Base.Exports,<sp/>ml_string_value(Arg));</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Flag)<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;FlagError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>flag<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Value<sp/>|=<sp/>ml_flags_value_value(Flag);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Arg,<sp/>MLIntegerT))<sp/>{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>Flag<sp/>=<sp/>ml_integer_value_fast(Arg);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flag<sp/>&gt;=<sp/>(1L<sp/>&lt;&lt;<sp/>Flags-&gt;Base.Exports-&gt;Size))<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;FlagError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>flags<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Value<sp/>|=<sp/>Flag;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>&lt;integer&gt;<sp/>or<sp/>&lt;string&gt;<sp/>not<sp/>&lt;%s&gt;&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Arg)-&gt;Name);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal">ML_TYPE(MLFlagsT,<sp/>(MLTypeT),<sp/></highlight><highlight class="stringliteral">&quot;flags&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>base<sp/>type<sp/>of<sp/>flag<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_flags_call</highlight></codeline>
<codeline lineno="1382"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ml_flag_value_hash(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*Value,<sp/><ref refid="structml__hash__chain__t" kindref="compound">ml_hash_chain_t</ref><sp/>*Chain)<sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)Value-&gt;Type<sp/>+<sp/>Value-&gt;Value;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal">ML_TYPE(MLFlagsValueT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;flag-value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="comment">//@flags::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>instance<sp/>of<sp/>a<sp/>flags<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392" refid="structml__flags__value__append__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>Value;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Length;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal">}<sp/><ref refid="structml__flags__value__append__t" kindref="compound">ml_flags_value_append_t</ref>;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_flags_value_append(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*Flags,<sp/><ref refid="structml__flags__value__append__t" kindref="compound">ml_flags_value_append_t</ref><sp/>*Append)<sp/>{</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Append-&gt;Value<sp/>&amp;<sp/>Flags-&gt;Value)<sp/>==<sp/>Flags-&gt;Value)<sp/>{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>Append-&gt;Buffer;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Buffer-&gt;Length<sp/>&gt;<sp/>Append-&gt;Length)<sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/>Name,<sp/>strlen(Name));</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLFlagsValueT)<sp/>{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*Value<sp/>=<sp/>(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__append__t" kindref="compound">ml_flags_value_append_t</ref><sp/>Append[1]<sp/>=<sp/>{{Buffer,<sp/>Value-&gt;Value,<sp/>Buffer-&gt;Length}};</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_foreach(Value-&gt;Type-&gt;Exports,<sp/>Append,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_flags_value_append);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Buffer-&gt;Length<sp/>&gt;<sp/>Append-&gt;Length<sp/>?<sp/>MLSome<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415" refid="structml__flags__spec__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__t" kindref="compound">ml_flags_t</ref><sp/>*Flags;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>Include;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>Exclude;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal">}<sp/><ref refid="structml__flags__spec__t" kindref="compound">ml_flags_spec_t</ref>;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal">ML_TYPE(MLFlagsSpecT,<sp/>(),<sp/></highlight><highlight class="stringliteral">&quot;flag-spec&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight><highlight class="comment">//@flags::spec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>pair<sp/>of<sp/>flag<sp/>sets<sp/>for<sp/>including<sp/>and<sp/>excluding<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;append&quot;</highlight><highlight class="normal">,<sp/>MLStringBufferT,<sp/>MLFlagsSpecT)<sp/>{</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*Buffer<sp/>=<sp/>(<ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__spec__t" kindref="compound">ml_flags_spec_t</ref><sp/>*Value<sp/>=<sp/>(<ref refid="structml__flags__spec__t" kindref="compound">ml_flags_spec_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__append__t" kindref="compound">ml_flags_value_append_t</ref><sp/>Append[1]<sp/>=<sp/>{{Buffer,<sp/>Value-&gt;Include,<sp/>Buffer-&gt;Length}};</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_foreach(Value-&gt;Flags-&gt;Base.Exports,<sp/>Append,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_flags_value_append);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value-&gt;Exclude<sp/>==<sp/>~Value-&gt;Include)<sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_write(Buffer,<sp/></highlight><highlight class="stringliteral">&quot;/*&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value-&gt;Exclude)<sp/>{</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Append-&gt;Value<sp/>=<sp/>Value-&gt;Exclude;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Append-&gt;Length<sp/>=<sp/>Buffer-&gt;Length;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_foreach(Value-&gt;Flags-&gt;Base.Exports,<sp/>Append,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_flags_value_append);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_stringbuffer_put(Buffer,<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Buffer-&gt;Length<sp/>&gt;<sp/>Append-&gt;Length<sp/>?<sp/>MLSome<sp/>:<sp/>MLNil;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal">ML_METHODV(MLFlagsT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight><highlight class="comment">//&gt;flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>flags<sp/>type,<sp/>where<sp/>:mini:`Name/i`<sp/>has<sp/>value<sp/>:math:`2^{i-1}`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>mode<sp/>:=<sp/>flags(&quot;Read&quot;,<sp/>&quot;Write&quot;,<sp/>&quot;Execute&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>mode::Read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>mode::Read<sp/>+<sp/>mode::Write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLStringT);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__t" kindref="compound">ml_flags_t</ref><sp/>*Flags<sp/>=<sp/>xnew(<ref refid="structml__flags__t" kindref="compound">ml_flags_t</ref>,<sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.Type<sp/>=<sp/>MLFlagsT;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_asprintf((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;Flags-&gt;Base.Name,<sp/></highlight><highlight class="stringliteral">&quot;flags:%lx&quot;</highlight><highlight class="normal">,<sp/>(uintptr_t)Flags);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_flag_value_hash;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_init((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Flags,<sp/>MLFlagsValueT,<sp/>NULL);</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.Exports[0]<sp/>=<sp/>(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref>)STRINGMAP_INIT;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>Flag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref>);</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Flags;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flags-&gt;Names[I]<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Value<sp/>=<sp/>Flag;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flag<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Flags-&gt;Base.Exports,<sp/>ml_string_value(Args[I]),<sp/>Value);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Flags;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal">ML_METHODV(MLFlagsT,<sp/>MLNamesT)<sp/>{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight><highlight class="comment">//&lt;Name,Value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight><highlight class="comment">//&gt;flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>flags<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>flags<sp/>type,<sp/>where<sp/>:mini:`Name/i`<sp/>has<sp/>value<sp/>:mini:`Value/i`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>mode<sp/>:=<sp/>flags(Read<sp/>is<sp/>1,<sp/>Write<sp/>is<sp/>4,<sp/>Execute<sp/>is<sp/>32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>mode::Read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>mode::Read<sp/>+<sp/>mode::Write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_CHECK_ARG_COUNT(0);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__t" kindref="compound">ml_flags_t</ref><sp/>*Flags<sp/>=<sp/>xnew(<ref refid="structml__flags__t" kindref="compound">ml_flags_t</ref>,<sp/>Count<sp/>-<sp/>1,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.Type<sp/>=<sp/>MLFlagsT;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>GC_asprintf((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)&amp;Flags-&gt;Base.Name,<sp/></highlight><highlight class="stringliteral">&quot;flags:%lx&quot;</highlight><highlight class="normal">,<sp/>(uintptr_t)Flags);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_flag_value_hash;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_init((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Flags,<sp/>MLFlagsValueT,<sp/>NULL);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.Exports[0]<sp/>=<sp/>(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref>)STRINGMAP_INIT;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_NAMES_FOREACH(Args[0],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref>);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Flags;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flags-&gt;Names[I]<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Value<sp/>=<sp/>ml_integer_value(Args[++I]);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Flags-&gt;Base.Exports,<sp/>ml_string_value(Iter-&gt;Value),<sp/>Value);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Flags;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_flags(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TypeName,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>TypeName);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(va_arg(Args,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*))<sp/>++Size;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__t" kindref="compound">ml_flags_t</ref><sp/>*Flags<sp/>=<sp/>xnew(<ref refid="structml__flags__t" kindref="compound">ml_flags_t</ref>,<sp/>Size,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.Type<sp/>=<sp/>MLFlagsT;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.Name<sp/>=<sp/>TypeName;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_flag_value_hash;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_init((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Flags,<sp/>MLFlagsValueT,<sp/>NULL);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.Exports[0]<sp/>=<sp/>(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref>)STRINGMAP_INIT;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>Flag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>TypeName);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((String<sp/>=<sp/>va_arg(Args,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)))<sp/>{</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Name<sp/>=<sp/>ml_string(String,<sp/>-1);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref>);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Flags;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flags-&gt;Names[Index++]<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Value<sp/>=<sp/>Flag;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flag<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Flags-&gt;Base.Exports,<sp/>String,<sp/>Value);</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Flags;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*ml_flags2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TypeName,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>Args;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>TypeName);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(va_arg(Args,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*))<sp/>{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Size;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va_arg(Args,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__t" kindref="compound">ml_flags_t</ref><sp/>*Flags<sp/>=<sp/>xnew(<ref refid="structml__flags__t" kindref="compound">ml_flags_t</ref>,<sp/>Size,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.Type<sp/>=<sp/>MLFlagsT;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.Name<sp/>=<sp/>TypeName;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.deref<sp/>=<sp/>ml_default_deref;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.assign<sp/>=<sp/>ml_default_assign;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.hash<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_flag_value_hash;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.call<sp/>=<sp/>ml_default_call;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.Rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_init((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Flags,<sp/>MLFlagsValueT,<sp/>NULL);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.Exports[0]<sp/>=<sp/>(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref>)STRINGMAP_INIT;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(Args,<sp/>TypeName);</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*String;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((String<sp/>=<sp/>va_arg(Args,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)))<sp/>{</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Name<sp/>=<sp/>ml_string(String,<sp/>-1);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref>);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Type<sp/>=<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Flags;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flags-&gt;Names[Index++]<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value-&gt;Value<sp/>=<sp/>va_arg(Args,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Flags-&gt;Base.Exports,<sp/>String,<sp/>Value);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(Args);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Flags;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_value_set_name,<sp/>MLFlagsT,<sp/><ref refid="structml__flags__t" kindref="compound">ml_flags_t</ref><sp/>*Flags,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name)<sp/>{</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>Flags-&gt;Base.Name<sp/>=<sp/>Name;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_flags_value(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type,<sp/>uint64_t<sp/>Flags)<sp/>{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*Value<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref>);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>Value-&gt;Type<sp/>=<sp/>Type;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>Value-&gt;Value<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal">uint64_t<sp/>ml_flags_value_value(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*)Value)-&gt;Value;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ml_flags_value_name(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__stringbuffer__t" kindref="compound">ml_stringbuffer_t</ref><sp/>Buffer[1]<sp/>=<sp/>{ML_STRINGBUFFER_INIT};</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__append__t" kindref="compound">ml_flags_value_append_t</ref><sp/>Append[1]<sp/>=<sp/>{{Buffer,<sp/>ml_flags_value_value(Value),<sp/>Buffer-&gt;Length}};</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_foreach(Value-&gt;Type-&gt;Exports,<sp/>Append,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_flags_value_append);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_stringbuffer_get_string(Buffer);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594" refid="structml__flags__case__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Index;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>Value;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal">}<sp/><ref refid="structml__flags__case__t" kindref="compound">ml_flags_case_t</ref>;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight></codeline>
<codeline lineno="1599" refid="structml__flags__switch__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__t" kindref="compound">ml_flags_t</ref><sp/>*Flags;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__case__t" kindref="compound">ml_flags_case_t</ref><sp/>Cases[];</highlight></codeline>
<codeline lineno="1603"><highlight class="normal">}<sp/><ref refid="structml__flags__switch__t" kindref="compound">ml_flags_switch_t</ref>;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_flags_switch(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__flags__switch__t" kindref="compound">ml_flags_switch_t</ref><sp/>*Switch,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Arg<sp/>=<sp/>ml_deref(Args[0]);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Arg,<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Switch-&gt;Flags))<sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>%s<sp/>for<sp/>argument<sp/>1&quot;</highlight><highlight class="normal">,<sp/>Switch-&gt;Flags-&gt;Base.Name);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>Value<sp/>=<sp/>ml_enum_value_value(Arg);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__flags__case__t" kindref="compound">ml_flags_case_t</ref><sp/>*Case<sp/>=<sp/>Switch-&gt;Cases;;<sp/>++Case)<sp/>{</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Case-&gt;Value<sp/>&amp;<sp/>Value)<sp/>==<sp/>Case-&gt;Value)<sp/>ML_RETURN(Case-&gt;Index);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(MLNil);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal">ML_TYPE(MLFlagsSwitchT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;flags-switch&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_flags_switch</highlight></codeline>
<codeline lineno="1621"><highlight class="normal">);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*ml_flags_switch_fn(<ref refid="structml__flags__t" kindref="compound">ml_flags_t</ref><sp/>*Flags,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Total<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLListT);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Total<sp/>+=<sp/>ml_list_length(Args[I]);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__switch__t" kindref="compound">ml_flags_switch_t</ref><sp/>*Switch<sp/>=<sp/>xnew(<ref refid="structml__flags__switch__t" kindref="compound">ml_flags_switch_t</ref>,<sp/>Total,<sp/><ref refid="structml__flags__case__t" kindref="compound">ml_flags_case_t</ref>);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/>Switch-&gt;Type<sp/>=<sp/>MLFlagsSwitchT;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>Switch-&gt;Flags<sp/>=<sp/>Flags;</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__case__t" kindref="compound">ml_flags_case_t</ref><sp/>*Case<sp/>=<sp/>Switch-&gt;Cases;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[I],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Iter-&gt;Value;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>(<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Flags))<sp/>{</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Value<sp/>=<sp/>ml_flags_value_value(Value);</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLStringT))<sp/>{</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*FlagsValue<sp/>=<sp/>stringmap_search(Flags-&gt;Base.Exports,<sp/>ml_string_value(Value));</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!FlagsValue)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;FlagsError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>flags<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Value<sp/>=<sp/>ml_flags_value_value(FlagsValue);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is(Value,<sp/>MLTupleT))<sp/>{</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*Tuple<sp/>=<sp/>(<ref refid="structml__tuple__t" kindref="compound">ml_tuple_t</ref><sp/>*)Value;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>J<sp/>=<sp/>0;<sp/>J<sp/>&lt;<sp/>Tuple-&gt;Size;<sp/>++J)<sp/>{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value<sp/>=<sp/>Tuple-&gt;Values[J];</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Value,<sp/>MLStringT))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>value<sp/>in<sp/>flags<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*FlagsValue<sp/>=<sp/>stringmap_search(Flags-&gt;Base.Exports,<sp/>ml_string_value(Tuple-&gt;Values[J]));</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!FlagsValue)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;FlagsError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>flags<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Value<sp/>|=<sp/>ml_flags_value_value(FlagsValue);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ValueError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>value<sp/>in<sp/>flags<sp/>case&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Case-&gt;Index<sp/>=<sp/>ml_integer(I);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Case;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/>Case-&gt;Index<sp/>=<sp/>ml_integer(Count);</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Switch;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal">ML_METHOD(MLCompilerSwitch,<sp/>MLFlagsT)<sp/>{</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_inline_call_macro(ml_cfunction(Args[0],<sp/>(ml_callback_t)ml_flags_switch_fn));</highlight></codeline>
<codeline lineno="1666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>MLFlagsValueT,<sp/>MLFlagsValueT)<sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight><highlight class="comment">//&lt;Flags/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight><highlight class="comment">//&lt;Flags/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight><highlight class="comment">//&gt;flags::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>union<sp/>of<sp/>:mini:`Flags/1`<sp/>and<sp/>:mini:`Flags/2`.<sp/>:mini:`Flags/1`<sp/>and<sp/>:mini:`Flags/2`<sp/>must<sp/>have<sp/>the<sp/>same<sp/>flags<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>mode<sp/>:=<sp/>flags(&quot;Read&quot;,<sp/>&quot;Write&quot;,<sp/>&quot;Execute&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>mode::Read<sp/>+<sp/>mode::Write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>A-&gt;Type);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*C<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref>);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Type<sp/>=<sp/>A-&gt;Type;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Value<sp/>=<sp/>A-&gt;Value<sp/>|<sp/>B-&gt;Value;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>MLFlagsValueT,<sp/>MLFlagsValueT)<sp/>{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight><highlight class="comment">//&lt;Flags/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="comment">//&lt;Flags/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight><highlight class="comment">//&gt;flags::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>difference<sp/>of<sp/>:mini:`Flags/1`<sp/>and<sp/>:mini:`Flags/2`.<sp/>:mini:`Flags/1`<sp/>and<sp/>:mini:`Flags/2`<sp/>must<sp/>have<sp/>the<sp/>same<sp/>flags<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>mode<sp/>:=<sp/>flags(&quot;Read&quot;,<sp/>&quot;Write&quot;,<sp/>&quot;Execute&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>mode(&quot;Read&quot;,<sp/>&quot;Write&quot;)<sp/>-<sp/>mode::Write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>A-&gt;Type);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*C<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref>);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Type<sp/>=<sp/>A-&gt;Type;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/>C-&gt;Value<sp/>=<sp/>A-&gt;Value<sp/>&amp;<sp/>~B-&gt;Value;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)C;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">,<sp/>MLFlagsValueT,<sp/>MLFlagsValueT)<sp/>{</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight><highlight class="comment">//&lt;Flags/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="comment">//&lt;Flags/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight><highlight class="comment">//&gt;flags::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>:mini:`Flags/2`<sp/>if<sp/>it<sp/>contains<sp/>all<sp/>of<sp/>:mini:`Flags/1`.<sp/>:mini:`Flags/1`<sp/>and<sp/>:mini:`Flags/2`<sp/>must<sp/>have<sp/>the<sp/>same<sp/>flags<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>mode<sp/>:=<sp/>flags(&quot;Read&quot;,<sp/>&quot;Write&quot;,<sp/>&quot;Execute&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>mode(&quot;Read&quot;,<sp/>&quot;Write&quot;)<sp/>&lt;<sp/>mode(&quot;Read&quot;,<sp/>&quot;Write&quot;,<sp/>&quot;Execute&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>mode(&quot;Read&quot;,<sp/>&quot;Write&quot;,<sp/>&quot;Execute&quot;)<sp/>&lt;<sp/>mode(&quot;Read&quot;,<sp/>&quot;Write&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>A-&gt;Type);</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((A-&gt;Value<sp/>&amp;<sp/>B-&gt;Value)<sp/>==<sp/>A-&gt;Value)<sp/>{</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&lt;=&quot;</highlight><highlight class="normal">,<sp/>MLFlagsValueT,<sp/>MLFlagsValueT)<sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight><highlight class="comment">//&lt;Flags/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight><highlight class="comment">//&lt;Flags/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight><highlight class="comment">//&gt;flags::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>:mini:`Flags/2`<sp/>if<sp/>it<sp/>contains<sp/>all<sp/>of<sp/>:mini:`Flags/1`.<sp/>:mini:`Flags/1`<sp/>and<sp/>:mini:`Flags/2`<sp/>must<sp/>have<sp/>the<sp/>same<sp/>flags<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>mode<sp/>:=<sp/>flags(&quot;Read&quot;,<sp/>&quot;Write&quot;,<sp/>&quot;Execute&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>mode(&quot;Read&quot;,<sp/>&quot;Write&quot;)<sp/>&lt;=<sp/>mode(&quot;Read&quot;,<sp/>&quot;Write&quot;,<sp/>&quot;Execute&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>mode(&quot;Read&quot;,<sp/>&quot;Write&quot;,<sp/>&quot;Execute&quot;)<sp/>&lt;=<sp/>mode(&quot;Read&quot;,<sp/>&quot;Write&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>A-&gt;Type);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((A-&gt;Value<sp/>&amp;<sp/>B-&gt;Value)<sp/>==<sp/>A-&gt;Value)<sp/>{</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">,<sp/>MLFlagsValueT,<sp/>MLFlagsValueT)<sp/>{</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight><highlight class="comment">//&lt;Flags/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight><highlight class="comment">//&lt;Flags/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight><highlight class="comment">//&gt;flags::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>:mini:`Flags/2`<sp/>if<sp/>it<sp/>is<sp/>contained<sp/>in<sp/>:mini:`Flags/1`.<sp/>:mini:`Flags/1`<sp/>and<sp/>:mini:`Flags/2`<sp/>must<sp/>have<sp/>the<sp/>same<sp/>flags<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>mode<sp/>:=<sp/>flags(&quot;Read&quot;,<sp/>&quot;Write&quot;,<sp/>&quot;Execute&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>mode(&quot;Read&quot;,<sp/>&quot;Write&quot;)<sp/>&gt;<sp/>mode(&quot;Read&quot;,<sp/>&quot;Write&quot;,<sp/>&quot;Execute&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>mode(&quot;Read&quot;,<sp/>&quot;Write&quot;,<sp/>&quot;Execute&quot;)<sp/>&gt;<sp/>mode(&quot;Read&quot;,<sp/>&quot;Write&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>A-&gt;Type);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((A-&gt;Value<sp/>&amp;<sp/>B-&gt;Value)<sp/>==<sp/>B-&gt;Value)<sp/>{</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;&gt;=&quot;</highlight><highlight class="normal">,<sp/>MLFlagsValueT,<sp/>MLFlagsValueT)<sp/>{</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight><highlight class="comment">//&lt;Flags/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight><highlight class="comment">//&lt;Flags/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight><highlight class="comment">//&gt;flags::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>:mini:`Flags/2`<sp/>if<sp/>it<sp/>is<sp/>contained<sp/>in<sp/>:mini:`Flags/1`.<sp/>:mini:`Flags/1`<sp/>and<sp/>:mini:`Flags/2`<sp/>must<sp/>have<sp/>the<sp/>same<sp/>flags<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>let<sp/>mode<sp/>:=<sp/>flags(&quot;Read&quot;,<sp/>&quot;Write&quot;,<sp/>&quot;Execute&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>mode(&quot;Read&quot;,<sp/>&quot;Write&quot;)<sp/>&gt;=<sp/>mode(&quot;Read&quot;,<sp/>&quot;Write&quot;,<sp/>&quot;Execute&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>mode(&quot;Read&quot;,<sp/>&quot;Write&quot;,<sp/>&quot;Execute&quot;)<sp/>&gt;=<sp/>mode(&quot;Read&quot;,<sp/>&quot;Write&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>A-&gt;Type);</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((A-&gt;Value<sp/>&amp;<sp/>B-&gt;Value)<sp/>==<sp/>B-&gt;Value)<sp/>{</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>MLFlagsValueT,<sp/>MLFlagsValueT)<sp/>{</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight><highlight class="comment">//&lt;Flags/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight><highlight class="comment">//&lt;Flags/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight><highlight class="comment">//&gt;flags::spec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>A-&gt;Type);</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*B<sp/>=<sp/>(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__spec__t" kindref="compound">ml_flags_spec_t</ref><sp/>*Spec<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__flags__spec__t" kindref="compound">ml_flags_spec_t</ref>);</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>Spec-&gt;Type<sp/>=<sp/>MLFlagsSpecT;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>Spec-&gt;Flags<sp/>=<sp/>(<ref refid="structml__flags__t" kindref="compound">ml_flags_t</ref><sp/>*)A-&gt;Type;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/>Spec-&gt;Include<sp/>=<sp/>A-&gt;Value;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/>Spec-&gt;Exclude<sp/>=<sp/>B-&gt;Value;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Spec;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,<sp/>MLFlagsValueT)<sp/>{</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight><highlight class="comment">//&lt;Flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight><highlight class="comment">//&gt;flags::spec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*A<sp/>=<sp/>(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__spec__t" kindref="compound">ml_flags_spec_t</ref><sp/>*Spec<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__flags__spec__t" kindref="compound">ml_flags_spec_t</ref>);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/>Spec-&gt;Type<sp/>=<sp/>MLFlagsSpecT;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/>Spec-&gt;Flags<sp/>=<sp/>(<ref refid="structml__flags__t" kindref="compound">ml_flags_t</ref><sp/>*)A-&gt;Type;</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/>Spec-&gt;Include<sp/>=<sp/>A-&gt;Value;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/>Spec-&gt;Exclude<sp/>=<sp/>~A-&gt;Value;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Spec;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal">,<sp/>MLFlagsValueT,<sp/>MLFlagsSpecT)<sp/>{</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight><highlight class="comment">//&lt;Flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight><highlight class="comment">//&lt;Spec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__spec__t" kindref="compound">ml_flags_spec_t</ref><sp/>*Spec<sp/>=<sp/>(<ref refid="structml__flags__spec__t" kindref="compound">ml_flags_spec_t</ref><sp/>*)Args[1];</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(0,<sp/>((<ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*)Spec-&gt;Flags));</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*Flags<sp/>=<sp/>(<ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Flags-&gt;Value<sp/>&amp;<sp/>Spec-&gt;Include)<sp/>!=<sp/>Spec-&gt;Include)<sp/>{</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Flags-&gt;Value<sp/>&amp;<sp/>Spec-&gt;Exclude)<sp/>{</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Flags;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight></codeline>
<codeline lineno="1814" refid="structml__flags__value__list__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Values;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>Value;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal">}<sp/><ref refid="structml__flags__value__list__t" kindref="compound">ml_flags_value_list_t</ref>;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ml_flags_value_list(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Name,<sp/><ref refid="structml__flags__value__t" kindref="compound">ml_flags_value_t</ref><sp/>*Flags,<sp/><ref refid="structml__flags__value__list__t" kindref="compound">ml_flags_value_list_t</ref><sp/>*List)<sp/>{</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((List-&gt;Value<sp/>&amp;<sp/>Flags-&gt;Value)<sp/>==<sp/>Flags-&gt;Value)<sp/>ml_list_put(List-&gt;Values,<sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Flags);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal">ML_METHOD(MLListT,<sp/>MLFlagsValueT)<sp/>{</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__flags__value__list__t" kindref="compound">ml_flags_value_list_t</ref><sp/>List[1]<sp/>=<sp/>{{ml_list(),<sp/>ml_flags_value_value(Args[0])}};</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_foreach(Args[0]-&gt;Type-&gt;Exports,<sp/>&amp;List,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_flags_value_list);</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>List-&gt;Values;</highlight></codeline>
<codeline lineno="1828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_object_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals)<sp/>{</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_object_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(MLEnumT-&gt;Constructor,<sp/>MLEnumT,<sp/>ml_enum_string_fn,<sp/>MLStringT,<sp/>NULL);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(MLEnumT-&gt;Constructor,<sp/>MLEnumT,<sp/>ml_enum_names_fn,<sp/>MLNamesT,<sp/>NULL);</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(MLEnumCyclicT-&gt;Constructor,<sp/>MLEnumCyclicT,<sp/>ml_enum_string_fn,<sp/>MLStringT,<sp/>NULL);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_method_by_value(MLEnumCyclicT-&gt;Constructor,<sp/>MLEnumCyclicT,<sp/>ml_enum_names_fn,<sp/>MLNamesT,<sp/>NULL);</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLEnumT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;cyclic&quot;</highlight><highlight class="normal">,<sp/>MLEnumCyclicT);</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;property&quot;</highlight><highlight class="normal">,<sp/>MLPropertyT);</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;object&quot;</highlight><highlight class="normal">,<sp/>MLObjectT);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;class&quot;</highlight><highlight class="normal">,<sp/>MLClassT);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;enum&quot;</highlight><highlight class="normal">,<sp/>MLEnumT);</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_externals_default_add(</highlight><highlight class="stringliteral">&quot;flags&quot;</highlight><highlight class="normal">,<sp/>MLFlagsT);</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_type_add_rule(MLEnumRangeT,<sp/>MLSequenceT,<sp/>MLIntegerT,<sp/>ML_TYPE_ARG(1),<sp/>NULL);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Globals)<sp/>{</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;property&quot;</highlight><highlight class="normal">,<sp/>MLPropertyT);</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;object&quot;</highlight><highlight class="normal">,<sp/>MLObjectT);</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;class&quot;</highlight><highlight class="normal">,<sp/>MLClassT);</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;enum&quot;</highlight><highlight class="normal">,<sp/>MLEnumT);</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;flags&quot;</highlight><highlight class="normal">,<sp/>MLFlagsT);</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;const&quot;</highlight><highlight class="normal">,<sp/>ml_field_modifier(MLFieldT));</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;watched&quot;</highlight><highlight class="normal">,<sp/>MLFieldWatcher);</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1854"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_object.c"/>
  </compounddef>
</doxygen>
