<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="md_README" kind="page">
    <compoundname>md_README</compoundname>
    <title>Minilang is a small extensible scripting language for embedding in C/C++ applications</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="md_README_1autotoc_md0"/> Minilang is a simple language designed to be embedded into C/C++ applications with minimal fuss and maximum effect.</para>
<sect1 id="md_README_1autotoc_md1">
<title>Key Features</title><para>Minilang was designed from the ground up to be embedded into C/C++ applications. As a result, it has a rich API for embedding that support a wide range of use cases.</para>
<sect2 id="md_README_1autotoc_md2">
<title>Minimal Dependencies</title><para>Minilang only has one required dependency, the <ulink url="https://github.com/ivmai/bdwgc">Hans-Boehm conservative garbage collector</ulink>, which is commonly available in the standard repositories of most Linux distributions, in Homebrew on macOS and easily built from source.</para>
</sect2>
<sect2 id="md_README_1autotoc_md3">
<title>Code Safety</title><para>Minilang&apos;s VM is safe, there is no way to access raw memory to perform unsafe type-casting, indexing operations are bounds checked, arguments to internal functions are type-checked, etc. Minilang only provides core functionality by default, and does not provide file or network functions, module loading, or any other potentially unsafe functions.</para>
</sect2>
<sect2 id="md_README_1autotoc_md4">
<title>Extensible</title><para>Although Minilang&apos;s core functionality is intentionally restricted, functionality can be easily added by the host application, either globally or each time Minilang code is loaded. For example, there is no built-in <computeroutput>print()</computeroutput> function, one must be added by the host application. This extra step means that the <computeroutput>print()</computeroutput> function can write to a file or log instead if desired, or even send text across a websocket to display in a browser.</para>
</sect2>
<sect2 id="md_README_1autotoc_md5">
<title>Flexible Code Loading</title><para>The C API provides functions for incremental source code loading, allowing Minilang to be used for interactive sessions such as REPL shells and notebooks as well as loading complete Minilang code from files, databases, etc.</para>
</sect2>
<sect2 id="md_README_1autotoc_md6">
<title>Source Level Debugging</title><para>The C API also provides features for source level debugging of Minilang code. The host application can specify a debugger when running any function and the VM will invoke the debugger at breakpoints, errors, etc. The debugger API is flexible, debugging can be implementing in a console, desktop GUI or even across a network.</para>
</sect2>
<sect2 id="md_README_1autotoc_md7">
<title>Stackless Execution and One-Shot Continuations</title><para>Minilang uses a stackless VM for execution. Moreover, every function call passes the calling state to the called function, returns are implemented by resuming the calling state. This provides a number of additional features:</para>
<para><itemizedlist>
<listitem><para><bold>Inline Asynchronous Calls</bold> Any Minilang function call can be asynchronous without any change in the calling code.</para>
</listitem><listitem><para><bold>Parallel Asynchronous Calls</bold> Multiple asynchronous calls can also be launched in parallel, with the calling state resumed automatically when all the calls have completed. Minilang is thus suitable for scripting complex workflows in distributed applications.</para>
</listitem><listitem><para><bold>Preemptive Multitasking</bold> Minilang can optionally use a scheduler to swap the running VM state.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md_README_1autotoc_md8">
<title>Per-Context Settings</title><para>Every Minilang state has an associated context which is inherited by default from the calling state but can be explicitly set by the host application. The context stores local settings such as the current debugger, preemptive scheduler, etc. The host application can register additional context settings.</para>
</sect2>
<sect2 id="md_README_1autotoc_md9">
<title>Multi-tenant Support</title><para>Combining all of the above features, Minilang is ideal for multi-tenant distributed applications.</para>
</sect2>
</sect1>
<sect1 id="md_README_1autotoc_md10">
<title>History</title><para>Minilang was originally designed for <ulink url="https://github.com/wrapl/rabs">Rabs</ulink>, an imperative parallel build system. As result, it was designed with the following requirements:</para>
<para><itemizedlist>
<listitem><para><bold>Minimal dependencies:</bold> Minilang only has one required dependency, the <ulink url="https://github.com/ivmai/bdwgc">Hans-Boehm conservative garbage collector</ulink>, which is commonly available in the standard repositories of most Linux distributions, in Homebrew on macOS and easily built from source.</para>
</listitem><listitem><para><bold>Allow callbacks for identifier lookups:</bold> This allows build functions in Rabs to use dynamic (context aware) scoping.</para>
</listitem><listitem><para><bold>Easy to add functions in C:</bold> It is easy to add new functions to Minilang as required.</para>
</listitem><listitem><para><bold>Easy to store Minilang objects in C:</bold> References to build functions can be easily stored and called when required.</para>
</listitem><listitem><para><bold>Full support for closures:</bold> Closures (functions which capture their surrounding scope) make complex build functions simpler to write and store.</para>
</listitem><listitem><para><bold>Closures are hashable:</bold> Checksums can be computed for Minilang functions (using SHA256) in order to check if a target needs to be rebuilt.</para>
</listitem></itemizedlist>
</para>
<para>Additional features have been added since the original use in Rabs.</para>
<para><itemizedlist>
<listitem><para><bold>Configurable builds</bold> Minilang can be built with Rabs (as well as Make) enabling several optional features as desired.</para>
</listitem><listitem><para><bold>Module system</bold> Minilang files can be loaded as modules, with imports and exports.</para>
</listitem><listitem><para><bold>Gnome introspection suppport</bold> Minilang can be built with support for Gnome introspection, providing automatic bindings for a wide range of libraries including GUI, networking, etc.</para>
</listitem><listitem><para><bold>Continuation based implementation</bold> Function calls are implemented using one-short continuation based approach. This adds (optional) support for the following:<itemizedlist>
<listitem><para><bold>Asynchronous calls</bold></para>
</listitem><listitem><para><bold>Cooperative multitasking</bold></para>
</listitem><listitem><para><bold>Preemptive multitasking</bold></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_README_1autotoc_md11">
<title>Simple example</title><para><blockquote><para><zwj/>example1.c </para>
</blockquote><programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;minilang/minilang.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ml_value_t<sp/>*print(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/>ml_value_t<sp/>**Args)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ml_value_t<sp/>*StringMethod<sp/>=<sp/>ml_method(</highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_value_t<sp/>*Result<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result-&gt;Type<sp/>!=<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/>ml_simple_call(StringMethod,<sp/>1,<sp/>&amp;Result);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result-&gt;Type<sp/>==<sp/>MLErrorT)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Result-&gt;Type<sp/>!=<sp/>MLStringT)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;ResultError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;string<sp/>method<sp/>did<sp/>not<sp/>return<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(ml_string_value(Result),<sp/>1,<sp/>ml_string_length(Result),<sp/>stdout);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**Argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ml_init();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_t<sp/>*Globals<sp/>=<sp/>stringmap_new();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;print&quot;</highlight><highlight class="normal">,<sp/>ml_cfunction(NULL,<sp/>print));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ml_value_state_t<sp/>*State<sp/>=<sp/>ml_value_state_new(NULL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ml_load_file((ml_state_t<sp/>*)State,<sp/>(ml_getter_t)stringmap_search,<sp/>Globals,<sp/></highlight><highlight class="stringliteral">&quot;example1.mini&quot;</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Value-&gt;Type<sp/>==<sp/>MLErrorT)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_error_print(State-&gt;Value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ml_call((ml_state_t<sp/>*)State,<sp/>State-&gt;Value,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Value-&gt;Type<sp/>==<sp/>MLErrorT)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_error_print(State-&gt;Value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/>example1.mini </para>
</blockquote><programlisting filename=".lua"><codeline><highlight class="normal">for<sp/>X<sp/>in<sp/>1<sp/>..<sp/>10<sp/>do</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>print(&apos;{X}<sp/>&apos;)</highlight></codeline>
<codeline><highlight class="normal">end</highlight></codeline>
<codeline><highlight class="normal">print(&apos;done.\n&apos;)</highlight></codeline>
</programlisting></para>
<para><blockquote><para><zwj/>output </para>
</blockquote><programlisting filename=".sh"><codeline><highlight class="normal">$<sp/>gcc<sp/>-o<sp/>example1<sp/>example1.c<sp/>-lminilang<sp/>-lgc</highlight></codeline>
<codeline><highlight class="normal">$<sp/>./example1</highlight></codeline>
<codeline><highlight class="normal">1<sp/>2<sp/>3<sp/>4<sp/>5<sp/>6<sp/>7<sp/>8<sp/>9<sp/>10<sp/>done.</highlight></codeline>
<codeline><highlight class="normal">$</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_README_1autotoc_md12">
<title>Building</title><sect2 id="md_README_1autotoc_md13">
<title>Using make</title><para><programlisting filename=".console"><codeline><highlight class="normal">$<sp/>git<sp/>clone<sp/>https://github.com/wrapl/minilang</highlight></codeline>
<codeline><highlight class="normal">$<sp/>cd<sp/>minilang</highlight></codeline>
<codeline><highlight class="normal">$<sp/>make<sp/>-j4</highlight></codeline>
<codeline><highlight class="normal">$<sp/>make<sp/>install<sp/>PREFIX=/usr/local</highlight></codeline>
</programlisting></para>
<para>This will build and install a vanilla version of Minilang in <computeroutput>PREFIX</computeroutput>.</para>
</sect2>
<sect2 id="md_README_1autotoc_md14">
<title>Using Rabs</title><para><programlisting filename=".console"><codeline><highlight class="normal">$<sp/>git<sp/>clone<sp/>https://github.com/wrapl/minilang</highlight></codeline>
<codeline><highlight class="normal">$<sp/>cd<sp/>minilang</highlight></codeline>
<codeline><highlight class="normal">$<sp/>rabs<sp/>-p4<sp/>-DPREFIX=/usr/local<sp/>install</highlight></codeline>
</programlisting></para>
<para>This will build and install a vanilla version of Minilang in <computeroutput>PREFIX</computeroutput>.</para>
<para>Additional options can be enabled when building Minilang with Rabs. For example, to enable GTK+ support, pass <computeroutput>-DGTK</computeroutput> when building.</para>
<para><programlisting filename=".console"><codeline><highlight class="normal">$<sp/>rabs<sp/>-p4<sp/>-DPREFIX=/usr/local<sp/>-DGTK<sp/>install</highlight></codeline>
</programlisting></para>
<para>Currently the following optional features are available:</para>
<para><table rows="9" cols="2"><row>
<entry thead="yes"><para>Build Flags   </para>
</entry><entry thead="yes"><para>Description    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>-DMATH</computeroutput>   </para>
</entry><entry thead="no"><para>Adds additional maths functions, including multi-dimensional numeric arrays    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>-DGTK</computeroutput>   </para>
</entry><entry thead="no"><para>Adds Gnome introspection support    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>-DCBOR</computeroutput>   </para>
</entry><entry thead="no"><para>Adds support for serializing and deserializing Minilang values to/from CBOR    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>-DSCHEDULER</computeroutput>   </para>
</entry><entry thead="no"><para>Adds support for preemptive multitasking    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>-DMODULES</computeroutput>   </para>
</entry><entry thead="no"><para>Adds support for loading Minilang files as modules. Enables <computeroutput>-DSCHEDULER</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>-DASM</computeroutput>   </para>
</entry><entry thead="no"><para>Uses assembly code implementations for certain features on supported platforms    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>-DTABLES</computeroutput>   </para>
</entry><entry thead="no"><para>Adds a table type (similar to a dataframe, datatable, etc). Enables <computeroutput>-DMATH</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>-DQUEUES</computeroutput>   </para>
</entry><entry thead="no"><para>Adds a priority queue type   </para>
</entry></row>
</table>
</para>
</sect2>
</sect1>
<sect1 id="md_README_1autotoc_md15">
<title>Documentation</title><para>Full documentation can be found <ulink url="https://minilang.readthedocs.io">here</ulink>. </para>
</sect1>
    </detaileddescription>
    <location file="README.md"/>
  </compounddef>
</doxygen>
