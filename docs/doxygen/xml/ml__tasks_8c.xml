<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="ml__tasks_8c" kind="file" language="C++">
    <compoundname>ml_tasks.c</compoundname>
    <includes refid="ml__tasks_8h" local="yes">ml_tasks.h</includes>
    <includes refid="minilang_8h" local="yes">minilang.h</includes>
    <includes refid="ml__macros_8h" local="yes">ml_macros.h</includes>
    <includes local="yes">ml_tasks_init.c</includes>
    <incdepgraph>
      <node id="14">
        <label>inthash.h</label>
        <link refid="inthash_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>minilang.h</label>
        <link refid="minilang_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ml_compiler.h</label>
        <link refid="ml__compiler_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ml_macros.h</label>
        <link refid="ml__macros_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ml_runtime.h</label>
        <link refid="ml__runtime_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/ml_tasks.c</label>
        <link refid="ml__tasks_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ml_tasks.h</label>
        <link refid="ml__tasks_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ml_types.h</label>
        <link refid="ml__types_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stringmap.h</label>
        <link refid="stringmap_8h_source"/>
      </node>
      <node id="19">
        <label>gc/gc.h</label>
      </node>
      <node id="17">
        <label>limits.h</label>
      </node>
      <node id="16">
        <label>ml_config.h</label>
      </node>
      <node id="20">
        <label>ml_tasks_init.c</label>
      </node>
      <node id="8">
        <label>setjmp.h</label>
      </node>
      <node id="13">
        <label>stdarg.h</label>
      </node>
      <node id="15">
        <label>stdint.h</label>
      </node>
      <node id="11">
        <label>stdio.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="12">
        <label>string.h</label>
      </node>
      <node id="6">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structml__waiter__t" prot="public">ml_waiter_t</innerclass>
    <innerclass refid="structml__task__t" prot="public">ml_task_t</innerclass>
    <innerclass refid="structml__task__set__t" prot="public">ml_task_set_t</innerclass>
    <innerclass refid="structml__task__composed__t" prot="public">ml_task_composed_t</innerclass>
    <innerclass refid="structml__task__pending__t" prot="public">ml_task_pending_t</innerclass>
    <innerclass refid="structml__task__queue__t" prot="public">ml_task_queue_t</innerclass>
    <innerclass refid="structml__parallel__t" prot="public">ml_parallel_t</innerclass>
    <innerclass refid="structml__buffered__t" prot="public">ml_buffered_t</innerclass>
    <innerclass refid="structml__buffered__entry__t" prot="public">ml_buffered_entry_t</innerclass>
    <innerclass refid="structml__buffered__state__t" prot="public">ml_buffered_state_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ml__tasks_8c_1aebec330325aff5cbc7d9c9248e2cae4a" prot="public" static="no">
        <name>ML_CATEGORY</name>
        <initializer>&quot;tasks&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="6" column="10" bodyfile="src/ml_tasks.c" bodystart="6" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ml__tasks_8c_1a0ff5fcd5557b7a07897f8fe99abd202c" prot="public" static="no">
        <type>struct ml_waiter_t</type>
        <definition>typedef struct ml_waiter_t ml_waiter_t</definition>
        <argsstring></argsstring>
        <name>ml_waiter_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="8" column="26" bodyfile="src/ml_tasks.c" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__tasks_8c_1afbbbdc52d74188ef53bc6ae37bedf08d" prot="public" static="no">
        <type>struct ml_task_pending_t</type>
        <definition>typedef struct ml_task_pending_t ml_task_pending_t</definition>
        <argsstring></argsstring>
        <name>ml_task_pending_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="293" column="32" bodyfile="src/ml_tasks.c" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ml__tasks_8c_1ab4186b97095dc2ae3805e66cec7e969b" prot="public" static="no">
        <type>struct ml_parallel_iter_t</type>
        <definition>typedef struct ml_parallel_iter_t ml_parallel_iter_t</definition>
        <argsstring></argsstring>
        <name>ml_parallel_iter_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="370" column="33" bodyfile="src/ml_tasks.c" bodystart="370" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ml__tasks_8c_1a0ee17a9daacfe854b0e4255a902ec1d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_task_set</definition>
        <argsstring>(ml_task_t *Task, ml_value_t *Value)</argsstring>
        <name>ml_task_set</name>
        <param>
          <type><ref refid="structml__task__t" kindref="compound">ml_task_t</ref> *</type>
          <declname>Task</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="40" column="13" bodyfile="src/ml_tasks.c" bodystart="40" bodyend="49" declfile="src/ml_tasks.c" declline="21" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a1cf09d11f56d32183b0f8b465f54fa71" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_task_call</definition>
        <argsstring>(ml_state_t *Caller, ml_task_t *Task, int Count, ml_value_t **Args)</argsstring>
        <name>ml_task_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__task__t" kindref="compound">ml_task_t</ref> *</type>
          <declname>Task</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="23" column="13" bodyfile="src/ml_tasks.c" bodystart="23" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1ae0355f133fc31985c86f372b502a8a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLTaskT,(MLFunctionT), &quot;task&quot;,.call=(void *) ml_task_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLTaskT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;task&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_task_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="35" column="1" declfile="src/ml_tasks.c" declline="35" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1ad797c954f8c25da1e413bc3ce83e6697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLTaskT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLTaskT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="51" column="1" bodyfile="src/ml_tasks.c" bodystart="51" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a6ea57446f352d80e1584948b21134c91" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_task_run</definition>
        <argsstring>(ml_task_t *Task, ml_value_t *Result)</argsstring>
        <name>ml_task_run</name>
        <param>
          <type><ref refid="structml__task__t" kindref="compound">ml_task_t</ref> *</type>
          <declname>Task</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="59" column="13" bodyfile="src/ml_tasks.c" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1abb13116977d1b04536dd0ce80534fee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODVZ</definition>
        <argsstring>(MLTaskT, MLAnyT)</argsstring>
        <name>ML_METHODVZ</name>
        <param>
          <type>MLTaskT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="63" column="1" bodyfile="src/ml_tasks.c" bodystart="63" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a71f982a0dd5682f52718300c4dca1446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;wait&quot;, MLTaskT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;wait&quot;</type>
        </param>
        <param>
          <type>MLTaskT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="79" column="1" bodyfile="src/ml_tasks.c" bodystart="79" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a6565053b984c24aa473570be225e3115" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_task_all_run</definition>
        <argsstring>(ml_task_set_t *TaskSet, ml_value_t *Value)</argsstring>
        <name>ml_task_all_run</name>
        <param>
          <type><ref refid="structml__task__set__t" kindref="compound">ml_task_set_t</ref> *</type>
          <declname>TaskSet</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="129" column="13" bodyfile="src/ml_tasks.c" bodystart="129" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1ad3a3336232efaf21c2a671ada576aaa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLTaskSetT,(MLTaskT), &quot;task::set&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLTaskSetT</type>
        </param>
        <param>
          <type>(MLTaskT)</type>
        </param>
        <param>
          <type>&quot;task::set&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="139" column="1" declfile="src/ml_tasks.c" declline="139" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a41ae7c008b7cf8a7cac8eeacee88eb3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;*&quot;, MLTaskT, MLTaskT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;*&quot;</type>
        </param>
        <param>
          <type>MLTaskT</type>
        </param>
        <param>
          <type>MLTaskT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="142" column="1" bodyfile="src/ml_tasks.c" bodystart="142" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1ab9eaf7387b904864f33d65199711a63d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_task_any_run</definition>
        <argsstring>(ml_task_set_t *TaskSet, ml_value_t *Value)</argsstring>
        <name>ml_task_any_run</name>
        <param>
          <type><ref refid="structml__task__set__t" kindref="compound">ml_task_set_t</ref> *</type>
          <declname>TaskSet</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="161" column="13" bodyfile="src/ml_tasks.c" bodystart="161" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a0a6e209e2dcbd22edec08ad073c629da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;+&quot;, MLTaskT, MLTaskT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;+&quot;</type>
        </param>
        <param>
          <type>MLTaskT</type>
        </param>
        <param>
          <type>MLTaskT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="167" column="1" bodyfile="src/ml_tasks.c" bodystart="167" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a9fe719e8b496f49f0561ec2c28f657b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;done&quot;, MLTaskT, MLAnyT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;done&quot;</type>
        </param>
        <param>
          <type>MLTaskT</type>
        </param>
        <param>
          <type>MLAnyT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="186" column="1" bodyfile="src/ml_tasks.c" bodystart="186" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1ae88e2193e0d47e217f6af7dabbdca95f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;error&quot;, MLTaskT, MLStringT, MLStringT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;error&quot;</type>
        </param>
        <param>
          <type>MLTaskT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <param>
          <type>MLStringT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="197" column="1" bodyfile="src/ml_tasks.c" bodystart="197" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a94e2a4771cc476f04112a8998aa40f3b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_task_composed_run</definition>
        <argsstring>(ml_task_composed_t *Composed, ml_value_t *Value)</argsstring>
        <name>ml_task_composed_run</name>
        <param>
          <type><ref refid="structml__task__composed__t" kindref="compound">ml_task_composed_t</ref> *</type>
          <declname>Composed</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="215" column="13" bodyfile="src/ml_tasks.c" bodystart="215" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1ae6cc6564e110b6ead5800845547f095a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;then&quot;, MLFunctionT, MLFunctionT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;then&quot;</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="238" column="1" bodyfile="src/ml_tasks.c" bodystart="238" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a0fabcde69623b2e2fb092a9b6632dd2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;then&quot;, MLFunctionT, MLFunctionT, MLFunctionT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;then&quot;</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="252" column="1" bodyfile="src/ml_tasks.c" bodystart="252" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a2bfa686b2b70dba97cfd57cbff763b47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;else&quot;, MLFunctionT, MLFunctionT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;else&quot;</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="267" column="1" bodyfile="src/ml_tasks.c" bodystart="267" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a5466df47ba64c02af755fed07a77cd0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;on&quot;, MLFunctionT, MLFunctionT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;on&quot;</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <param>
          <type>MLFunctionT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="280" column="1" bodyfile="src/ml_tasks.c" bodystart="280" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1ad25bf8f336d70246842c47045ce49581" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_task_queue_call</definition>
        <argsstring>(ml_state_t *Caller, ml_task_queue_t *Queue, int Count, ml_value_t **Args)</argsstring>
        <name>ml_task_queue_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__task__queue__t" kindref="compound">ml_task_queue_t</ref> *</type>
          <declname>Queue</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Count</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> **</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="310" column="13" bodyfile="src/ml_tasks.c" bodystart="310" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1ae55ea175228bf741c07bf47dcfa1aa78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLTaskQueueT,(MLFunctionT), &quot;task::queue&quot;,.call=(void *) ml_task_queue_call)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLTaskQueueT</type>
        </param>
        <param>
          <type>(MLFunctionT)</type>
        </param>
        <param>
          <type>&quot;task::queue&quot;</type>
        </param>
        <param>
          <type>.</type>
          <declname>call</declname>
          <defval>(void *) ml_task_queue_call</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="333" column="1" declfile="src/ml_tasks.c" declline="333" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1ab65a403061a4ee3626eda7cd4105c0bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_task_queue_run</definition>
        <argsstring>(ml_task_queue_t *Queue, ml_value_t *Value)</argsstring>
        <name>ml_task_queue_run</name>
        <param>
          <type><ref refid="structml__task__queue__t" kindref="compound">ml_task_queue_t</ref> *</type>
          <declname>Queue</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="341" column="13" bodyfile="src/ml_tasks.c" bodystart="341" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a0cb36f192fdfe90f1b5fb905fb5be69b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(MLTaskQueueT, MLIntegerT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>MLTaskQueueT</type>
        </param>
        <param>
          <type>MLIntegerT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="351" column="1" bodyfile="src/ml_tasks.c" bodystart="351" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a294b311958e6a18436799beb841ecd87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHOD</definition>
        <argsstring>(&quot;cancel&quot;, MLTaskQueueT)</argsstring>
        <name>ML_METHOD</name>
        <param>
          <type>&quot;cancel&quot;</type>
        </param>
        <param>
          <type>MLTaskQueueT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="364" column="1" bodyfile="src/ml_tasks.c" bodystart="364" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a4770d0c40de98b82a534f2e6a10cbdc5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parallel_iter_next</definition>
        <argsstring>(ml_state_t *State, ml_value_t *Iter)</argsstring>
        <name>parallel_iter_next</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="382" column="13" bodyfile="src/ml_tasks.c" bodystart="382" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a025c2e203f53733c4f608aeee7790c1a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parallel_iter_key</definition>
        <argsstring>(ml_state_t *State, ml_value_t *Value)</argsstring>
        <name>parallel_iter_key</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="396" column="13" bodyfile="src/ml_tasks.c" bodystart="396" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1ac29798bcd62d59fec437eb99423c5a9f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parallel_iter_value</definition>
        <argsstring>(ml_state_t *State, ml_value_t *Value)</argsstring>
        <name>parallel_iter_value</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="403" column="13" bodyfile="src/ml_tasks.c" bodystart="403" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a238cf23c1bbef8944ce14170f6b5511e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parallel_continue</definition>
        <argsstring>(ml_parallel_t *Parallel, ml_value_t *Value)</argsstring>
        <name>parallel_continue</name>
        <param>
          <type><ref refid="structml__parallel__t" kindref="compound">ml_parallel_t</ref> *</type>
          <declname>Parallel</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="415" column="13" bodyfile="src/ml_tasks.c" bodystart="415" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a77874ab537a6987ebb6c4c0472ff9b51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTIONX</definition>
        <argsstring>(Parallel)</argsstring>
        <name>ML_FUNCTIONX</name>
        <param>
          <type>Parallel</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="430" column="1" bodyfile="src/ml_tasks.c" bodystart="430" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a5bf890f00457b4f76934f7de22d26955" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLBufferedT,(MLSequenceT), &quot;buffered&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLBufferedT</type>
        </param>
        <param>
          <type>(MLSequenceT)</type>
        </param>
        <param>
          <type>&quot;buffered&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="483" column="1" declfile="src/ml_tasks.c" declline="483" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a17850311a7ed80cf55fb6bcc78df2eec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_TYPE</definition>
        <argsstring>(MLBufferedStateT,(MLStateT), &quot;buffered-state&quot;)</argsstring>
        <name>ML_TYPE</name>
        <param>
          <type>MLBufferedStateT</type>
        </param>
        <param>
          <type>(MLStateT)</type>
        </param>
        <param>
          <type>&quot;buffered-state&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="499" column="1" declfile="src/ml_tasks.c" declline="499" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a8589d0d9a8bf9adf8c6353df81c84803" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_buffered_iterate</definition>
        <argsstring>(ml_buffered_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_buffered_iterate</name>
        <param>
          <type><ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>internal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="586" column="13" bodyfile="src/ml_tasks.c" bodystart="586" bodyend="600" declfile="src/ml_tasks.c" declline="502" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1ae4eb8e2c13bc6d3749ad1ffa32b7d975" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_buffered_call</definition>
        <argsstring>(ml_state_t *Caller, ml_buffered_state_t *State, ml_buffered_entry_t *Entry)</argsstring>
        <name>ml_buffered_call</name>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__buffered__entry__t" kindref="compound">ml_buffered_entry_t</ref> *</type>
          <declname>Entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="504" column="13" bodyfile="src/ml_tasks.c" bodystart="504" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a79ca6f578176899c67ce146d3d666420" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_next, MLBufferedStateT, ml_state_t *Caller, ml_buffered_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_next</type>
        </param>
        <param>
          <type>MLBufferedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="522" column="13" bodyfile="src/ml_tasks.c" bodystart="522" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a02be15695d54ec2a15b869f824c22713" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_key, MLBufferedStateT, ml_state_t *Caller, ml_buffered_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_key</type>
        </param>
        <param>
          <type>MLBufferedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="532" column="13" bodyfile="src/ml_tasks.c" bodystart="532" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1aba4b3340f0c6ce96ca53bce9ed1a158c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iter_value, MLBufferedStateT, ml_state_t *Caller, ml_buffered_state_t *State)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iter_value</type>
        </param>
        <param>
          <type>MLBufferedStateT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="536" column="13" bodyfile="src/ml_tasks.c" bodystart="536" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1ade0809efe744d89ed39e7d0fa0e81f3e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_buffered_entry_call</definition>
        <argsstring>(ml_buffered_entry_t *Entry, ml_value_t *Value)</argsstring>
        <name>ml_buffered_entry_call</name>
        <param>
          <type><ref refid="structml__buffered__entry__t" kindref="compound">ml_buffered_entry_t</ref> *</type>
          <declname>Entry</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="540" column="13" bodyfile="src/ml_tasks.c" bodystart="540" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a7d431149a1fa55cfe5b21be63e37275f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_buffered_value</definition>
        <argsstring>(ml_buffered_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_buffered_value</name>
        <param>
          <type><ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="550" column="13" bodyfile="src/ml_tasks.c" bodystart="550" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a35348355029a0ed3909573a1744e6dc1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ml_buffered_key</definition>
        <argsstring>(ml_buffered_state_t *State, ml_value_t *Value)</argsstring>
        <name>ml_buffered_key</name>
        <param>
          <type><ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref> *</type>
          <declname>State</declname>
        </param>
        <param>
          <type><ref refid="structml__value__t" kindref="compound">ml_value_t</ref> *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="573" column="13" bodyfile="src/ml_tasks.c" bodystart="573" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a1e298c8bf3dc08b99c5be5b4c5b0093a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ML_TYPED_FN</definition>
        <argsstring>(ml_iterate, MLBufferedT, ml_state_t *Caller, ml_buffered_t *Buffered)</argsstring>
        <name>ML_TYPED_FN</name>
        <param>
          <type>ml_iterate</type>
        </param>
        <param>
          <type>MLBufferedT</type>
        </param>
        <param>
          <type><ref refid="structml__state__t" kindref="compound">ml_state_t</ref> *</type>
          <declname>Caller</declname>
        </param>
        <param>
          <type><ref refid="structml__buffered__t" kindref="compound">ml_buffered_t</ref> *</type>
          <declname>Buffered</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="602" column="13" bodyfile="src/ml_tasks.c" bodystart="602" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1adcae56b8388f8dbd3e4e3f3199ef1fee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_FUNCTION</definition>
        <argsstring>(Buffered)</argsstring>
        <name>ML_FUNCTION</name>
        <param>
          <type>Buffered</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="619" column="1" bodyfile="src/ml_tasks.c" bodystart="619" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a9c2f3e0d646c2ec3d779c61ab3ea8f91" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static ML_METHOD_DECL</definition>
        <argsstring>(CountMethod, &quot;count&quot;)</argsstring>
        <name>ML_METHOD_DECL</name>
        <param>
          <type>CountMethod</type>
        </param>
        <param>
          <type>&quot;count&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="639" column="8" declfile="src/ml_tasks.c" declline="639" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1aa922b6eac4f27954909a3892ed6874e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ML_METHODX</definition>
        <argsstring>(&quot;count&quot;, MLBufferedT)</argsstring>
        <name>ML_METHODX</name>
        <param>
          <type>&quot;count&quot;</type>
        </param>
        <param>
          <type>MLBufferedT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>internal</para>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="641" column="1" bodyfile="src/ml_tasks.c" bodystart="641" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="ml__tasks_8c_1a0b92609e805d89b71b1a3bc053ccaf55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ml_tasks_init</definition>
        <argsstring>(stringmap_t *Globals)</argsstring>
        <name>ml_tasks_init</name>
        <param>
          <type><ref refid="structstringmap__t" kindref="compound">stringmap_t</ref> *</type>
          <declname>Globals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ml_tasks.c" line="648" column="6" bodyfile="src/ml_tasks.c" bodystart="648" bodyend="656"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ml_tasks.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;minilang.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_macros.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>ML_CATEGORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ML_CATEGORY<sp/>&quot;tasks&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__waiter__t" kindref="compound">ml_waiter_t</ref><sp/><ref refid="structml__waiter__t" kindref="compound">ml_waiter_t</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="structml__waiter__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__waiter__t" kindref="compound">ml_waiter_t</ref><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__waiter__t" kindref="compound">ml_waiter_t</ref><sp/>*Next;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="structml__task__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__waiter__t" kindref="compound">ml_waiter_t</ref><sp/>*Waiters;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}<sp/><ref refid="structml__task__t" kindref="compound">ml_task_t</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_task_set(<ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*Task,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_task_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*Task,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Task-&gt;Value)<sp/>ML_RETURN(Task-&gt;Value);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Task-&gt;Base.Caller)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Task-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__waiter__t" kindref="compound">ml_waiter_t</ref><sp/>*Waiter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__waiter__t" kindref="compound">ml_waiter_t</ref>);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Waiter-&gt;Next<sp/>=<sp/>Task-&gt;Waiters;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Waiter-&gt;State<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Task-&gt;Waiters<sp/>=<sp/>Waiter;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">ML_TYPE(MLTaskT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;task&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>task<sp/>representing<sp/>a<sp/>value<sp/>that<sp/>will<sp/>eventually<sp/>be<sp/>completed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_task_call</highlight></codeline>
<codeline lineno="38"><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_task_set(<ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*Task,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>Task-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>Task-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Caller)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structml__waiter__t" kindref="compound">ml_waiter_t</ref><sp/>*Waiter<sp/>=<sp/>Task-&gt;Waiters;<sp/>Waiter;<sp/>Waiter<sp/>=<sp/>Waiter-&gt;Next)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_state_schedule(Waiter-&gt;State,<sp/>Value);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_RETURN(Value);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">ML_METHOD(MLTaskT)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//&gt;task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>task.<sp/>The<sp/>task<sp/>should<sp/>eventually<sp/>be<sp/>completed<sp/>with<sp/>:mini:`Task:done()`<sp/>or<sp/>:mini:`Task:error()`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*Task<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__task__t" kindref="compound">ml_task_t</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>Task-&gt;Base.Type<sp/>=<sp/>MLTaskT;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Task;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_task_run(<ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*Task,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Result)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Task-&gt;Value)<sp/>ml_task_set(Task,<sp/>Result);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">ML_METHODVZ(MLTaskT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//&lt;Arg/1...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//&lt;Arg/n:any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn:function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//&gt;task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>task<sp/>which<sp/>calls<sp/>:mini:`Fn(Arg/1,<sp/>...,<sp/>Arg/n)`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Fn<sp/>=<sp/>ml_deref(Args[Count<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Fn,<sp/>MLFunctionT))<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>function<sp/>for<sp/>argument<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>Count);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*Task<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__task__t" kindref="compound">ml_task_t</ref>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>Task-&gt;Base.Type<sp/>=<sp/>MLTaskT;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>Task-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>Task-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_task_run;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_call(Task,<sp/>Fn,<sp/>Count<sp/>-<sp/>1,<sp/>Args);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Task);</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;wait&quot;</highlight><highlight class="normal">,<sp/>MLTaskT)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//&lt;Task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//&gt;any|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Waits<sp/>until<sp/>:mini:`Task`<sp/>is<sp/>completed<sp/>and<sp/>returns<sp/>its<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*Task<sp/>=<sp/>(<ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_task_call(Caller,<sp/>Task,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ML_GENERICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">ML_GENERIC_TYPE(MLTaskListT,<sp/>MLListT,<sp/>MLTaskT);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Remaining;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}<sp/>ml_task_list_t;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_task_list_run(ml_task_list_t<sp/>*TaskList,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!TaskList-&gt;Remaining)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TaskList-&gt;Remaining<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(TaskList-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--TaskList-&gt;Remaining<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(TaskList-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;wait&quot;</highlight><highlight class="normal">,<sp/>MLTaskListT)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//&lt;Tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//&gt;any|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Waits<sp/>until<sp/>all<sp/>the<sp/>tasks<sp/>in<sp/>:mini:`Tasks`<sp/>are<sp/>completed<sp/>or<sp/>any<sp/>task<sp/>returns<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_task_list_t<sp/>*TaskList<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(ml_task_list_t);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>TaskList-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>TaskList-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>TaskList-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_task_list_run;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>TaskList-&gt;Remaining<sp/>=<sp/>ml_list_length(Args[0]);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_LIST_FOREACH(Args[0],<sp/>Iter)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Iter-&gt;Value,<sp/>MLTaskT))<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>task<sp/>not<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ml_typeof(Iter-&gt;Value)-&gt;Name);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_task_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)TaskList,<sp/>(<ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*)Iter-&gt;Value,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="structml__task__set__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Remaining,<sp/>Count;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*Tasks[];</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}<sp/><ref refid="structml__task__set__t" kindref="compound">ml_task_set_t</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_task_all_run(<ref refid="structml__task__set__t" kindref="compound">ml_task_set_t</ref><sp/>*TaskSet,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!TaskSet-&gt;Remaining)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TaskSet-&gt;Remaining<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_task_set((<ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*)TaskSet,<sp/>Value);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--TaskSet-&gt;Remaining)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_task_set((<ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*)TaskSet,<sp/>Value);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">ML_TYPE(MLTaskSetT,<sp/>(MLTaskT),<sp/></highlight><highlight class="stringliteral">&quot;task::set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>task<sp/>combining<sp/>a<sp/>set<sp/>of<sp/>sub<sp/>tasks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">,<sp/>MLTaskT,<sp/>MLTaskT)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//&lt;Task/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//&lt;Task/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//&gt;task::set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>:mini:`task::set`<sp/>that<sp/>completes<sp/>when<sp/>all<sp/>of<sp/>its<sp/>sub<sp/>tasks<sp/>complete,<sp/>or<sp/>any<sp/>raises<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLTaskT);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__set__t" kindref="compound">ml_task_set_t</ref><sp/>*TaskSet<sp/>=<sp/>xnew(<ref refid="structml__task__set__t" kindref="compound">ml_task_set_t</ref>,<sp/>Count,<sp/><ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>TaskSet-&gt;Base.Base.Type<sp/>=<sp/>MLTaskSetT;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>TaskSet-&gt;Base.Base.run<sp/>=<sp/>(ml_state_fn)ml_task_all_run;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>TaskSet-&gt;Remaining<sp/>=<sp/>TaskSet-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*Task<sp/>=<sp/>(<ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*)Args[I];</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_task_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)TaskSet,<sp/>Task,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TaskSet-&gt;Tasks[I]<sp/>=<sp/>Task;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)TaskSet;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_task_any_run(<ref refid="structml__task__set__t" kindref="compound">ml_task_set_t</ref><sp/>*TaskSet,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!TaskSet-&gt;Remaining)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>TaskSet-&gt;Remaining<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_task_set((<ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*)TaskSet,<sp/>Value);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/>MLTaskT,<sp/>MLTaskT)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//&lt;Task/1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//&lt;Task/2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//&gt;task::set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>:mini:`task::set`<sp/>that<sp/>completes<sp/>when<sp/>any<sp/>of<sp/>its<sp/>sub<sp/>tasks<sp/>complete,<sp/>or<sp/>any<sp/>raises<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(1);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>ML_CHECK_ARG_TYPE(I,<sp/>MLTaskT);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__set__t" kindref="compound">ml_task_set_t</ref><sp/>*TaskSet<sp/>=<sp/>xnew(<ref refid="structml__task__set__t" kindref="compound">ml_task_set_t</ref>,<sp/>Count,<sp/><ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>TaskSet-&gt;Base.Base.Type<sp/>=<sp/>MLTaskSetT;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>TaskSet-&gt;Base.Base.run<sp/>=<sp/>(ml_state_fn)ml_task_any_run;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>TaskSet-&gt;Remaining<sp/>=<sp/>TaskSet-&gt;Count<sp/>=<sp/>Count;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*Task<sp/>=<sp/>(<ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*)Args[I];</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_task_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)TaskSet,<sp/>Task,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TaskSet-&gt;Tasks[I]<sp/>=<sp/>Task;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)TaskSet;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;done&quot;</highlight><highlight class="normal">,<sp/>MLTaskT,<sp/>MLAnyT)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//&lt;Task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//&lt;Result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//&gt;any|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Completes<sp/>:mini:`Task`<sp/>with<sp/>:mini:`Result`,<sp/>resuming<sp/>any<sp/>waiting<sp/>code.<sp/>Raises<sp/>an<sp/>error<sp/>if<sp/>:mini:`Task`<sp/>is<sp/>already<sp/>complete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*Task<sp/>=<sp/>(<ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Task-&gt;Value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TaskError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Task<sp/>value<sp/>already<sp/>set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_task_set(Task,<sp/>Args[1]);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Args[1];</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">,<sp/>MLTaskT,<sp/>MLStringT,<sp/>MLStringT)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//&lt;Task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//&lt;Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//&lt;Message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//&gt;any|error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Completes<sp/>:mini:`Task`<sp/>with<sp/>an<sp/>:mini:`error(Type,<sp/>Message)`,<sp/>resuming<sp/>any<sp/>waiting<sp/>code.<sp/>Raises<sp/>an<sp/>error<sp/>if<sp/>:mini:`Task`<sp/>is<sp/>already<sp/>complete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*Task<sp/>=<sp/>(<ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Task-&gt;Value)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;TaskError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Task<sp/>value<sp/>already<sp/>set&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_task_set(Task,<sp/>ml_error(ml_string_value(Args[1]),<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>ml_string_value(Args[2])));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MLNil;</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="structml__task__composed__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Then,<sp/>*Else,<sp/>*On;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[1];</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}<sp/><ref refid="structml__task__composed__t" kindref="compound">ml_task_composed_t</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_task_composed_run(<ref refid="structml__task__composed__t" kindref="compound">ml_task_composed_t</ref><sp/>*Composed,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Composed-&gt;On)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Composed-&gt;Args[0]<sp/>=<sp/>ml_error_unwrap(Value);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Composed-&gt;Base.Base.run<sp/>=<sp/>(ml_state_fn)ml_task_run;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Composed,<sp/>Composed-&gt;On,<sp/>1,<sp/>Composed-&gt;Args);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Composed-&gt;Else)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Composed-&gt;Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Composed-&gt;Base.Base.run<sp/>=<sp/>(ml_state_fn)ml_task_run;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Composed,<sp/>Composed-&gt;Else,<sp/>1,<sp/>Composed-&gt;Args);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Composed-&gt;Else)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Composed-&gt;Then)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Composed-&gt;Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Composed-&gt;Base.Base.run<sp/>=<sp/>(ml_state_fn)ml_task_run;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Composed,<sp/>Composed-&gt;Then,<sp/>1,<sp/>Composed-&gt;Args);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_task_set((<ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*)Composed,<sp/>Value);</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;then&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//&lt;Then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//&gt;task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Equivalent<sp/>to<sp/>:mini:`task(Fn,<sp/>call<sp/>-&gt;<sp/>Then)`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__composed__t" kindref="compound">ml_task_composed_t</ref><sp/>*Composed<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__task__composed__t" kindref="compound">ml_task_composed_t</ref>);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>Composed-&gt;Base.Base.Type<sp/>=<sp/>MLTaskT;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>Composed-&gt;Base.Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>Composed-&gt;Base.Base.run<sp/>=<sp/>(ml_state_fn)ml_task_composed_run;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>Composed-&gt;Then<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Composed,<sp/>Args[0],<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Composed);</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;then&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT,<sp/>MLFunctionT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//&lt;Then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//&lt;Else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//&gt;task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__composed__t" kindref="compound">ml_task_composed_t</ref><sp/>*Composed<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__task__composed__t" kindref="compound">ml_task_composed_t</ref>);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>Composed-&gt;Base.Base.Type<sp/>=<sp/>MLTaskT;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>Composed-&gt;Base.Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>Composed-&gt;Base.Base.run<sp/>=<sp/>(ml_state_fn)ml_task_composed_run;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>Composed-&gt;Then<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>Composed-&gt;Else<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Composed,<sp/>Args[0],<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Composed);</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;else&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//&lt;Else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//&gt;task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__composed__t" kindref="compound">ml_task_composed_t</ref><sp/>*Composed<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__task__composed__t" kindref="compound">ml_task_composed_t</ref>);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>Composed-&gt;Base.Base.Type<sp/>=<sp/>MLTaskT;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>Composed-&gt;Base.Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>Composed-&gt;Base.Base.run<sp/>=<sp/>(ml_state_fn)ml_task_composed_run;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>Composed-&gt;Else<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Composed,<sp/>Args[0],<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Composed);</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;on&quot;</highlight><highlight class="normal">,<sp/>MLFunctionT,<sp/>MLFunctionT)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//&lt;On</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//&gt;task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__composed__t" kindref="compound">ml_task_composed_t</ref><sp/>*Composed<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__task__composed__t" kindref="compound">ml_task_composed_t</ref>);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>Composed-&gt;Base.Base.Type<sp/>=<sp/>MLTaskT;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>Composed-&gt;Base.Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>Composed-&gt;Base.Base.run<sp/>=<sp/>(ml_state_fn)ml_task_composed_run;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>Composed-&gt;On<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Composed,<sp/>Args[0],<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Composed);</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__task__pending__t" kindref="compound">ml_task_pending_t</ref><sp/><ref refid="structml__task__pending__t" kindref="compound">ml_task_pending_t</ref>;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="structml__task__pending__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structml__task__pending__t" kindref="compound">ml_task_pending_t</ref><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__pending__t" kindref="compound">ml_task_pending_t</ref><sp/>*Next;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*Task;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Fn;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[];</highlight></codeline>
<codeline lineno="301"><highlight class="normal">};</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="structml__task__queue__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__pending__t" kindref="compound">ml_task_pending_t</ref><sp/>*Head,<sp/>*Tail;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumRunning,<sp/>MaxRunning;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumPending,<sp/>MaxPending;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}<sp/><ref refid="structml__task__queue__t" kindref="compound">ml_task_queue_t</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_task_queue_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__task__queue__t" kindref="compound">ml_task_queue_t</ref><sp/>*Queue,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Count,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Fn<sp/>=<sp/>ml_deref(Args[Count<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ml_is(Fn,<sp/>MLFunctionT))<sp/>ML_ERROR(</highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>function<sp/>for<sp/>argument<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>Count);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__t" kindref="compound">ml_task_t</ref><sp/>*Task<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__task__t" kindref="compound">ml_task_t</ref>);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>Task-&gt;Base.Type<sp/>=<sp/>MLTaskT;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>Task-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>Task-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_task_run;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_task_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Queue,<sp/>Task,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Queue-&gt;NumRunning<sp/>&lt;<sp/>Queue-&gt;MaxRunning)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Queue-&gt;NumRunning;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_call(Task,<sp/>Fn,<sp/>Count<sp/>-<sp/>1,<sp/>Args);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__task__pending__t" kindref="compound">ml_task_pending_t</ref><sp/>*Pending<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__task__pending__t" kindref="compound">ml_task_pending_t</ref>);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pending-&gt;Task<sp/>=<sp/>Task;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pending-&gt;Fn<sp/>=<sp/>Fn;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pending-&gt;Count<sp/>=<sp/>Count<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>1;<sp/>I<sp/>&lt;<sp/>Count;<sp/>++I)<sp/>Pending-&gt;Args[I<sp/>-<sp/>1]<sp/>=<sp/>Args[I];</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Queue-&gt;Tail)<sp/>Queue-&gt;Tail-&gt;Next<sp/>=<sp/>Pending;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>Queue-&gt;Head<sp/>=<sp/>Pending;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Queue-&gt;Tail<sp/>=<sp/>Pending;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(Task);</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal">ML_TYPE(MLTaskQueueT,<sp/>(MLFunctionT),<sp/></highlight><highlight class="stringliteral">&quot;task::queue&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>queue<sp/>of<sp/>tasks<sp/>that<sp/>can<sp/>run<sp/>a<sp/>limited<sp/>number<sp/>of<sp/>tasks<sp/>at<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>:mini:`fun<sp/>(Queue:<sp/>task::queue)(Arg/1,<sp/>...,<sp/>Arg/n,<sp/>Fn):<sp/>task`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Returns<sp/>a<sp/>new<sp/>task<sp/>that<sp/>calls<sp/>:mini:`Fn(Arg/1,<sp/>...,<sp/>Arg/n)`.<sp/>The<sp/>task<sp/>will<sp/>be<sp/>delayed<sp/>if<sp/>:mini:`Queue`<sp/>has<sp/>reached<sp/>its<sp/>limit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>.call<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_task_queue_call</highlight></codeline>
<codeline lineno="339"><highlight class="normal">);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_task_queue_run(<ref refid="structml__task__queue__t" kindref="compound">ml_task_queue_t</ref><sp/>*Queue,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__pending__t" kindref="compound">ml_task_pending_t</ref><sp/>*Pending<sp/>=<sp/>Queue-&gt;Head;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Pending)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(Queue-&gt;Head<sp/>=<sp/>Pending-&gt;Next))<sp/>Queue-&gt;Tail<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_call(Pending-&gt;Task,<sp/>Pending-&gt;Fn,<sp/>Pending-&gt;Count,<sp/>Pending-&gt;Args);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--Queue-&gt;NumRunning;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal">ML_METHOD(MLTaskQueueT,<sp/>MLIntegerT)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">//@task::queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">//&lt;MaxRunning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">//&gt;task::queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>new<sp/>task<sp/>queue<sp/>which<sp/>runs<sp/>at<sp/>most<sp/>:mini:`MaxRunning`<sp/>tasks<sp/>at<sp/>a<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__queue__t" kindref="compound">ml_task_queue_t</ref><sp/>*Queue<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__task__queue__t" kindref="compound">ml_task_queue_t</ref>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.Type<sp/>=<sp/>MLTaskQueueT;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_task_queue_run;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;MaxRunning<sp/>=<sp/>ml_integer_value(Args[0]);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;NumRunning<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Queue;</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal">ML_METHOD(</highlight><highlight class="stringliteral">&quot;cancel&quot;</highlight><highlight class="normal">,<sp/>MLTaskQueueT)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__task__queue__t" kindref="compound">ml_task_queue_t</ref><sp/>*Queue<sp/>=<sp/>(<ref refid="structml__task__queue__t" kindref="compound">ml_task_queue_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>Queue-&gt;Head<sp/>=<sp/>Queue-&gt;Tail<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Queue;</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ml_parallel_iter_t<sp/>ml_parallel_iter_t;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372" refid="structml__parallel__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>NextState[1];</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>KeyState[1];</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>ValueState[1];</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter,<sp/>*Fn,<sp/>*Error;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Args[2];</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NumRunning,<sp/>MaxRunning,<sp/>Burst;</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}<sp/><ref refid="structml__parallel__t" kindref="compound">ml_parallel_t</ref>;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parallel_iter_next(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parallel__t" kindref="compound">ml_parallel_t</ref><sp/>*Parallel<sp/>=<sp/>(<ref refid="structml__parallel__t" kindref="compound">ml_parallel_t</ref><sp/>*)((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)State<sp/>-<sp/>offsetof(<ref refid="structml__parallel__t" kindref="compound">ml_parallel_t</ref>,<sp/>NextState));</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parallel-&gt;Error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Iter<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parallel-&gt;Iter<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(Parallel,<sp/>MLNil);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Iter))<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parallel-&gt;Error<sp/>=<sp/>Iter;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(Parallel-&gt;Base.Caller,<sp/>Iter);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_key(Parallel-&gt;KeyState,<sp/>Parallel-&gt;Iter<sp/>=<sp/>Iter);</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parallel_iter_key(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parallel__t" kindref="compound">ml_parallel_t</ref><sp/>*Parallel<sp/>=<sp/>(<ref refid="structml__parallel__t" kindref="compound">ml_parallel_t</ref><sp/>*)((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)State<sp/>-<sp/>offsetof(<ref refid="structml__parallel__t" kindref="compound">ml_parallel_t</ref>,<sp/>KeyState));</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parallel-&gt;Error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>Parallel-&gt;Args[0]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_value(Parallel-&gt;ValueState,<sp/>Parallel-&gt;Iter);</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parallel_iter_value(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parallel__t" kindref="compound">ml_parallel_t</ref><sp/>*Parallel<sp/>=<sp/>(<ref refid="structml__parallel__t" kindref="compound">ml_parallel_t</ref><sp/>*)((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)State<sp/>-<sp/>offsetof(<ref refid="structml__parallel__t" kindref="compound">ml_parallel_t</ref>,<sp/>ValueState));</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parallel-&gt;Error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>Parallel-&gt;Args[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>ml_call(Parallel,<sp/>Parallel-&gt;Fn,<sp/>2,<sp/>Parallel-&gt;Args);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parallel-&gt;Iter)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parallel-&gt;NumRunning<sp/>&gt;<sp/>Parallel-&gt;MaxRunning)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Parallel-&gt;NumRunning;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next(Parallel-&gt;NextState,<sp/>Parallel-&gt;Iter);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parallel_continue(<ref refid="structml__parallel__t" kindref="compound">ml_parallel_t</ref><sp/>*Parallel,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parallel-&gt;Error)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parallel-&gt;Error<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(Parallel-&gt;Base.Caller,<sp/>Value);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>--Parallel-&gt;NumRunning;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parallel-&gt;Iter)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parallel-&gt;NumRunning<sp/>&gt;<sp/>Parallel-&gt;Burst)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++Parallel-&gt;NumRunning;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iter_next(Parallel-&gt;NextState,<sp/>Parallel-&gt;Iter);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Parallel-&gt;NumRunning<sp/>==<sp/>0)<sp/>ML_CONTINUE(Parallel-&gt;Base.Caller,<sp/>MLNil);</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal">ML_FUNCTIONX(Parallel)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">//&lt;Max?:integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">//&lt;Min?:integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn:function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//&gt;nil<sp/>|<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Iterates<sp/>through<sp/>:mini:`Sequence`<sp/>and<sp/>calls<sp/>:mini:`Fn(Key,<sp/>Value)`<sp/>for<sp/>each<sp/>:mini:`Key,<sp/>Value`<sp/>pair<sp/>produced<sp/>**without**<sp/>waiting<sp/>for<sp/>the<sp/>call<sp/>to<sp/>return.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>call<sp/>to<sp/>:mini:`parallel`<sp/>returns<sp/>when<sp/>all<sp/>calls<sp/>to<sp/>:mini:`Fn`<sp/>return,<sp/>or<sp/>an<sp/>error<sp/>occurs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>:mini:`Max`<sp/>is<sp/>given,<sp/>at<sp/>most<sp/>:mini:`Max`<sp/>calls<sp/>to<sp/>:mini:`Fn`<sp/>will<sp/>run<sp/>at<sp/>a<sp/>time<sp/>by<sp/>pausing<sp/>iteration<sp/>through<sp/>:mini:`Sequence`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>:mini:`Min`<sp/>is<sp/>also<sp/>given<sp/>then<sp/>iteration<sp/>will<sp/>be<sp/>resumed<sp/>only<sp/>when<sp/>the<sp/>number<sp/>of<sp/>calls<sp/>to<sp/>:mini:`Fn`<sp/>drops<sp/>to<sp/>:mini:`Min`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_COUNT(2);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__parallel__t" kindref="compound">ml_parallel_t</ref><sp/>*Parallel<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__parallel__t" kindref="compound">ml_parallel_t</ref>);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>Parallel-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>Parallel-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)parallel_continue;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>Parallel-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>Parallel-&gt;NumRunning<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>Parallel-&gt;NextState-&gt;run<sp/>=<sp/>parallel_iter_next;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>Parallel-&gt;NextState-&gt;Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>Parallel-&gt;KeyState-&gt;run<sp/>=<sp/>parallel_iter_key;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>Parallel-&gt;KeyState-&gt;Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>Parallel-&gt;ValueState-&gt;run<sp/>=<sp/>parallel_iter_value;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>Parallel-&gt;ValueState-&gt;Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(1,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(2,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(3,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parallel-&gt;MaxRunning<sp/>=<sp/>ml_integer_value_fast(Args[2]);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parallel-&gt;Burst<sp/>=<sp/>ml_integer_value_fast(Args[1])<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parallel-&gt;Fn<sp/>=<sp/>Args[3];</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Count<sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(1,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(2,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parallel-&gt;MaxRunning<sp/>=<sp/>ml_integer_value_fast(Args[1]);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parallel-&gt;Burst<sp/>=<sp/>SIZE_MAX;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parallel-&gt;Fn<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CHECKX_ARG_TYPE(1,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parallel-&gt;MaxRunning<sp/>=<sp/>SIZE_MAX;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parallel-&gt;Burst<sp/>=<sp/>SIZE_MAX;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parallel-&gt;Fn<sp/>=<sp/>Args[1];</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate(Parallel-&gt;NextState,<sp/>Args[0]);</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477" refid="structml__buffered__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__type__t" kindref="compound">ml_type_t</ref><sp/>*Type;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter,<sp/>*Fn;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size;</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}<sp/><ref refid="structml__buffered__t" kindref="compound">ml_buffered_t</ref>;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">ML_TYPE(MLBufferedT,<sp/>(MLSequenceT),<sp/></highlight><highlight class="stringliteral">&quot;buffered&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486" refid="structml__buffered__entry__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key,<sp/>*Value;</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}<sp/><ref refid="structml__buffered__entry__t" kindref="compound">ml_buffered_entry_t</ref>;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491" refid="structml__buffered__state__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>Base;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Iter,<sp/>*Fn;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Key,<sp/>*Value;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size,<sp/>Use,<sp/>Fetch,<sp/>Ready;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__buffered__entry__t" kindref="compound">ml_buffered_entry_t</ref><sp/>Entries[];</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}<sp/><ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref>;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal">ML_TYPE(MLBufferedStateT,<sp/>(MLStateT),<sp/></highlight><highlight class="stringliteral">&quot;buffered-state&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_buffered_iterate(<ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_buffered_call(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref><sp/>*State,<sp/><ref refid="structml__buffered__entry__t" kindref="compound">ml_buffered_entry_t</ref><sp/>*Entry)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Entry-&gt;Key)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(Caller,<sp/>Entry-&gt;Value);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Key<sp/>=<sp/>Entry-&gt;Key;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Value<sp/>=<sp/>Entry-&gt;Value;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entry-&gt;Key<sp/>=<sp/>Entry-&gt;Value<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++State-&gt;Use;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Ready)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Ready<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_buffered_iterate;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ML_CONTINUE(Caller,<sp/>State);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_next,<sp/>MLBufferedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__buffered__entry__t" kindref="compound">ml_buffered_entry_t</ref><sp/>*Entry<sp/>=<sp/>State-&gt;Entries<sp/>+<sp/>(State-&gt;Use<sp/>%<sp/>State-&gt;Size);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Entry-&gt;Value)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_buffered_call(Caller,<sp/>State,<sp/>Entry);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_key,<sp/>MLBufferedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State-&gt;Key);</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iter_value,<sp/>MLBufferedStateT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref><sp/>*State)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_RETURN(State-&gt;Value);</highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_buffered_entry_call(<ref refid="structml__buffered__entry__t" kindref="compound">ml_buffered_entry_t</ref><sp/>*Entry,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref><sp/>*State<sp/>=<sp/>(<ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref><sp/>*)Entry-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index<sp/>=<sp/>Entry<sp/>-<sp/>State-&gt;Entries;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>Entry-&gt;Value<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller<sp/>=<sp/>State-&gt;Base.Caller;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Caller<sp/>&amp;&amp;<sp/>(Index<sp/>==<sp/>(State-&gt;Use<sp/>%<sp/>State-&gt;Size)))<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_buffered_call(Caller,<sp/>State,<sp/>Entry);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_buffered_value(<ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__buffered__entry__t" kindref="compound">ml_buffered_entry_t</ref><sp/>*Entry<sp/>=<sp/>&amp;State-&gt;Entries[State-&gt;Fetch<sp/>%<sp/>State-&gt;Size];</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++State-&gt;Fetch;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entry-&gt;Key<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_buffered_entry_call(Entry,<sp/>Value);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Ready<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++State-&gt;Fetch;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>**Args<sp/>=<sp/>ml_alloc_args(2);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>Entry-&gt;Key;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args[1]<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_call((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)Entry,<sp/>State-&gt;Fn,<sp/>2,<sp/>Args);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Fetch<sp/>-<sp/>State-&gt;Use<sp/>&lt;<sp/>State-&gt;Size)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(State-&gt;Ready)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Ready<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_buffered_iterate;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_iter_next((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_buffered_key(<ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__buffered__entry__t" kindref="compound">ml_buffered_entry_t</ref><sp/>*Entry<sp/>=<sp/>&amp;State-&gt;Entries[State-&gt;Fetch<sp/>%<sp/>State-&gt;Size];</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++State-&gt;Fetch;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entry-&gt;Key<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_buffered_entry_call(Entry,<sp/>Value);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entry-&gt;Key<sp/>=<sp/>Value;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_buffered_value;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_iter_value((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_buffered_iterate(<ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref><sp/>*State,<sp/><ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*Value)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__buffered__entry__t" kindref="compound">ml_buffered_entry_t</ref><sp/>*Entry<sp/>=<sp/>&amp;State-&gt;Entries[State-&gt;Fetch<sp/>%<sp/>State-&gt;Size];</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ml_is_error(Value))<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++State-&gt;Fetch;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entry-&gt;Key<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_buffered_entry_call(Entry,<sp/>Value);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Value<sp/>==<sp/>MLNil)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++State-&gt;Fetch;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Entry-&gt;Key<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_buffered_entry_call(Entry,<sp/>Value);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(ml_state_fn)ml_buffered_key;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml_iter_key((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>State-&gt;Iter<sp/>=<sp/>Value);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ML_TYPED_FN(ml_iterate,<sp/>MLBufferedT,<sp/><ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*Caller,<sp/><ref refid="structml__buffered__t" kindref="compound">ml_buffered_t</ref><sp/>*Buffered)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref><sp/>*State<sp/>=<sp/>xnew(<ref refid="structml__buffered__state__t" kindref="compound">ml_buffered_state_t</ref>,<sp/>Buffered-&gt;Size,<sp/><ref refid="structml__buffered__entry__t" kindref="compound">ml_buffered_entry_t</ref>);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Type<sp/>=<sp/>MLBufferedStateT;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.run<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)ml_buffered_iterate;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Caller<sp/>=<sp/>Caller;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Fn<sp/>=<sp/>Buffered-&gt;Fn;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Size<sp/>=<sp/>Buffered-&gt;Size;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>State-&gt;Use<sp/>=<sp/>State-&gt;Fetch<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>0;<sp/>I<sp/>&lt;<sp/>State-&gt;Size;<sp/>++I)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Entries[I].Base.Caller<sp/>=<sp/>(<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Entries[I].Base.Context<sp/>=<sp/>Caller-&gt;Context;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State-&gt;Entries[I].Base.run<sp/>=<sp/>(ml_state_fn)ml_buffered_entry_call;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_iterate((<ref refid="structml__state__t" kindref="compound">ml_state_t</ref><sp/>*)State,<sp/>Buffered-&gt;Iter);</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal">ML_FUNCTION(Buffered)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="comment">//&lt;Sequence:sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="comment">//&lt;Size:integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">//&lt;Fn:function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment">//&gt;sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>sequence<sp/>:mini:`(K/i,<sp/>Fn(K/i,<sp/>V/i))`<sp/>where<sp/>:mini:`K/i,<sp/>V/i`<sp/>are<sp/>the<sp/>keys<sp/>and<sp/>values<sp/>produced<sp/>by<sp/>:mini:`Sequence`.<sp/>The<sp/>calls<sp/>to<sp/>:mini:`Fn`<sp/>are<sp/>done<sp/>in<sp/>parallel,<sp/>with<sp/>at<sp/>most<sp/>:mini:`Size`<sp/>calls<sp/>at<sp/>a<sp/>time.<sp/>The<sp/>original<sp/>sequence<sp/>order<sp/>is<sp/>preserved<sp/>(using<sp/>an<sp/>internal<sp/>buffer).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment">//$=<sp/>list(buffered(1<sp/>..<sp/>10,<sp/>5,<sp/>tuple))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_COUNT(3);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(1,<sp/>MLIntegerT);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>ML_CHECK_ARG_TYPE(2,<sp/>MLFunctionT);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Size<sp/>=<sp/>ml_integer_value(Args[1]);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Size<sp/>&lt;=<sp/>0<sp/>||<sp/>Size<sp/>&gt;<sp/>1024)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_error(</highlight><highlight class="stringliteral">&quot;RangeError&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Buffered<sp/>size<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__buffered__t" kindref="compound">ml_buffered_t</ref><sp/>*Buffered<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<ref refid="structml__buffered__t" kindref="compound">ml_buffered_t</ref>);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffered-&gt;Type<sp/>=<sp/>MLBufferedT;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffered-&gt;Size<sp/>=<sp/>Size;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffered-&gt;Iter<sp/>=<sp/>Args[0];</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>Buffered-&gt;Fn<sp/>=<sp/>Args[2];</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structml__value__t" kindref="compound">ml_value_t</ref><sp/>*)Buffered;</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ML_METHOD_DECL(CountMethod,<sp/></highlight><highlight class="stringliteral">&quot;count&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal">ML_METHODX(</highlight><highlight class="stringliteral">&quot;count&quot;</highlight><highlight class="normal">,<sp/>MLBufferedT)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structml__buffered__t" kindref="compound">ml_buffered_t</ref><sp/>*Buffered<sp/>=<sp/>(<ref refid="structml__buffered__t" kindref="compound">ml_buffered_t</ref><sp/>*)Args[0];</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>Args[0]<sp/>=<sp/>Buffered-&gt;Iter;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ml_call(Caller,<sp/>CountMethod,<sp/>1,<sp/>Args);</highlight></codeline>
<codeline lineno="646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ml_tasks_init(<ref refid="structstringmap__t" kindref="compound">stringmap_t</ref><sp/>*Globals)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ml_tasks_init.c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>stringmap_insert(MLTaskT-&gt;Exports,<sp/></highlight><highlight class="stringliteral">&quot;queue&quot;</highlight><highlight class="normal">,<sp/>MLTaskQueueT);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Globals)<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;task&quot;</highlight><highlight class="normal">,<sp/>MLTaskT);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;parallel&quot;</highlight><highlight class="normal">,<sp/>Parallel);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringmap_insert(Globals,<sp/></highlight><highlight class="stringliteral">&quot;buffered&quot;</highlight><highlight class="normal">,<sp/>Buffered);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/ml_tasks.c"/>
  </compounddef>
</doxygen>
