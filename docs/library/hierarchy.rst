
hierarchy
=========

.. graphviz::

   digraph hierarchy {
      rankdir="LR";
      fontsize="40pt"
      concentrate=true;
      overlap=false;
      packMode="node";
      outputorder="edgesfirst";
      node [shape=box,fontsize=24];
      "any":e -> "sequence":w;
      "any":e -> "function":w;
      "function":e -> "type":w;
      "function":e -> "copy":w;
      "function":e -> "function::partial":w;
      "sequence":e -> "function::partial":w;
      "function":e -> "tuple":w;
      "sequence":e -> "tuple":w;
      "any":e -> "boolean":w;
      "any":e -> "module":w;
      "any":e -> "external":w;
      "any":e -> "external::set":w;
      "function":e -> "symbol":w;
      "any":e -> "symbol::range":w;
      "any":e -> "xml":w;
      "xml":e -> "xml::text":w;
      "string":e -> "xml::text":w;
      "xml":e -> "xml::element":w;
      "sequence":e -> "xml::element":w;
      "function":e -> "xml::filter":w;
      "stream":e -> "xml::decoder":w;
      "sequence":e -> "xe::node":w;
      "any":e -> "xe::var":w;
      "any":e -> "uuid":w;
      "any":e -> "time":w;
      "enum":e -> "time::day":w;
      "enum":e -> "time::month":w;
      "any":e -> "time::zone":w;
      "any":e -> "time::zoned":w;
      "any":e -> "thread":w;
      "any":e -> "thread::channel":w;
      "any":e -> "thread::mutex":w;
      "any":e -> "thread::protected":w;
      "any":e -> "thread::condition":w;
      "function":e -> "task":w;
      "function":e -> "tasks":w;
      "sequence":e -> "table":w;
      "sequence":e -> "table::row":w;
      "any":e -> "address":w;
      "address":e -> "buffer":w;
      "address":e -> "string":w;
      "sequence":e -> "string":w;
      "enum":e -> "string::norm":w;
      "enum":e -> "string::ctype":w;
      "any":e -> "regex":w;
      "stream":e -> "string::buffer":w;
      "any":e -> "stream":w;
      "stream":e -> "stream::buffered":w;
      "stream":e -> "stream::fd":w;
      "sequence":e -> "set":w;
      "enum":e -> "set::order":w;
      "function":e -> "chained":w;
      "sequence":e -> "chained":w;
      "function":e -> "context":w;
      "function":e -> "state":w;
      "state":e -> "resumable::state":w;
      "any":e -> "uninitialized":w;
      "any":e -> "error":w;
      "any":e -> "error::value":w;
      "any":e -> "debugger":w;
      "any":e -> "semaphore":w;
      "any":e -> "condition":w;
      "any":e -> "rwlock":w;
      "any":e -> "channel":w;
      "any":e -> "pqueue::entry":w;
      "sequence":e -> "pqueue":w;
      "function":e -> "polynomial":w;
      "any":e -> "polynomial::rational":w;
      "any":e -> "object":w;
      "type":e -> "class":w;
      "any":e -> "property":w;
      "integer":e -> "enum::value":w;
      "type":e -> "enum":w;
      "sequence":e -> "enum":w;
      "sequence":e -> "enum::range":w;
      "type":e -> "flags":w;
      "integer":e -> "flags::value":w;
      "any":e -> "number":w;
      "number":e -> "complex":w;
      "complex":e -> "real":w;
      "real":e -> "integer":w;
      "function":e -> "integer":w;
      "real":e -> "double":w;
      "sequence":e -> "integer::range":w;
      "sequence":e -> "real::range":w;
      "any":e -> "method::context":w;
      "function":e -> "method":w;
      "sequence":e -> "map":w;
      "enum":e -> "map::order":w;
      "any":e -> "map::node":w;
      "sequence":e -> "list":w;
      "any":e -> "list::node":w;
      "any":e -> "list::slice":w;
      "any":e -> "module::dir":w;
      "stream":e -> "json::decoder":w;
      "sequence":e -> "gir":w;
      "type":e -> "gir::baseinfo":w;
      "any":e -> "gir::module":w;
      "gir::baseinfo":e -> "gir::object":w;
      "any":e -> "gir::objectinstance":w;
      "gir::baseinfo":e -> "gir::struct":w;
      "any":e -> "gir::structinstance":w;
      "gir::baseinfo":e -> "gir::union":w;
      "any":e -> "gir::unioninstance":w;
      "any":e -> "gir::fieldref":w;
      "gir::fieldref":e -> "gir::fieldref-boolean":w;
      "gir::fieldref":e -> "gir::fieldref-int8":w;
      "gir::fieldref":e -> "gir::fieldref-uint8":w;
      "gir::fieldref":e -> "gir::fieldref-int16":w;
      "gir::fieldref":e -> "gir::fieldref-uint16":w;
      "gir::fieldref":e -> "gir::fieldref-int32":w;
      "gir::fieldref":e -> "gir::fieldref-uint32":w;
      "gir::fieldref":e -> "gir::fieldref-int64":w;
      "gir::fieldref":e -> "gir::fieldref-uint64":w;
      "gir::fieldref":e -> "gir::fieldref-float":w;
      "gir::fieldref":e -> "gir::fieldref-double":w;
      "gir::fieldref":e -> "gir::fieldref-utf8":w;
      "gir::baseinfo":e -> "gir::enum":w;
      "any":e -> "gir::enumvalue":w;
      "any":e -> "gir::objectproperty":w;
      "stream":e -> "file":w;
      "sequence":e -> "dir":w;
      "file":e -> "popen":w;
      "flags":e -> "declflags":w;
      "enum":e -> "paramkind":w;
      "state":e -> "compiler::function":w;
      "any":e -> "expr":w;
      "any":e -> "macro":w;
      "any":e -> "block::builder":w;
      "any":e -> "expr::builder":w;
      "state":e -> "compiler":w;
      "any":e -> "parser":w;
      "any":e -> "global":w;
      "any":e -> "variable":w;
      "state":e -> "continuation":w;
      "sequence":e -> "continuation":w;
      "function":e -> "closure":w;
      "sequence":e -> "closure":w;
      "any":e -> "closure::info":w;
      "buffer":e -> "array":w;
      "sequence":e -> "array":w;
      "array":e -> "vector":w;
      "array":e -> "matrix":w;
      "array":e -> "array::complex":w;
      "array::complex":e -> "vector::complex":w;
      "vector":e -> "vector::complex":w;
      "array::complex":e -> "matrix::complex":w;
      "matrix":e -> "matrix::complex":w;
      "array::complex":e -> "array::real":w;
      "array":e -> "array::real":w;
      "array::real":e -> "array::integer":w;
      "array::real":e -> "vector::real":w;
      "vector":e -> "vector::real":w;
      "vector::real":e -> "vector::integer":w;
      "array::real":e -> "matrix::real":w;
      "matrix":e -> "matrix::real":w;
      "matrix::real":e -> "matrix::integer":w;
      "array::integer":e -> "array::uint8":w;
      "vector::integer":e -> "vector::uint8":w;
      "array::uint8":e -> "vector::uint8":w;
      "matrix::integer":e -> "matrix::uint8":w;
      "array::uint8":e -> "matrix::uint8":w;
      "array::integer":e -> "array::int8":w;
      "vector::integer":e -> "vector::int8":w;
      "array::int8":e -> "vector::int8":w;
      "matrix::integer":e -> "matrix::int8":w;
      "array::int8":e -> "matrix::int8":w;
      "array::integer":e -> "array::uint16":w;
      "vector::integer":e -> "vector::uint16":w;
      "array::uint16":e -> "vector::uint16":w;
      "matrix::integer":e -> "matrix::uint16":w;
      "array::uint16":e -> "matrix::uint16":w;
      "array::integer":e -> "array::int16":w;
      "vector::integer":e -> "vector::int16":w;
      "array::int16":e -> "vector::int16":w;
      "matrix::integer":e -> "matrix::int16":w;
      "array::int16":e -> "matrix::int16":w;
      "array::integer":e -> "array::uint32":w;
      "vector::integer":e -> "vector::uint32":w;
      "array::uint32":e -> "vector::uint32":w;
      "matrix::integer":e -> "matrix::uint32":w;
      "array::uint32":e -> "matrix::uint32":w;
      "array::integer":e -> "array::int32":w;
      "vector::integer":e -> "vector::int32":w;
      "array::int32":e -> "vector::int32":w;
      "matrix::integer":e -> "matrix::int32":w;
      "array::int32":e -> "matrix::int32":w;
      "array::integer":e -> "array::uint64":w;
      "vector::integer":e -> "vector::uint64":w;
      "array::uint64":e -> "vector::uint64":w;
      "matrix::integer":e -> "matrix::uint64":w;
      "array::uint64":e -> "matrix::uint64":w;
      "array::integer":e -> "array::int64":w;
      "vector::integer":e -> "vector::int64":w;
      "array::int64":e -> "vector::int64":w;
      "matrix::integer":e -> "matrix::int64":w;
      "array::int64":e -> "matrix::int64":w;
      "array::real":e -> "array::float32":w;
      "vector::real":e -> "vector::float32":w;
      "array::float32":e -> "vector::float32":w;
      "matrix::real":e -> "matrix::float32":w;
      "array::float32":e -> "matrix::float32":w;
      "array::real":e -> "array::float64":w;
      "vector::real":e -> "vector::float64":w;
      "array::float64":e -> "vector::float64":w;
      "matrix::real":e -> "matrix::float64":w;
      "array::float64":e -> "matrix::float64":w;
      "array::complex":e -> "array::complex32":w;
      "vector::complex":e -> "vector::complex32":w;
      "array::complex32":e -> "vector::complex32":w;
      "matrix::complex":e -> "matrix::complex32":w;
      "array::complex32":e -> "matrix::complex32":w;
      "array::complex":e -> "array::complex64":w;
      "vector::complex":e -> "vector::complex64":w;
      "array::complex64":e -> "vector::complex64":w;
      "matrix::complex":e -> "matrix::complex64":w;
      "array::complex64":e -> "matrix::complex64":w;
      "array":e -> "array::any":w;
      "vector":e -> "vector::any":w;
      "array::any":e -> "vector::any":w;
      "matrix":e -> "matrix::any":w;
      "array::any":e -> "matrix::any":w;
   }

