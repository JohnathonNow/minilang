hierarchy
=========


.. graphviz::

   digraph hierarchy {
      size="180,120";
      rankdir="LR";
      fontsize="40pt"
      concentrate=true;
      overlap=false;
      packMode="node";
      outputorder="edgesfirst";
      node [shape=box,fontsize=24];
      "any" -> "xml";
      "xml" -> "xml::text";
      "string" -> "xml::text";
      "xml" -> "xml::element";
      "sequence" -> "xml::element";
      "function" -> "xml::filter";
      "any" -> "xml::decoder";
      "sequence" -> "xenode";
      "any" -> "xevar";
      "any" -> "uuid";
      "any" -> "any";
      "any" -> "sequence";
      "any" -> "function";
      "function" -> "type";
      "function" -> "function::partial";
      "sequence" -> "function::partial";
      "function" -> "function::argless";
      "sequence" -> "function::argless";
      "sequence" -> "tuple";
      "any" -> "tuple::iter";
      "any" -> "boolean";
      "any" -> "number";
      "number" -> "complex";
      "complex" -> "real";
      "number" -> "real";
      "real" -> "integer";
      "function" -> "integer";
      "real" -> "integer";
      "function" -> "integer";
      "real" -> "double";
      "any" -> "integer::iter";
      "sequence" -> "integer::range";
      "any" -> "real::iter";
      "sequence" -> "real::range";
      "any" -> "module";
      "any" -> "time";
      "any" -> "thread";
      "any" -> "thread::channel";
      "any" -> "thread::mutex";
      "any" -> "thread::protected";
      "any" -> "thread::condition";
      "sequence" -> "table";
      "sequence" -> "table::row";
      "any" -> "address";
      "address" -> "buffer";
      "address" -> "string";
      "sequence" -> "string";
      "any" -> "regex";
      "any" -> "string::buffer";
      "any" -> "stream";
      "stream" -> "stream::buffered";
      "stream" -> "stream::fd";
      "function" -> "filter";
      "function" -> "chained";
      "sequence" -> "chained";
      "sequence" -> "doubled";
      "sequence" -> "doubled2";
      "sequence" -> "stacked";
      "sequence" -> "repeated";
      "sequence" -> "sequenced";
      "sequence" -> "limited";
      "sequence" -> "skipped";
      "sequence" -> "until";
      "function" -> "tasks";
      "sequence" -> "buffered";
      "sequence" -> "unique";
      "sequence" -> "zipped";
      "sequence" -> "grid";
      "sequence" -> "paired";
      "sequence" -> "weaved";
      "sequence" -> "folded";
      "sequence" -> "unfolded";
      "sequence" -> "swapped";
      "sequence" -> "key";
      "sequence" -> "batched";
      "function" -> "context";
      "any" -> "reference";
      "any" -> "error";
      "any" -> "error::value";
      "any" -> "semaphore";
      "any" -> "channel";
      "any" -> "queue::entry";
      "sequence" -> "queue";
      "any" -> "polynomial";
      "any" -> "object";
      "type" -> "class";
      "any" -> "property";
      "type" -> "enum";
      "sequence" -> "enum";
      "any" -> "enum::range";
      "sequence" -> "enum::range";
      "type" -> "flags";
      "any" -> "methods";
      "function" -> "method";
      "sequence" -> "map";
      "any" -> "map::node";
      "sequence" -> "list";
      "any" -> "list::node";
      "any" -> "list::slice";
      "any" -> "json::decoder";
      "any" -> "jsvalue";
      "any" -> "jsencoder";
      "any" -> "jsdecoder";
      "sequence" -> "gir-typelib";
      "type" -> "gir::base";
      "function" -> "gir";
      "gir::base" -> "gir::object";
      "any" -> "gir::object";
      "gir::base" -> "gir::struct";
      "any" -> "gir::struct";
      "any" -> "fieldref::boolean";
      "any" -> "fieldref::int8";
      "any" -> "fieldref::uint8";
      "any" -> "fieldref::int16";
      "any" -> "fieldref::uint16";
      "any" -> "fieldref::int32";
      "any" -> "fieldref::uint32";
      "any" -> "fieldref::int64";
      "any" -> "fieldref::uint64";
      "any" -> "fieldref::float";
      "any" -> "fieldref::double";
      "any" -> "fieldref::utf8";
      "gir::base" -> "gir::enum";
      "any" -> "gir::enum";
      "any" -> "gir::object";
      "stream" -> "file";
      "sequence" -> "dir";
      "state" -> "compiler::function";
      "any" -> "expr";
      "any" -> "macro";
      "any" -> "block::builder";
      "any" -> "expr::builder";
      "state" -> "compiler";
      "any" -> "parser";
      "any" -> "global";
      "any" -> "variable";
      "function" -> "closure";
      "sequence" -> "closure";
      "any" -> "closure::info";
      "address" -> "array";
      "sequence" -> "array";
      "array" -> "vector";
      "array" -> "matrix";
      "array" -> "array::complex";
      "array::complex" -> "vector::complex";
      "vector" -> "vector::complex";
      "array::complex" -> "matrix::complex";
      "matrix" -> "matrix::complex";
      "array::complex" -> "array::real";
      "array" -> "array::real";
      "array::real" -> "array::integer";
      "array::real" -> "vector::real";
      "vector" -> "vector::real";
      "vector::real" -> "vector::integer";
      "array::real" -> "matrix::real";
      "matrix" -> "matrix::real";
      "matrix::real" -> "matrix::integer";
      "array::integer" -> "array::int8";
      "vector::integer" -> "vector::int8";
      "array::int8" -> "vector::int8";
      "matrix::integer" -> "matrix::int8";
      "array::int8" -> "matrix::int8";
      "array::integer" -> "array::uint8";
      "vector::integer" -> "vector::uint8";
      "array::uint8" -> "vector::uint8";
      "matrix::integer" -> "matrix::uint8";
      "array::uint8" -> "matrix::uint8";
      "array::integer" -> "array::int16";
      "vector::integer" -> "vector::int16";
      "array::int16" -> "vector::int16";
      "matrix::integer" -> "matrix::int16";
      "array::int16" -> "matrix::int16";
      "array::integer" -> "array::uint16";
      "vector::integer" -> "vector::uint16";
      "array::uint16" -> "vector::uint16";
      "matrix::integer" -> "matrix::uint16";
      "array::uint16" -> "matrix::uint16";
      "array::integer" -> "array::int32";
      "vector::integer" -> "vector::int32";
      "array::int32" -> "vector::int32";
      "matrix::integer" -> "matrix::int32";
      "array::int32" -> "matrix::int32";
      "array::integer" -> "array::uint32";
      "vector::integer" -> "vector::uint32";
      "array::uint32" -> "vector::uint32";
      "matrix::integer" -> "matrix::uint32";
      "array::uint32" -> "matrix::uint32";
      "array::integer" -> "array::int64";
      "vector::integer" -> "vector::int64";
      "array::int64" -> "vector::int64";
      "matrix::integer" -> "matrix::int64";
      "array::int64" -> "matrix::int64";
      "array::integer" -> "array::uint64";
      "vector::integer" -> "vector::uint64";
      "array::uint64" -> "vector::uint64";
      "matrix::integer" -> "matrix::uint64";
      "array::uint64" -> "matrix::uint64";
      "array::real" -> "array::float32";
      "vector::real" -> "vector::float32";
      "array::float32" -> "vector::float32";
      "matrix::real" -> "matrix::float32";
      "array::float32" -> "matrix::float32";
      "array::real" -> "array::float64";
      "vector::real" -> "vector::float64";
      "array::float64" -> "vector::float64";
      "matrix::real" -> "matrix::float64";
      "array::float64" -> "matrix::float64";
      "array::complex" -> "array::complex32";
      "vector::complex" -> "vector::complex32";
      "array::complex32" -> "vector::complex32";
      "matrix::complex" -> "matrix::complex32";
      "array::complex32" -> "matrix::complex32";
      "array::complex" -> "array::complex64";
      "vector::complex" -> "vector::complex64";
      "array::complex64" -> "vector::complex64";
      "matrix::complex" -> "matrix::complex64";
      "array::complex64" -> "matrix::complex64";
      "array" -> "array::any";
      "vector" -> "vector::any";
      "array::any" -> "vector::any";
      "matrix" -> "matrix::any";
      "array::any" -> "matrix::any";
      "any" -> "xenode";
      "any" -> "xescope";
   }

