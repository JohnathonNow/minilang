
hierarchy
=========

.. graphviz::

   digraph hierarchy {
      size="180,120";
      rankdir="LR";
      fontsize="40pt"
      concentrate=true;
      overlap=false;
      packMode="node";
      outputorder="edgesfirst";
      node [shape=box,fontsize=24];
      "any":e -> "xml":w;
      "xml":e -> "xml::text":w;
      "string":e -> "xml::text":w;
      "xml":e -> "xml::element":w;
      "sequence":e -> "xml::element":w;
      "function":e -> "xml::filter":w;
      "stream":e -> "xml::decoder":w;
      "sequence":e -> "xenode":w;
      "any":e -> "xevar":w;
      "any":e -> "uuid":w;
      "any":e -> "any":w;
      "any":e -> "sequence":w;
      "any":e -> "function":w;
      "function":e -> "type":w;
      "function":e -> "function::partial":w;
      "sequence":e -> "function::partial":w;
      "function":e -> "function::argless":w;
      "sequence":e -> "function::argless":w;
      "sequence":e -> "tuple":w;
      "any":e -> "tuple::iter":w;
      "any":e -> "boolean":w;
      "any":e -> "module":w;
      "any":e -> "time":w;
      "any":e -> "thread":w;
      "any":e -> "thread::channel":w;
      "any":e -> "thread::mutex":w;
      "any":e -> "thread::protected":w;
      "any":e -> "thread::condition":w;
      "any":e -> "task":w;
      "function":e -> "tasks":w;
      "sequence":e -> "table":w;
      "sequence":e -> "table::row":w;
      "any":e -> "address":w;
      "address":e -> "buffer":w;
      "address":e -> "string":w;
      "sequence":e -> "string":w;
      "any":e -> "regex":w;
      "any":e -> "string::buffer":w;
      "any":e -> "stream":w;
      "stream":e -> "stream::buffered":w;
      "stream":e -> "stream::fd":w;
      "function":e -> "filter":w;
      "function":e -> "chained":w;
      "sequence":e -> "chained":w;
      "function":e -> "context":w;
      "any":e -> "reference":w;
      "any":e -> "error":w;
      "any":e -> "error::value":w;
      "any":e -> "semaphore":w;
      "any":e -> "channel":w;
      "any":e -> "queue::entry":w;
      "sequence":e -> "queue":w;
      "any":e -> "polynomial":w;
      "any":e -> "polynomial::rational":w;
      "any":e -> "object":w;
      "type":e -> "class":w;
      "any":e -> "property":w;
      "type":e -> "enum":w;
      "sequence":e -> "enum":w;
      "any":e -> "enum::range":w;
      "sequence":e -> "enum::range":w;
      "type":e -> "flags":w;
      "any":e -> "number":w;
      "number":e -> "complex":w;
      "complex":e -> "real":w;
      "real":e -> "integer":w;
      "function":e -> "integer":w;
      "real":e -> "double":w;
      "any":e -> "integer::iter":w;
      "sequence":e -> "integer::range":w;
      "any":e -> "real::iter":w;
      "sequence":e -> "real::range":w;
      "any":e -> "methods":w;
      "function":e -> "method":w;
      "sequence":e -> "map":w;
      "any":e -> "map::node":w;
      "sequence":e -> "list":w;
      "any":e -> "list::node":w;
      "any":e -> "list::slice":w;
      "stream":e -> "json::decoder":w;
      "any":e -> "jsvalue":w;
      "any":e -> "jsencoder":w;
      "any":e -> "jsdecoder":w;
      "sequence":e -> "gir-typelib":w;
      "type":e -> "gir::base":w;
      "gir::base":e -> "gir::object":w;
      "any":e -> "gir::object":w;
      "gir::base":e -> "gir::struct":w;
      "any":e -> "gir::struct":w;
      "any":e -> "fieldref::boolean":w;
      "any":e -> "fieldref::int8":w;
      "any":e -> "fieldref::uint8":w;
      "any":e -> "fieldref::int16":w;
      "any":e -> "fieldref::uint16":w;
      "any":e -> "fieldref::int32":w;
      "any":e -> "fieldref::uint32":w;
      "any":e -> "fieldref::int64":w;
      "any":e -> "fieldref::uint64":w;
      "any":e -> "fieldref::float":w;
      "any":e -> "fieldref::double":w;
      "any":e -> "fieldref::utf8":w;
      "gir::base":e -> "gir::enum":w;
      "any":e -> "gir::enum":w;
      "any":e -> "gir::object":w;
      "stream":e -> "file":w;
      "sequence":e -> "dir":w;
      "state":e -> "compiler::function":w;
      "any":e -> "expr":w;
      "any":e -> "macro":w;
      "any":e -> "block::builder":w;
      "any":e -> "expr::builder":w;
      "state":e -> "compiler":w;
      "any":e -> "parser":w;
      "any":e -> "global":w;
      "any":e -> "variable":w;
      "function":e -> "closure":w;
      "sequence":e -> "closure":w;
      "any":e -> "closure::info":w;
      "address":e -> "array":w;
      "sequence":e -> "array":w;
      "array":e -> "vector":w;
      "array":e -> "matrix":w;
      "array":e -> "array::complex":w;
      "array::complex":e -> "vector::complex":w;
      "vector":e -> "vector::complex":w;
      "array::complex":e -> "matrix::complex":w;
      "matrix":e -> "matrix::complex":w;
      "array::complex":e -> "array::real":w;
      "array":e -> "array::real":w;
      "array::real":e -> "array::integer":w;
      "array::real":e -> "vector::real":w;
      "vector":e -> "vector::real":w;
      "vector::real":e -> "vector::integer":w;
      "array::real":e -> "matrix::real":w;
      "matrix":e -> "matrix::real":w;
      "matrix::real":e -> "matrix::integer":w;
      "any":e -> "xenode":w;
      "any":e -> "xescope":w;
   }

