-- ROOT --

%include common.rabs

CFLAGS := old + ["-std=gnu99", "-fstrict-aliasing", "-Wstrict-aliasing", "-I.", "-pthread", "-DGC_THREADS", "-D_GNU_SOURCE", '-D{PLATFORM}']
LDFLAGS := old + ["-lm"]

if DEBUG then
	CFLAGS := old + ["-g", "-DGC_DEBUG", "-DDEBUG"]
	LDFLAGS := old + ["-g"]
else
	CFLAGS := old + ["-O3"]
end

var Objects := [
	file("minilang.o"),
	file("ml_compiler.o"),
	file("ml_runtime.o"),
	file("ml_types.o"),
	file("ml_file.o"),
	file("sha256.o"),
	file("stringmap.o"),
	file("pointerset.o"),
	file("ml_console.o"),
	file("ml_object.o")
]

if PLATFORM = "Linux" then
	Objects := old + [file("linenoise.o")]
	LDFLAGS := old + ["-lgc"]
elseif PLATFORM = "FreeBSD" then
	Objects := old + [file("linenoise.o")]
	CFLAGS := old + ["-I/usr/local/include"]
	LDFLAGS := old + ["-L/usr/local/lib", "-lgc-threaded"]
elseif PLATFORM = "Darwin" then
	Objects := old + [file("linenoise.o")]
	LDFLAGS := old + ["-lgc"]
elseif PLATFORM = "Mingw" then
end

c_library(file("libminilang.a"), Objects)
var Minilang := c_program(file("minilang"), [file("ml_main.o")] + Objects)
var Minipp := c_program(file("minipp"), [file("minipp.o")] + Objects)

var InstallInclude := PREFIX / "include/minilang"
var InstallLib := PREFIX / "lib"

install(file("linenoise.h"), InstallInclude / "linenoise.h")
install(file("minilang.h"), InstallInclude / "minilang.h")
install(file("ml_console.h"), InstallInclude / "ml_console.h")
install(file("ml_file.h"), InstallInclude / "ml_file.h")
install(file("ml_macros.h"), InstallInclude / "ml_macros.h")
install(file("ml_types.h"), InstallInclude / "ml_types.h")
install(file("ml_object.h"), InstallInclude / "ml_object.h")
install(file("ml_compiler.h"), InstallInclude / "ml_compiler.h")
install(file("sha256.h"), InstallInclude / "sha256.h")
install(file("stringmap.h"), InstallInclude / "stringmap.h")
install(file("libminilang.a"), InstallLib / "libminilang.a")

var test_minilang := fun(Source, Expected) do
	var Target := meta('test-{Source:basename}')[Minilang, Source] => fun() do
		var Actual := shell(Minilang, Source)
		if Actual = Expected then
			print('\e[32m[ðŸ—¸] Test {Source:basename} passed!\e[0m\n')
		else
			print('\e[31m[ðŸ—´] Test {Source:basename} failed!\e[0m\n')
			print('Expected {Expected:length} bytes:\n{Expected}\n---\n')
			print('Actual {Actual:length} bytes:\n{Actual}\n---\n')
			error("TestError", "Test failed")
		end
	end
end

TEST[Minilang:scan("test") => fun() [
	test_minilang(file("test/test1.mini"), 'Hello world!'),
	test_minilang(file("test/test2.mini"), '\
X = 100
X = 110
'),
	test_minilang(file("test/test4.mini"), '\
Key = 1, Value = 1
Key = 2, Value = 2
Key = 3, Value = hello
Key = 4, Value = 4
Key = 5, Value = 5
Key = a, Value = 100
Key = 10, Value = b
'),
	test_minilang(file("test/test5.mini"), '\
N = 1, X = a
N = 2, X = b
N = 3, X = c
N = 4, X = d
N = 5, X = e
X = xa
X = xb
X = xc
X = xd
X = xe
L = xa xb xc xd xe
Y[1] = ya
Y[2] = yb
Y[3] = yc
Y[4] = yd
Y[5] = ye
M = ya yb yc yd ye
')
]]
