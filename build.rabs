-- ROOT --

%include common.rabs

if PLATFORM = "Darwin" then
	setenv("LDFLAGS", '-L/usr/local/opt/libffi/lib')
	setenv("PKG_CONFIG_PATH", '/usr/local/opt/libffi/lib/pkgconfig')
end

CFLAGS := old + ["-std=gnu99", "-fstrict-aliasing", "-Wstrict-aliasing", "-I.", "-pthread", "-DGC_THREADS", "-D_GNU_SOURCE", '-D{PLATFORM}']
LDFLAGS := old + ["-lm"]

if DEBUG then
	CFLAGS := old + ["-g", "-DGC_DEBUG", "-DDEBUG"]
	LDFLAGS := old + ["-g"]
else
	CFLAGS := old + ["-O3", "-g"]
	LDFLAGS := old + ["-g"]
end

for Source in PATH:ls(".*\\.c") do
	Source:basename:find("_init") and next
	var Target := file(Source:basename:replace(".c", "_init.c"))[Source] => fun() do
		Target:open("w"):close
		var Init := if PLATFORM = "Darwin" then
			shell("cc", "-E -DGENERATE_INIT", Source)
		else
			shell("cc", "-E -Xpreprocessor -ftrack-macro-expansion=0 -DGENERATE_INIT", Source)
		end
		var Out := Target:open("w")
		for Line in Init / "\n" do
			loop
				var I := while Line:find("ml_method_by_name(")
				var J := while Line:find(");")
				if I < Line:find("_fn_") < J then
					Out:write(Line[I, J + 2])
					Out:write("\n")
				end
				Line := Line[J + 2, 0]
			end
		end
		Out:close
	end
end

var Objects := [
	file("minilang.o"),
	file("ml_compiler.o"),
	file("ml_runtime.o"),
	file("ml_types.o"),
	file("ml_file.o"),
	file("ml_iterfns.o"),
	file("sha256.o"),
	file("stringmap.o"),
	file("ml_console.o"),
	file("ml_object.o")
]

var Libraries := []

if defined("LIBUV") then
	Objects:put(file("ml_libuv.o"))
	CFLAGS := old + ["-DUSE_ML_UV"]
	LDFLAGS := old + ["-luv"]
end

if defined("USEGTK") then
	Objects:put(file("ml_gir.o"), file("gtk_console.o"))
	CFLAGS := old + ["-DUSE_ML_GIR", pkgconfig("--cflags gtk+-3.0 gdk-pixbuf-2.0 gtksourceview-4 gobject-introspection-1.0")]
	LDFLAGS := old + [pkgconfig("--libs gtk+-3.0 gdk-pixbuf-2.0 gtksourceview-4 gobject-introspection-1.0")]
end

if defined("USECBOR") then
	var Dir := file("minicbor")
	Dir:exists or execute("git clone -b dev https://github.com/rajamukherji/minicbor.git")
	
	CFLAGS := old + [
		'-DMINICBOR_PREFIX=ml_cbor_',
		'-DMINICBOR_READ_FN_PREFIX=ml_cbor_read_',
		'-DMINICBOR_READDATA_TYPE=\"struct ml_cbor_reader_t *\"',
		 "-DUSE_ML_CBOR"
	]
	Objects:put(
		file("ml_cbor.o"),
		file("minicbor/minicbor_reader.o"),
		file("minicbor/minicbor_writer.o")
	)
end

if defined("USEMPC") then
	var Dir := file("mpc")
	Dir:exists or do
		execute("git clone https://github.com/orangeduck/mpc.git")
		execute("cat mpc_extra.c >> ", Dir/"mpc.c")
	end
	Objects:put(file("ml_mpc.o"), Dir/"mpc.o")
	CFLAGS := old + ["-DUSE_ML_MPC"]
end

if PLATFORM = "Linux" then
	Objects := old + [file("linenoise.o")]
	LDFLAGS := old + ["-lgc"]
elseif PLATFORM = "FreeBSD" then
	Objects := old + [file("linenoise.o")]
	CFLAGS := old + ["-I/usr/local/include"]
	LDFLAGS := old + ["-L/usr/local/lib", "-lgc-threaded"]
elseif PLATFORM = "Darwin" then
	Objects := old + [file("linenoise.o")]
	LDFLAGS := old + ["-lgc"]
elseif PLATFORM = "Mingw" then
end

c_library(file("libminilang.a"), Objects, Libraries)
MINILANG := c_program(file("minilang"), [file("ml_main.o")] + Objects)
MINIPP := c_program(file("minipp"), [file("minipp.o")] + Objects)

var InstallBin := PREFIX / "bin"
var InstallInclude := PREFIX / "include/minilang"
var InstallLib := PREFIX / "lib"

install(file("minilang"), InstallBin / "minilang", "+x")

var InstallHeaders := [
	"linenoise.h",
	"minilang.h",
	"ml_console.h",
	"ml_file.h",
	"ml_iterfns.h",
	"ml_macros.h",
	"ml_types.h",
	"ml_object.h",
	"ml_compiler.h",
	"sha256.h",
	"stringmap.h"
]

if defined("USECBOR") then
	InstallHeaders:put("ml_cbor.h")
end

for Header in InstallHeaders do
	install(file(Header), InstallInclude / Header)
end

install(file("libminilang.a"), InstallLib / "libminilang.a")

subdir("test")
