gir: gtk("Gtk", "3.0")
gir: gtksource("GtkSource", "4")
gir: pango("Pango")
gir: glib("GLib")

gtk::init(nil, nil)

gir::run(;) do
	let Config := glib::KeyFile::new()
	Config:load_from_file(glib::get_user_config_dir() + "/minilang.conf", glib::KeyFileFlags::none)

	let Window := gtk::Window::new(gtk::WindowType::toplevel)
	let HPaned := gtk::Paned::new(gtk::Orientation::horizontal)

	let Font := do
		pango::font_description_from_string(Config:get_value("gtk-console", "font"))
	on Error do
		pango::font_description_from_string("Fira Code Retina 10")
	end

	let LanguageManager := gtksource::LanguageManager::get_default()
	let Language := LanguageManager:get_language("minilang")

	let StyleManager := gtksource::StyleSchemeManager::get_default()
	let Style := do
		StyleManager:get_scheme(Config:get_value("gtk-console", "style"))
	on Error do
		nil
	end

	let Buffer := gtksource::Buffer::new_with_language(Language)
	Style and Buffer:set_style_scheme(Style)
	let Editor := gtksource::View::new_with_buffer(Buffer)
	Editor:set_tab_width(4)
	Editor:override_font(Font)
	Editor:set_show_line_numbers(true)
	let EditorScrolled := gtk::ScrolledWindow::new(nil, nil)
	EditorScrolled:add(Editor)
	HPaned:add(EditorScrolled)

	let Output := gtk::TextView::new()
	Output:override_font(Font)
	Output:set_editable(false)
	Output:set_cursor_visible(false)
	let OutputScrolled := gtk::ScrolledWindow::new(nil, nil)
	OutputScrolled:add(Output)
	HPaned:add(OutputScrolled)

	HPaned:set_position(300)
	Window:add(HPaned)
	Window:set_default_size(600, 600)
	Window:show_all

	Editor:grab_focus

	let EditBuffer := Editor:get_buffer
	let OutputBuffer := Output:get_buffer

	fun describe(Buffer, Indent, Expr) do
		Buffer:write(Indent, Expr[3], ".", Expr[1], "\n")
		switch Expr[1]: string
		case "if" do
			for Case in Expr[5] do
				Buffer:write(Indent, '| if {Case[1]} {Case[2]}\n')
				describe(Buffer, Indent + "| | ", Case[3])
				Buffer:write(Indent, "| then\n")
				describe(Buffer, Indent + "| | ", Case[4])
			end
			if Expr[6] then
				Buffer:write(Indent, "| else\n")
				describe(Buffer, Indent + "| | ", Expr[6])
			end
		case "string" do
			for Part in Expr[5] do
				if Part in list then
					Buffer:write(Indent, "| {}\n")
					for Child in Part do
						describe(Buffer, Indent + "| | ", Child)
					end
				else
					Buffer:write(Indent, "| \"", Part:escape, "\"\n")
				end
			end
		case "value" do
			if Expr[5] in string then
				Buffer:write(Indent, "| \"", Expr[5]:escape, "\"\n")
			else
				Buffer:write(Indent, "| ", Expr[5], "\n")
			end
		else
			for Field in Expr skip 4 do
				switch Field: type
				case tuple do
					describe(Buffer, Indent + "| ", Field)
				case list do
					for Child in Field do
						describe(Buffer, Indent + "| ", Child)
					end
				else
					Buffer:write(Indent, "| ", Field, "\n")
				end
			end
		end
	end

	EditBuffer:connect("changed"; Buffer) do
		let Start := gtk::TextIter()
		let End := gtk::TextIter()
		Buffer:get_bounds(Start, End)
		let Text := Buffer:get_text(Start, End, false)
		let P := parser()
		P:permissive(true)
		P:source("test", 0)
		P:input(Text)
		let Expr := P:parse:describe
		print('Expr = {Expr}\n')
		let Desc := string::buffer()
		describe(Desc, "", Expr)
		OutputBuffer:set_text(Desc:rest, -1)
	on Error do
		OutputBuffer:set_text(string(Error), -1)
	end

	gtk::main()
end