gir: gtk("Gtk", "3.0")
gir: gtksource("GtkSource", "4")
gir: pango("Pango")
gir: glib("GLib")

gtk::init(nil, nil)

fun describe(Buffer, Indent, Expr) do
	switch Expr: type
	case list do
		if Expr:length > 0 then
			Buffer:write("[")
			for I, Value in Expr do
				Buffer:write("\n", Indent + "- ")
				describe(Buffer, Indent + " ", Value)
			end
			Buffer:write('\n{Indent}]')
		else
			Buffer:write("[]")
		end
	case ast::expr do
		Buffer:write('{type(Expr)} [{Expr:startline} .. {Expr:endline}] \{')
		for Field in type(Expr):fields do
			if not Field in :({:startline, :endline, :source}) then
				Buffer:write('\n{Indent}  <{Field:name}> ')
				describe(Buffer, Indent + "  ", Field(Expr))
			end
		end
		Buffer:write('\n{Indent}}')
	case object do
		Buffer:write('{type(Expr)} \{')
		for Field in type(Expr):fields do
			Buffer:write('\n{Indent}  <{Field:name}> ')
			describe(Buffer, Indent + "  ", Field(Expr))
		end
		Buffer:write('\n{Indent}}')
	else
		Buffer:write(Expr)
	end
end

gir::run(;) do
	let Config := glib::KeyFile::new()
	Config:load_from_file(glib::get_user_config_dir() + "/minilang.conf", glib::KeyFileFlags::none)

	let Window := gtk::Window::new(gtk::WindowType::toplevel)
	let HPaned := gtk::Paned::new(gtk::Orientation::horizontal)

	let Font := do
		pango::font_description_from_string(Config:get_value("gtk-console", "font"))
	on Error do
		pango::font_description_from_string("Fira Code Retina 10")
	end

	let LanguageManager := gtksource::LanguageManager::get_default()
	let Language := LanguageManager:get_language("minilang")

	let StyleManager := gtksource::StyleSchemeManager::get_default()
	let Style := do
		StyleManager:get_scheme(Config:get_value("gtk-console", "style"))
	on Error do
		nil
	end

	let Buffer := gtksource::Buffer::new_with_language(Language)
	Style and Buffer:set_style_scheme(Style)
	let Editor := gtksource::View::new_with_buffer(Buffer)
	Editor:set_tab_width(4)
	Editor:override_font(Font)
	Editor:set_show_line_numbers(true)
	let EditorScrolled := gtk::ScrolledWindow::new(nil, nil)
	EditorScrolled:add(Editor)
	HPaned:add(EditorScrolled)

	let Output := gtk::TextView::new()
	Output:set_wrap_mode(gtk::WrapMode::char)
	Output:override_font(Font)
	Output:set_editable(false)
	Output:set_cursor_visible(false)
	let OutputScrolled := gtk::ScrolledWindow::new(nil, nil)
	OutputScrolled:add(Output)
	HPaned:add(OutputScrolled)

	HPaned:set_position(300)
	Window:add(HPaned)
	Window:set_default_size(600, 600)
	Window:show_all

	Editor:grab_focus

	let EditBuffer := Editor:get_buffer
	let OutputBuffer := Output:get_buffer

	EditBuffer:connect("changed"; Buffer) do
		let Start := gtk::TextIter()
		let End := gtk::TextIter()
		Buffer:get_bounds(Start, End)
		let Text := Buffer:get_text(Start, End, false)
		let P := parser()
		P:permissive(true)
		P:source("test", 0)
		P:input(Text)
		let Expr := P:parse:ast
		:>OutputBuffer:set_text(string(Expr), -1)
		print('Expr = {Expr}\n')
		let Desc := string::buffer()
		describe(Desc, "", Expr)
		OutputBuffer:set_text(Desc:rest, -1)
	on Error do
		OutputBuffer:set_text(string(Error), -1)
	end

	gtk::main()
end