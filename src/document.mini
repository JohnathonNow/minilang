let Categories := {}
let OutputDirectory := Args[1]

for FileName in dir(OutputDirectory) do
	if FileName[-4, 0] = ".rst" then
		print('Unlinking {FileName}\n')
		file::unlink(OutputDirectory + "/" + FileName)
	end
end

fun category_name(Type) do
	if Type:find("State") then
		ret "internal"
	elseif let Match := Type % r"^ML(.*)T$" then
		ret Match[2]:lower
	else
		ret Type
	end
end

fun write_category(Category) do
	print('Creating Category: {Category}\n')
	let File := file('{OutputDirectory}/{Category:lower}.rst', "w")
	File:write(Category, "\n")
	for I in Category do File:write("=") end
	File:write("\n\n")
	File:write(".. include:: <isonum.txt>\n\n")
	ret File
end

fun type_name(Type) do
	Type or ret "any"
	if let Match := Type % r"^ML(.*)T$" then
		ret Match[2]:lower
	else
		ret Type
	end
end

fun is_symbol(Method) (Method = "\"<op>\"") or (Method:lower = Method:upper)

fun write_method(Category, Kind, Method, Params, Return, Description, Location) do
	:<print('[{Category}] {Kind}: {Method}\n')
	print("Params:\n")
	for Param in Params do print('\t{Param}\n') end
	print('Returns: {Return}\n')
	print('Description: {Description}\n\n')>:

	let File := Categories[Category, write_category]
	let Title := stringbuffer()
	
	var Terminator := ""
	var Skip := 1
	Title:write(':mini:`meth ')
	if Method = "\"[]\"" then
		Title:write("(", Params[1][1], ": ", type_name(Params[1][2]), ")[")
		Terminator := "]"
	:<elseif Method[1] = "\"" then
		if Params:length = 1 and is_symbol(Method) then
			Title:write('{Method[2, -1]}(', Params[1][1], ": ", type_name(Params[1][2]), ")")
		else
			Title:write("(", Params[1][1], ": ", type_name(Params[1][2]), ")")
			if is_symbol(Method) then
				Title:write(' {Method[2, -1]} ')
			else
				Title:write(':{Method[2, -1]}')
				if Params:length > 1 then
					Title:write("(")
					Terminator := ")"
				end
			end
		end>:
	else
		if let Match := Method % r"ML(\w+)T" then
			Title:write('{Match[2]:lower}(')
		elseif Method[1] = "\"" then
			if is_symbol(Method) then
				Title:write('{Method[2, -1]}(')
			else
				Title:write(':{Method[2, -1]}(')
			end
		else
			Title:write('{Method}(')
		end
		Skip := 0
		Terminator := ")"
	end
	var Seperator := ""
	for Param in Params skip Skip do
		Title:write(Seperator, Param[1], ": ", type_name(Param[2]))
		Seperator := ", "
	end
	Title:write(Terminator, "`")
	if Return:length > 0 then
		Title:write(" |rarr| :mini:`", type_name(Return[1]), "`")
		for Type in Return skip 1 do
			Title:write(" or :mini:`", type_name(Type), "`")
		end
	end
	let TitleString := Title:get
	File:write(TitleString, "\n")
	for Line in Description do
		File:write("   ", Line, "\n")
	end
	for Param in Params do
		if Param[3]:length > 0 then
			File:write("   :", type_name(Param[2]), " ", Param[1], ": ", Param[3], "\n")
		end	
	end
	:>File:write('   *Defined at line {Location[2]} in {Location[1]}*\n')
	File:write("\n")
end

fun write_function(Category, Kind, Name, Params, Return, Description, Location) do
	:<print('[{Category}] {Kind}: {Name}\n')
	print("Params:\n")
	for Param in Params do print('\t{Param}\n') end
	print('Returns: {Return}\n')
	print('Description: {Description}\n')>:
	
	let File := Categories[Category, write_category]
	let Title := stringbuffer()
	
	var Terminator := ""
	Title:write(':mini:`fun ', Name, "(")
	var Seperator := ""
	for Param in Params do
		Title:write(Seperator, Param[1], ": ", type_name(Param[2]))
		Seperator := ", "
	end
	Title:write(")`")
	if Return:length > 0 then
		Title:write(" |rarr| :mini:`", type_name(Return[1]), "`")
		for Type in Return skip 1 do
			Title:write(" or :mini:`", type_name(Type), "`")
		end
	end
	let TitleString := Title:get
	File:write(TitleString, "\n")
	for Line in Description do
		File:write("   ", Line, "\n")
	end
	for Param in Params do
		if Param in method then
		elseif Param[3]:length > 0 then
			File:write("   :", type_name(Param[2]), " ", Param[1], ": ", Param[3], "\n")
		end	
	end
	:>File:write('   *Defined at line {Location[2]} in {Location[1]}*\n')
	File:write("\n")
end

fun write_constructor(Category, Kind, Name, Params, Return, Description, Location) do
	:<print('[{Category}] {Kind}: {Name}\n')
	print("Params:\n")
	for Param in Params do print('\t{Param}\n') end
	print('Returns: {Return}\n')
	print('Description: {Description}\n')>:
	
	let File := Categories[Category, write_category]
	let Title := stringbuffer()
	
	var Terminator := ""
	Title:write(':mini:`constructor ', Name, "(")
	var Seperator := ""
	for Param in Params do
		Title:write(Seperator, Param[1], ": ", type_name(Param[2]))
		Seperator := ", "
	end
	Title:write(")`")
	if Return:length > 0 then
		Title:write(" |rarr| :mini:`", type_name(Return[1]), "`")
		for Type in Return skip 1 do
			Title:write(" or :mini:`", type_name(Type), "`")
		end
	end
	let TitleString := Title:get
	File:write(TitleString, "\n")
	for Line in Description do
		File:write("   ", Line, "\n")
	end
	for Param in Params do
		if Param in method then
		elseif Param[3]:length > 0 then
			File:write("   :", type_name(Param[2]), " ", Param[1], ": ", Param[3], "\n")
		end	
	end
	:>File:write('   *Defined at line {Location[2]} in {Location[1]}*\n')
	File:write("\n")
end

fun write_type(Category, Name, Parents, Description, Location) do
	:<print('[{Category}] ML_TYPE: {Name} [{Parents}]\n')
	print('Description: {Description}\n')>:
	
	let File := Categories[Category, write_category]
	let Title := stringbuffer()
	
	Title:write(':mini:`def {type_name(Name)}')
	if Parents:length > 0 then
		Title:write(" < ")
		var Seperator := ""
		for Parent in Parents do
			Title:write(Seperator, type_name(Parent))
			Seperator := ", "
		end
	end
	Title:write("`\n")
	File:write(Title:get)
	for Line in Description do
		File:write("   ", Line, "\n")
	end
	:>File:write('   *Defined at line {Location[2]} in {Location[1]}*\n')
	File:write("\n")
end

def Subscripts := {
	"/0" is "₀", "/1" is "₁", "/2" is "₂", "/3" is "₃", "/4" is "₄",
	"/5" is "₅", "/6" is "₆", "/7" is "₇", "/8" is "₈", "/9" is "₉",
	"/i" is "ᵢ", "/j" is "ⱼ", "/m" is "ₘ", "/n" is "ₙ"
} 

fun process(FileName) do
	let File := file(FileName, 'r')
	var DefaultCategory := "general"
	if let Match := FileName % r"ml_([a-z]+).c" then
		DefaultCategory := Match[2]
	end
	var LineNo := 0
	loop
		let Line := while File:read
		:>print('{LineNo}: {Line}')
		LineNo := old + 1
		do
			if Line % r"//!" then
				DefaultCategory := Line[4, 0]:trim
			elseif Line % r"^ML_METHOD_DECL" then
				
			elseif Line % r"^ML_METHOD" then
				let Location := (FileName, LineNo)
				let I := Line:find("("), J := Line:find(")")
				let Kind := Line[1, I]
				let Types := Line[I + 1, J] / ", "
				let Method := Types:pop
				var Category := DefaultCategory
				let Params := []
				var Return := []
				let Description := []
				loop
					let Line := while File:read
					LineNo := old + 1
					if Line % r"^//<" then
						if let J := Line:find(":", 4) then
							let K := Line:find(" ", J + 2) or 0
							Params:put((
								Line[4, J]:trim:replace(Subscripts),
								Line[J + 1, K]:trim,
								Line[K, 0]:trim
							))
						else
							let J := Line:find(" ", 4) or 0
							Params:put((
								Line[4, J]:trim:replace(Subscripts),
								Types:pop,
								Line[J, 0]:trim
							))
						end
					elseif Line % r"^//>" then
						Return := list(Line[4, 0] / "|", :trim, :replace(_, Subscripts))
					elseif Line % r"^//!" then
						Category := Line[4, 0]:trim
					elseif Line % r"^// " then
						Description:put(Line[4, 0]:replace(Subscripts))
					else
						exit
					end
				end
				for Type in Types do
					Params:put(('Arg/{Params:length + 1}':replace(Subscripts), Type, ""))
				end
				write_method(Category, Kind, Method, Params, Return, Description, Location)
			elseif Line % r"^MATH_REAL" then
				let Location := (FileName, LineNo)
				let I := Line:find("("), J := Line:find(")")
				let Kind := Line[1, I]
				let Types := ["number"]
				let Method := (Line[I + 1, J] / ", ")[2]
				var Category := "math"
				let Params := []
				var Return := []
				let Description := []
				Params:put((
					"Arg/1":trim:replace(Subscripts),
					"number",
					""
				))
				if Kind = "MATH_REAL_REAL" then
					Params:put((
						"Arg/2":trim:replace(Subscripts),
						"number",
						""
					))
				end
				Return := ["number"]
				write_method(Category, Kind, Method, Params, Return, Description, Location)
			elseif Line % r"^ML_FUNCTION" then
				let Location := (FileName, LineNo)
				let I := Line:find("("), J := Line:find(")")
				let Kind := Line[1, I]
				var Name := Line[I + 1, J]:lower
				var Category := DefaultCategory
				let Params := []
				var Return := []
				let Description := []
				loop
					let Line := while File:read
					LineNo := old + 1
					if Line % r"//@" then
						Name := Line[4, 0]:trim
					elseif Line % r"^//<" then
						if let J := Line:find(":", 4) then
							let K := Line:find(" ", J + 2) or 0
							Params:put([
								Line[4, J]:trim:replace(Subscripts),
								Line[J + 1, K]:trim,
								Line[K, 0]:trim
							])
						else
							let J := Line:find(" ", 4) or 0
							Params:put([
								Line[4, J]:trim:replace(Subscripts),
								"MLAnyT",
								Line[J, 0]:trim
							])
						end
					elseif Line % r"^//>" then
						Return := list(Line[4, 0] / "|", :trim, :replace(_, Subscripts))
					elseif Line % r"^//!" then
						Category := Line[4, 0]:trim
					elseif Line % r"^// " then
						Description:put(Line[4, 0]:replace(Subscripts))
					elseif let Match := Line % r"ML_CHECK(X?)_ARG_COUNT\(([0-9]+)\)" then
						let Count := integer(Match[3])
						for I in (Params:length + 1) .. Count do
							Params:put(['Arg/{I}':replace(Subscripts), "any", ""])
						end
					elseif let Match := Line % r"ML_CHECK(X?)_ARG_TYPE\(([0-9]+), (\w+)\)" then
						let Index := integer(Match[3]) + 1
						Params[Index][2] := type_name(Match[4])
					else
						exit
					end
				end
				write_function(Category, Kind, Name, Params, Return, Description, Location)
			elseif Line % r"^ML_CONSTRUCTOR" then
				let Location := (FileName, LineNo)
				let I := Line:find("("), J := Line:find(")")
				let Kind := Line[1, I]
				var Name := Line[I + 1, J]:lower
				var Category := DefaultCategory
				let Params := []
				let Description := []
				loop
					let Line := while File:read
					LineNo := old + 1
					if Line % r"//@" then
						Name := Line[4, 0]:trim
					elseif Line % r"^//<" then
						if let J := Line:find(":", 4) then
							let K := Line:find(" ", J + 2) or 0
							Params:put([
								Line[4, J]:trim:replace(Subscripts),
								Line[J + 1, K]:trim,
								Line[K, 0]:trim
							])
						else
							let J := Line:find(" ", 4) or 0
							Params:put([
								Line[4, J]:trim:replace(Subscripts),
								"MLAnyT",
								Line[J, 0]:trim
							])
						end
					elseif Line % r"^//!" then
						Category := Line[4, 0]:trim
					elseif Line % r"^// " then
						Description:put(Line[4, 0]:replace(Subscripts))
					else
						exit
					end
				end
				write_constructor(Category, Kind, Name, Params, [Name], Description, Location)
			elseif Line % r"^(ML_TYPE|ML_INTERFACE)" then
				let Location := (FileName, LineNo)
				let I := Line:find("("), J := Line:find("(", I + 1)
				let K := Line:find(")", J + 1)
				var Name := Line[I + 1, J]:trim(", ")
				var Category := DefaultCategory
				let Parents := Line[J + 1, K] / ", "
				let Title := Line[K + 1, 0]:trim(", ){")
				let Description := []
				loop
					let Line := while File:read
					LineNo := old + 1
					if Line % r"//@" then
						Name := Line[4, 0]:trim
					elseif Line % r"^//!" then
						Category := Line[4, 0]:trim
					elseif Line % r"^// " then
						Description:put(Line[4, 0]:replace(Subscripts))
					else
						exit
					end
				end
				write_type(Category, Name, Parents, Description, Location)
			elseif Line % r"^#define " then
				loop
					let Line := while File:read
					LineNo := old + 1
					until Line = "\n"
				end
			end
		on Error do
			print(Line, "\n")
			print('Error: {Error:message} in {FileName}:{LineNo}\n')
			for Source in Error:trace do
				print('\t{Source[1]}:{Source[2]}\n')
			end
		end
	end
	File:close
end

for FileName in Args skip 1 do process(FileName) end

for Category, File in Categories do File:close end
