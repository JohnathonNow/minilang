let OutputDirectory := Args[1]

for FileName in dir(OutputDirectory) do
	if FileName[-4, 0] = ".rst" then
		print('Unlinking {FileName}\n')
		file::unlink(OutputDirectory + "/" + FileName)
	end
end

fun category_name(Type) do
	if Type:find("State") then
		ret "internal"
	elseif let Match := Type % r"^ML(.*)T$" then
		ret Match[2]:lower
	elseif let Match := Type % r"^(.*)T$" then
		ret Match[2]:lower
	else
		ret Type
	end
end

class: internal()

meth :write(Internal: internal, ..) nil
meth :close(Internal: internal) nil

let Categories := {"internal" is internal()}

fun write_category(Category) do
	print('Creating Category: {Category}\n')
	let File := file('{OutputDirectory}/{Category:lower}.rst', "w")
	File:write(Category, "\n")
	for I in Category do File:write("=") end
	File:write("\n\n")
	ret File
end

fun type_name(Type) do
	Type or ret "any"
	if let Match := Type % r"^ML(.*)T$" then
		if let Match2 := Match[2] % r"([A-Z][a-z]+)([A-Z][a-z]+)" then
			ret '{Match2[2]:lower}::{Match2[3]:lower}'
		end
		ret Match[2]:lower
	elseif let Match := Type % r"^(.*)T$" then
		ret Match[2]:lower
	else
		ret Type
	end
end

fun is_symbol(Method) Method:lower = Method:upper

fun write_method(Category, Kind, Method0, Params, Return, Description, Location) do
	:<print('[{Category}] {Kind}: {Method}\n')
	print("Params:\n")
	for Param in Params do print('\t{Param}\n') end
	print('Returns: {Return}\n')
	print('Description: {Description}\n\n')>:

	let File := Categories[Category, write_category]
	let Title := string::buffer()
	
	var Terminator := ""
	var Skip := 1
	Title:write(':mini:`meth ')
	let Method := if let Match := Method0 % r"ML(\w+)T" then
		Match[2]:lower
	elseif Method0[1] = "\"" then
		if is_symbol(Method0) or Method0:find("::") then
			Method0[2, -1]
		else
			':{Method0[2, -1]}'
		end
	else
		if is_symbol(Method0) or Method0:find("::") then
			Method0
		else
			':{Method0}'
		end
	end
	if Method = "[]" then
		Title:write("(", Params[1][1], ": ", type_name(Params[1][2]), ")[")
		Terminator := "]"
	elseif is_symbol(Method) then
		if Params:length = 0 then
			Title:write('{Method}()')
		elseif Params:length = 1 then
			Title:write('{Method}({Params[1][1]}: {type_name(Params[1][2])})')
		else
			Title:write('({Params[1][1]}: {type_name(Params[1][2])}) {Method} (')
			Terminator := ")"
		end
	elseif Method[1] != ":" then
		if Params:length = 0 then
			Title:write('{Method}()')
		elseif Params:length = 1 then
			Title:write('{Method}({Params[1][1]}: {type_name(Params[1][2])})')
		else
			Title:write('{Method}({Params[1][1]}: {type_name(Params[1][2])}, ')
			Terminator := ")"
		end
	else
		:<Title:write('{Method}(')
		Skip := 0
		Terminator := ")">:
		if Params:length = 0 then
			Title:write('{Method}()')
		elseif Params:length = 1 then
			Title:write('({Params[1][1]}: {type_name(Params[1][2])}){Method}')
		else
			Title:write('({Params[1][1]}: {type_name(Params[1][2])}){Method}(')
			Terminator := ")"
		end
	end
	var Seperator := ""
	for Param in Params skip Skip do
		Title:write(Seperator, Param[1], ": ", type_name(Param[2]))
		Seperator := ", "
	end
	if Kind[-1] = "V" then
		Title:write(", ...")
	end
	Title:write(Terminator)
	if Return:length > 0 then
		Title:write(": ", type_name(Return[1]))
		for Type in Return skip 1 do
			Title:write(" | ", type_name(Type))
		end
	end
	Title:write("`")
	let TitleString := Title:get
	File:write(TitleString, "\n")
	for Line in Description do
		File:write("   ", Line, "\n")
	end
	Description[1] or File:write("   *TBD*\n")
	for Param in Params do
		if Param[3]:length > 0 then
			File:write("   :", type_name(Param[2]), " ", Param[1], ": ", Param[3], "\n")
		end	
	end
	:>File:write('   *Defined at line {Location[2]} in {Location[1]}*\n')
	File:write("\n")
end

fun write_function(Category, Kind, Name, Params, Return, Description, Location) do
	:<print('[{Category}] {Kind}: {Name}\n')
	print("Params:\n")
	for Param in Params do print('\t{Param}\n') end
	print('Returns: {Return}\n')
	print('Description: {Description}\n')>:
	
	let File := Categories[Category, write_category]
	let Title := string::buffer()
	
	var Terminator := ""
	Title:write(':mini:`fun ', Name, "(")
	var Seperator := ""
	for Param in Params do
		Title:write(Seperator, Param[1], ": ", type_name(Param[2]))
		Seperator := ", "
	end
	Title:write(")")
	if Return:length > 0 then
		Title:write(": ", type_name(Return[1]))
		for Type in Return skip 1 do
			Title:write(" | ", type_name(Type))
		end
	end
	Title:write("`")
	let TitleString := Title:get
	File:write(TitleString, "\n")
	for Line in Description do
		File:write("   ", Line, "\n")
	end
	Description[1] or File:write("   *TBD*\n")
	for Param in Params do
		if Param in method then
		elseif Param[3]:length > 0 then
			File:write("   :", type_name(Param[2]), " ", Param[1], ": ", Param[3], "\n")
		end	
	end
	:>File:write('   *Defined at line {Location[2]} in {Location[1]}*\n')
	File:write("\n")
end

fun write_constructor(Category, Kind, Name, Params, Return, Description, Location) do
	:<print('[{Category}] {Kind}: {Name}\n')
	print("Params:\n")
	for Param in Params do print('\t{Param}\n') end
	print('Returns: {Return}\n')
	print('Description: {Description}\n')>:
	
	let File := Categories[Category, write_category]
	let Title := string::buffer()
	
	var Terminator := ""
	Title:write(':mini:`constructor ', Name, "(")
	var Seperator := ""
	for Param in Params do
		Title:write(Seperator, Param[1], ": ", type_name(Param[2]))
		Seperator := ", "
	end
	Title:write(")")
	if Return:length > 0 then
		Title:write(": ", type_name(Return[1]))
		for Type in Return skip 1 do
			Title:write(" | ", type_name(Type))
		end
	end
	Title:write("`")
	let TitleString := Title:get
	File:write(TitleString, "\n")
	for Line in Description do
		File:write("   ", Line, "\n")
	end
	Description[1] or File:write("   *TBD*\n")
	for Param in Params do
		if Param in method then
		elseif Param[3]:length > 0 then
			File:write("   :", type_name(Param[2]), " ", Param[1], ": ", Param[3], "\n")
		end	
	end
	:>File:write('   *Defined at line {Location[2]} in {Location[1]}*\n')
	File:write("\n")
end

fun write_type(Category, Name, Parents, Description, Location) do
	:<print('[{Category}] ML_TYPE: {Name} [{Parents}]\n')
	print('Description: {Description}\n')>:
	
	let File := Categories[Category, write_category]
	let Title := string::buffer()
	
	Title:write(':mini:`type {type_name(Name)}')
	if Parents:length > 0 then
		Title:write(" < ")
		var Seperator := ""
		for Parent in Parents do
			Title:write(Seperator, type_name(Parent))
			Seperator := ", "
		end
	end
	Title:write("`\n")
	File:write(Title:get)
	for Line in Description do
		File:write("   ", Line, "\n")
	end
	Description[1] or File:write("   *TBD*\n")
	:>File:write('   *Defined at line {Location[2]} in {Location[1]}*\n')
	File:write("\n")
end

def Subscripts := {
	"/0" is "₀", "/1" is "₁", "/2" is "₂", "/3" is "₃", "/4" is "₄",
	"/5" is "₅", "/6" is "₆", "/7" is "₇", "/8" is "₈", "/9" is "₉",
	"/i" is "ᵢ", "/j" is "ⱼ", "/m" is "ₘ", "/n" is "ₙ", "/v" is "ᵥ"
} 

class: define(:Params, :Items)

meth :put(Define: define, Fn: function, Item: list) Define:Items:put((Fn, Item))

fun replace(X, Args) do
	switch X: type
	case string do
		let Y := X:trim("#"):replace(Args)
		if let Match := Y % r"([A-Za-z0-9_]+) ## Method" then
			Match[2]:lower
		else
			Y
		end						
	case list do
		list(X, replace(_, Args))
	case tuple do
		tuple ! replace(list(X), Args)
	else
		X
	end
end

fun process(FileName) do
	let File := file(FileName, 'r')
	var DefaultCategory := "general"
	if let Match := FileName % r"ml_([a-z]+).c" then
		DefaultCategory := Match[2]
	end
	var LineNo := 0
	let Defines := {}
	var CurrentDefine
	loop
		let Line := while File:read
		:>print('{LineNo}: {Line}')
		LineNo := old + 1
		do
			if Line % r"^/[/*]!" then
				DefaultCategory := Line[4, 0]:trim
			elseif Line % r"^#define ML_CATEGORY" then
				DefaultCategory := Line[22, -2]
			elseif Line % r"^ML_METHOD_DECL" then
			elseif Line % r"^ML_METHOD_ANON" then
			elseif Line % r"^ML_METHOD" then
				let Location := (FileName, LineNo)
				let I := Line:find("("), J := Line:find(")")
				let Kind := Line[1, I]
				let Types := Line[I + 1, J] / ", "
				var Method := Types:pop
				var Category := DefaultCategory
				let Params := []
				var Return := []
				let Description := []
				loop
					let Line := while File:read
					LineNo := old + 1
					if Line % r"^/[/*]@" then
						Method := Line[4, 0]:trim
					elseif Line % r"^/[/*]<" then
						if let J := Line:find(":", 4) then
							let K := Line:find(" ", J + 2) or 0
							Params:put((
								Line[4, J]:trim:replace(Subscripts),
								Line[J + 1, K]:trim,
								Line[K, 0]:trim
							))
						else
							let J := Line:find(" ", 4) or 0
							Params:put((
								Line[4, J]:trim:replace(Subscripts),
								Types:pop,
								Line[J, 0]:trim
							))
						end
					elseif Line % r"^/[/*]>" then
						Return := list(Line[4, 0] / "|", :trim, :replace(_, Subscripts))
					elseif Line % r"^/[/*]!" then
						Category := Line[4, 0]:trim
					elseif Line % r"^/[/*] " then
						Description:put(Line[4, 0]:replace(Subscripts))
					else
						exit
					end
				end
				for Type in Types do
					Params:put(('Arg/{Params:length + 1}':replace(Subscripts), Type, ""))
				end
				if CurrentDefine then
					CurrentDefine:put(write_method, [Category, Kind, Method, Params, Return, Description, Location])
				else
					write_method(Category, Kind, Method, Params, Return, Description, Location)
				end
			:<elseif Line % r"^MATH_REAL" then
				let Location := (FileName, LineNo)
				let I := Line:find("("), J := Line:find(")")
				let Kind := Line[1, I]
				let Types := ["number"]
				let Method := (Line[I + 1, J] / ", ")[2]
				var Category := "math"
				let Params := []
				var Return := []
				let Description := []
				Params:put((
					"Arg/1":trim:replace(Subscripts),
					"number",
					""
				))
				if Kind = "MATH_REAL_REAL" then
					Params:put((
						"Arg/2":trim:replace(Subscripts),
						"number",
						""
					))
				end
				Return := ["number"]
				if CurrentDefine then
					CurrentDefine:put(write_method, [Category, Kind, Method, Params, Return, Description, Location])
				else
					write_method(Category, Kind, Method, Params, Return, Description, Location)
				end>:
			elseif Line % r"^ML_FUNCTION" then
				let Location := (FileName, LineNo)
				let I := Line:find("("), J := Line:find(")")
				let Kind := Line[1, I]
				var Name := Line[I + 1, J]:lower
				var Category := DefaultCategory
				let Params := []
				var Return := []
				let Description := []
				loop
					let Line := while File:read
					LineNo := old + 1
					if Line % r"^/[/*]@" then
						Name := Line[4, 0]:trim
					elseif Line % r"^/[/*]<" then
						if let J := Line:find(":", 4) then
							let K := Line:find(" ", J + 2) or 0
							Params:put([
								Line[4, J]:trim:replace(Subscripts),
								Line[J + 1, K]:trim,
								Line[K, 0]:trim
							])
						else
							let J := Line:find(" ", 4) or 0
							Params:put([
								Line[4, J]:trim:replace(Subscripts),
								"MLAnyT",
								Line[J, 0]:trim
							])
						end
					elseif Line % r"^/[/*]>" then
						Return := list(Line[4, 0] / "|", :trim, :replace(_, Subscripts))
					elseif Line % r"^/[/*]!" then
						Category := Line[4, 0]:trim
					elseif Line % r"^/[/*] " then
						Description:put(Line[4, 0]:replace(Subscripts))
					elseif let Match := Line % r"ML_CHECK(X?)_ARG_COUNT\(([0-9]+)\)" then
						let Count := integer(Match[3])
						for I in (Params:length + 1) .. Count do
							Params:put(['Arg/{I}':replace(Subscripts), "any", ""])
						end
					elseif let Match := Line % r"ML_CHECK(X?)_ARG_TYPE\(([0-9]+), (\w+)\)" then
						let Index := integer(Match[3]) + 1
						Params[Index][2] := type_name(Match[4])
					else
						exit
					end
				end
				if CurrentDefine then
					CurrentDefine:put(write_function, [Category, Kind, Name, Params, Return, Description, Location])
				else
					write_function(Category, Kind, Name, Params, Return, Description, Location)
				end
			elseif Line % r"^ML_CONSTRUCTOR" then
				let Location := (FileName, LineNo)
				let I := Line:find("("), J := Line:find(")")
				let Kind := Line[1, I]
				var Name := Line[I + 1, J]:lower
				var Category := DefaultCategory
				let Params := []
				let Description := []
				loop
					let Line := while File:read
					LineNo := old + 1
					if Line % r"^/[/*]@" then
						Name := Line[4, 0]:trim
					elseif Line % r"^/[/*]<" then
						if let J := Line:find(":", 4) then
							let K := Line:find(" ", J + 2) or 0
							Params:put([
								Line[4, J]:trim:replace(Subscripts),
								Line[J + 1, K]:trim,
								Line[K, 0]:trim
							])
						else
							let J := Line:find(" ", 4) or 0
							Params:put([
								Line[4, J]:trim:replace(Subscripts),
								"MLAnyT",
								Line[J, 0]:trim
							])
						end
					elseif Line % r"^/[/*]!" then
						Category := Line[4, 0]:trim
					elseif Line % r"^/[/*] " then
						Description:put(Line[4, 0]:replace(Subscripts))
					else
						exit
					end
				end
				if CurrentDefine then
					CurrentDefine:put(write_constructor, [Category, Kind, Name, Params, [Name], Description, Location])
				else
					write_constructor(Category, Kind, Name, Params, [Name], Description, Location)
				end
			elseif Line % r"^(ML_TYPE|ML_INTERFACE)" then
				let Location := (FileName, LineNo)
				let I := Line:find("("), J := Line:find("(", I + 1)
				let K := Line:find(")", J + 1)
				var Name := Line[I + 1, J]:trim(", ")
				var Category := DefaultCategory
				let Parents := Line[J + 1, K] / ", "
				let Title := Line[K + 1, 0]:trim(", ){")
				let Description := []
				loop
					let Line := while File:read
					LineNo := old + 1
					if Line % r"^/[/*]@" then
						Name := Line[4, 0]:trim
					elseif Line % r"^/[/*]!" then
						Category := Line[4, 0]:trim
					elseif Line % r"^/[/*] " then
						Description:put(Line[4, 0]:replace(Subscripts))
					else
						exit
					end
				end
				if CurrentDefine then
					CurrentDefine:put(write_type, [Category, Name, Parents, Description, Location])
				else
					write_type(Category, Name, Parents, Description, Location)
				end
			elseif let Match := Line % r"^#define ([A-Za-z0-9_]+)\((.+)\)" then
				let Params := list(Match[3] / ",", :trim)
				Defines[Match[2]] := CurrentDefine := define(Params, [])
			elseif Line = "\n" then
				CurrentDefine := nil
			elseif let Match := Line % r"^([A-Za-z0-9_]+)\((.+)\)" then
				if let Define := Defines[Match[2]] then
					if count(Define:Items) > 0 then
						let Args := map(pair(Define:Params, list(Match[3] / ",", :trim)))
						if CurrentDefine then
							for Item in Define:Items do
								CurrentDefine:put(Item[1], replace(Item[2], Args))
							end
						else
							:>print('Expanding {Match[2]}{Args}\n')
							for Item in Define:Items do
								Item[1] ! replace(Item[2], Args)
							end
						end
					end
				end
			end
		on Error do
			print(Line, "\n")
			print('Error: {Error:message} in {FileName}:{LineNo}\n')
			for Source in Error:trace do
				print('\t{Source[1]}:{Source[2]}\n')
			end
		end
	end
	:<if count(Defines) > 0 then
		print(FileName, "\n")
		for Name, Define in Defines do
			if count(Define:Items) > 0 then
				print("\t", Name, Define:Params, "\n")
				for Item in Define:Items do
					print("\t\t", Item, "\n")
				end
			end
		end
	end>:
	File:close
end

let FileNames := list(Args skip 1)
FileNames:sort(; A, B) do
	A = "ml_types.c" and ret A
	B = "ml_types.c" and ret nil
end
	
for FileName in FileNames do process(FileName) end

for Category, File in Categories do File:close end
