#ifndef ML_OPCODES_H
#define ML_OPCODES_H

#define ML_BYTECODE_VERSION 6

typedef enum {
	MLI_AND = 0,
	MLI_AND_POP = 1,
	MLI_ASSIGN = 2,
	MLI_ASSIGN_LOCAL = 3,
	MLI_CALL = 4,
	MLI_CALL_CONST = 5,
	MLI_CALL_METHOD = 6,
	MLI_CATCH = 7,
	MLI_CATCHX = 8,
	MLI_CLOSURE = 9,
	MLI_CLOSURE_TYPED = 10,
	MLI_CONDITION = 11,
	MLI_ENTER = 12,
	MLI_EXIT = 13,
	MLI_FOR = 14,
	MLI_GOTO = 15,
	MLI_IF_DEBUG = 16,
	MLI_ITER = 17,
	MLI_KEY = 18,
	MLI_LET = 19,
	MLI_LETI = 20,
	MLI_LETX = 21,
	MLI_LINK = 22,
	MLI_LIST_APPEND = 23,
	MLI_LIST_NEW = 24,
	MLI_LOAD = 25,
	MLI_LOAD_PUSH = 26,
	MLI_LOAD_VAR = 27,
	MLI_LOCAL = 28,
	MLI_LOCALI = 29,
	MLI_LOCAL_PUSH = 30,
	MLI_MAP_INSERT = 31,
	MLI_MAP_NEW = 32,
	MLI_NEXT = 33,
	MLI_NIL = 34,
	MLI_NIL_PUSH = 35,
	MLI_NOT = 36,
	MLI_OR = 37,
	MLI_PARAM_TYPE = 38,
	MLI_PARTIAL_NEW = 39,
	MLI_PARTIAL_SET = 40,
	MLI_POP = 41,
	MLI_PUSH = 42,
	MLI_REF = 43,
	MLI_REFI = 44,
	MLI_REFX = 45,
	MLI_RESOLVE = 46,
	MLI_RESUME = 47,
	MLI_RETRY = 48,
	MLI_RETURN = 49,
	MLI_STRING_ADD = 50,
	MLI_STRING_ADDS = 51,
	MLI_STRING_ADD_1 = 52,
	MLI_STRING_END = 53,
	MLI_STRING_NEW = 54,
	MLI_STRING_POP = 55,
	MLI_SUSPEND = 56,
	MLI_SWITCH = 57,
	MLI_TAIL_CALL = 58,
	MLI_TAIL_CALL_CONST = 59,
	MLI_TAIL_CALL_METHOD = 60,
	MLI_TRY = 61,
	MLI_TUPLE_NEW = 62,
	MLI_UPVALUE = 63,
	MLI_VALUE_1 = 64,
	MLI_VALUE_2 = 65,
	MLI_VAR = 66,
	MLI_VARX = 67,
	MLI_VAR_TYPE = 68,
	MLI_WITH = 69,
	MLI_WITHX = 70,
} ml_opcode_t;

typedef enum {
	MLIT_CLOSURE,
	MLIT_COUNT,
	MLIT_COUNT_CHARS,
	MLIT_COUNT_COUNT,
	MLIT_COUNT_COUNT_DECL,
	MLIT_COUNT_DECL,
	MLIT_DECL,
	MLIT_INST,
	MLIT_INST_COUNT,
	MLIT_INST_COUNT_DECL,
	MLIT_NONE,
	MLIT_SWITCH,
	MLIT_VALUE,
	MLIT_VALUE_COUNT,
	MLIT_VALUE_COUNT_DATA,
} ml_inst_type_t;

extern const char *MLInstNames[];
extern const ml_inst_type_t MLInstTypes[];

#endif
