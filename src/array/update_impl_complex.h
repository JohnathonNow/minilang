#ifdef ML_COMPLEX
#include <complex.h>
#undef I
#endif

#include "update_impl.h"

#ifdef ML_COMPLEX

#define UPDATE_ROW_TARGET_IMPL(NAME, OP, TARGET) \
UPDATE_ROW_TARGET_IMPL_BASE(NAME, OP, TARGET) \
UPDATE_ROW_IMPL(NAME, OP, TARGET, complex_float) \
UPDATE_ROW_IMPL(NAME, OP, TARGET, complex_double)

#else

#define UPDATE_ROW_TARGET_IMPL(NAME, OP, TARGET) \
UPDATE_ROW_TARGET_IMPL_BASE(NAME, OP, TARGET)

#endif

#define UPDATE_ROW_TARGET_VALUE_IMPL_BASE(NAME, OP) \
UPDATE_ROW_VALUE_IMPL(NAME, OP, uint8_t) \
UPDATE_ROW_VALUE_IMPL(NAME, OP, int8_t) \
UPDATE_ROW_VALUE_IMPL(NAME, OP, uint16_t) \
UPDATE_ROW_VALUE_IMPL(NAME, OP, int16_t) \
UPDATE_ROW_VALUE_IMPL(NAME, OP, uint32_t) \
UPDATE_ROW_VALUE_IMPL(NAME, OP, int32_t) \
UPDATE_ROW_VALUE_IMPL(NAME, OP, uint64_t) \
UPDATE_ROW_VALUE_IMPL(NAME, OP, int64_t) \
UPDATE_ROW_VALUE_IMPL(NAME, OP, float) \
UPDATE_ROW_VALUE_IMPL(NAME, OP, double) \
UPDATE_ROW_VALUE_IMPL_VALUE(NAME, OP)

#ifdef ML_COMPLEX

#define UPDATE_ROW_TARGET_VALUE_IMPL(NAME, OP) \
UPDATE_ROW_TARGET_VALUE_IMPL_BASE(NAME, OP) \
UPDATE_ROW_VALUE_IMPL(NAME, OP, complex_float) \
UPDATE_ROW_VALUE_IMPL(NAME, OP, complex_double)

#else

#define UPDATE_ROW_TARGET_VALUE_IMPL(NAME, OP) \
UPDATE_ROW_TARGET_VALUE_IMPL_BASE(NAME, OP)

#endif

#define UPDATE_ROW_OPS_IMPL_BASE(NAME, OP, OP2) \
UPDATE_ROW_TARGET_IMPL(NAME, OP, uint8_t) \
UPDATE_ROW_TARGET_IMPL(NAME, OP, int8_t) \
UPDATE_ROW_TARGET_IMPL(NAME, OP, uint16_t) \
UPDATE_ROW_TARGET_IMPL(NAME, OP, int16_t) \
UPDATE_ROW_TARGET_IMPL(NAME, OP, uint32_t) \
UPDATE_ROW_TARGET_IMPL(NAME, OP, int32_t) \
UPDATE_ROW_TARGET_IMPL(NAME, OP, uint64_t) \
UPDATE_ROW_TARGET_IMPL(NAME, OP, int64_t) \
UPDATE_ROW_TARGET_IMPL(NAME, OP, float) \
UPDATE_ROW_TARGET_IMPL(NAME, OP, double) \
UPDATE_ROW_TARGET_VALUE_IMPL(NAME, OP2)

#ifdef ML_COMPLEX

#define UPDATE_ROW_OPS_IMPL(NAME, OP, OP2) \
UPDATE_ROW_OPS_IMPL_BASE(NAME, OP, OP2) \
UPDATE_ROW_TARGET_IMPL(NAME, OP, complex_float) \
UPDATE_ROW_TARGET_IMPL(NAME, OP, complex_double)

#else

#define UPDATE_ROW_OPS_IMPL(NAME, OP, OP2) \
UPDATE_ROW_OPS_IMPL_BASE(NAME, OP, OP2)

#endif


#define UPDATE_ROW_ENTRY(INDEX, NAME, TARGET, SOURCE) \
	[INDEX] = NAME ## _row_ ## TARGET ## _ ## SOURCE

#define UPDATE_ROW_VALUE_ENTRY(INDEX, NAME, SOURCE) \
	[INDEX] = NAME ## _row_any_ ## SOURCE

#define UPDATE_ROW_ENTRY_VALUE(INDEX, NAME, TARGET) \
	[INDEX] = NAME ## _row_ ## TARGET ## _any

#define UPDATE_ROW_VALUE_ENTRY_VALUE(INDEX, NAME) \
	[INDEX] = NAME ## _row_any_any

#define UPDATE_ROW_TARGET_ENTRIES_BASE(INDEX, NAME, TARGET) \
UPDATE_ROW_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_U8, NAME, TARGET, uint8_t), \
UPDATE_ROW_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_I8, NAME, TARGET, int8_t), \
UPDATE_ROW_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_U16, NAME, TARGET, uint16_t), \
UPDATE_ROW_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_I16, NAME, TARGET, int16_t), \
UPDATE_ROW_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_U32, NAME, TARGET, uint32_t), \
UPDATE_ROW_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_I32, NAME, TARGET, int32_t), \
UPDATE_ROW_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_U64, NAME, TARGET, uint64_t), \
UPDATE_ROW_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_I64, NAME, TARGET, int64_t), \
UPDATE_ROW_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_F32, NAME, TARGET, float), \
UPDATE_ROW_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_F64, NAME, TARGET, double), \
UPDATE_ROW_ENTRY_VALUE(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_ANY, NAME, TARGET)

#ifdef ML_COMPLEX

#define UPDATE_ROW_TARGET_ENTRIES(INDEX, NAME, TARGET) \
UPDATE_ROW_TARGET_ENTRIES_BASE(INDEX, NAME, TARGET), \
UPDATE_ROW_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_C32, NAME, TARGET, complex_float), \
UPDATE_ROW_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_C64, NAME, TARGET, complex_double)

#else

#define UPDATE_ROW_TARGET_ENTRIES(INDEX, NAME, TARGET) \
UPDATE_ROW_TARGET_ENTRIES_BASE(INDEX, NAME, TARGET)

#endif

#define UPDATE_ROW_VALUE_TARGET_ENTRIES_BASE(INDEX, NAME) \
UPDATE_ROW_VALUE_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_U8, NAME, uint8_t), \
UPDATE_ROW_VALUE_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_I8, NAME, int8_t), \
UPDATE_ROW_VALUE_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_U16, NAME, uint16_t), \
UPDATE_ROW_VALUE_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_I16, NAME, int16_t), \
UPDATE_ROW_VALUE_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_U32, NAME, uint32_t), \
UPDATE_ROW_VALUE_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_I32, NAME, int32_t), \
UPDATE_ROW_VALUE_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_U64, NAME, uint64_t), \
UPDATE_ROW_VALUE_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_I64, NAME, int64_t), \
UPDATE_ROW_VALUE_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_F32, NAME, float), \
UPDATE_ROW_VALUE_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_F64, NAME, double), \
UPDATE_ROW_VALUE_ENTRY_VALUE(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_ANY, NAME)

#ifdef ML_COMPLEX

#define UPDATE_ROW_VALUE_TARGET_ENTRIES(INDEX, NAME) \
UPDATE_ROW_VALUE_TARGET_ENTRIES_BASE(INDEX, NAME), \
UPDATE_ROW_VALUE_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_C32, NAME, complex_float), \
UPDATE_ROW_VALUE_ENTRY(MAX_FORMATS * (INDEX) + ML_ARRAY_FORMAT_C64, NAME, complex_double)

#else

#define UPDATE_ROW_VALUE_TARGET_ENTRIES(INDEX, NAME) \
UPDATE_ROW_VALUE_TARGET_ENTRIES_BASE(INDEX, NAME)

#endif

#define UPDATE_ROW_OPS_ENTRIES_BASE(NAME) \
UPDATE_ROW_TARGET_ENTRIES(ML_ARRAY_FORMAT_U8, NAME, uint8_t), \
UPDATE_ROW_TARGET_ENTRIES(ML_ARRAY_FORMAT_I8, NAME, int8_t), \
UPDATE_ROW_TARGET_ENTRIES(ML_ARRAY_FORMAT_U16, NAME, uint16_t), \
UPDATE_ROW_TARGET_ENTRIES(ML_ARRAY_FORMAT_I16, NAME, int16_t), \
UPDATE_ROW_TARGET_ENTRIES(ML_ARRAY_FORMAT_U32, NAME, uint32_t), \
UPDATE_ROW_TARGET_ENTRIES(ML_ARRAY_FORMAT_I32, NAME, int32_t), \
UPDATE_ROW_TARGET_ENTRIES(ML_ARRAY_FORMAT_U64, NAME, uint64_t), \
UPDATE_ROW_TARGET_ENTRIES(ML_ARRAY_FORMAT_I64, NAME, int64_t), \
UPDATE_ROW_TARGET_ENTRIES(ML_ARRAY_FORMAT_F32, NAME, float), \
UPDATE_ROW_TARGET_ENTRIES(ML_ARRAY_FORMAT_F64, NAME, double), \
UPDATE_ROW_VALUE_TARGET_ENTRIES(ML_ARRAY_FORMAT_ANY, NAME)

#ifdef ML_COMPLEX

#define UPDATE_ROW_OPS_ENTRIES(NAME) \
UPDATE_ROW_OPS_ENTRIES_BASE(NAME), \
UPDATE_ROW_TARGET_ENTRIES(ML_ARRAY_FORMAT_C32, NAME, complex_float), \
UPDATE_ROW_TARGET_ENTRIES(ML_ARRAY_FORMAT_C64, NAME, complex_double)

#else

#define UPDATE_ROW_OPS_ENTRIES(NAME) \
UPDATE_ROW_OPS_ENTRIES_BASE(NAME)

#endif

typedef void (*update_row_fn_t)(ml_array_dimension_t *TargetDimension, char *TargetData, ml_array_dimension_t *SourceDimension, char *SourceData);

#define UPDATE_FNS(TITLE, NAME, OP, OP2) \
	UPDATE_ROW_OPS_IMPL(NAME, OP, OP2) \
\
update_row_fn_t Update ## TITLE ## RowFns[MAX_FORMATS * MAX_FORMATS] = { \
	UPDATE_ROW_OPS_ENTRIES(NAME) \
}
