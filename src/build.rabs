if PLATFORM = "Darwin" then
	setenv("LDFLAGS", '-L/usr/local/opt/libffi/lib')
	setenv("PKG_CONFIG_PATH", '/usr/local/opt/libffi/lib/pkgconfig')
end

CFLAGS := old + [
	"-std=gnu11", :>'--save-temps',
	"-fstrict-aliasing",
	"-foptimize-sibling-calls",
	"-Wall", "-Wstrict-aliasing",
	"-Wno-deprecated-declarations",
	"-Wno-unused-function",
	"-I.", "-pthread",
	"-DGC_THREADS",
	"-D_GNU_SOURCE",
	'-D{PLATFORM}'
]
LDFLAGS := old + ["-lm"]

if DEBUG then
	CFLAGS := old + ["-g", "-DGC_DEBUG", "-DDEBUG"]
	LDFLAGS := old + ["-g"]
else
	CFLAGS := old + ["-O3", "-g"]
	LDFLAGS := old + ["-g"]
end

for Source in PATH:ls(".*\\.c") do
	Source:basename:find("_init") and next
	var Target := file(Source:basename:replace(".c", "_init.c"))[Source] => fun() do
		Target:open("w"):close
		var Init := shell("cc", CFLAGS, "-E -P -DGENERATE_INIT", Source)
		var Out := Target:open("w")
		for Line in Init / "\n" do
			loop
				var I := while Line:find("INIT_CODE ")
				Line := Line[I + 10, 0]
				var J := while Line:find(");")
				Out:write(Line[1, J + 2])
				Out:write("\n")
				Line := Line[J + 2, 0]
			end
		end
		Out:close
	end
end

var Objects := [
	file("ml_compiler.o"),
	file("ml_bytecode.o"),
	:>file("ml_bytecode_threaded.o"),
	file("ml_runtime.o"),
	file("ml_types.o"),
	file("ml_file.o"),
	file("ml_iterfns.o"),
	file("sha256.o"),
	file("stringmap.o"),
	file("ml_console.o"),
	file("ml_debugger.o"),
	file("ml_object.o")
]

var Libraries := []

if MINILANG_USEMATH or defined("USEMATH") then
	Objects:put(file("ml_math.o"), file("ml_array.o"))
	CFLAGS := old + ["-DUSE_ML_MATH"]
end

if MINILANG_LIBIO or defined("USEIO") then
	Objects:put(file("ml_io.o"))
	CFLAGS := old + ["-DUSE_ML_IO"]
end

if MINILANG_LIBUV or defined("LIBUV") then
	Objects:put(file("ml_libuv.o"))
	CFLAGS := old + ["-DUSE_ML_UV"]
	LDFLAGS := old + ["-luv"]
end

if MINILANG_LIBEVENT or defined("LIBEVENT") then
	Objects:put(file("ml_libevent.o"))
	CFLAGS := old + ["-DUSE_ML_EVENT"]
	LDFLAGS := old + ["-levent"]
end

if MINILANG_USEGTK or defined("USEGTK") then
	Objects:put(file("ml_gir.o"), file("gtk_console.o"))
	CFLAGS := old + ["-DUSE_ML_GIR", pkgconfig("--cflags gtk+-3.0 gdk-pixbuf-2.0 gtksourceview-4 gobject-introspection-1.0 libgvc")]
	LDFLAGS := old + [pkgconfig("--libs gtk+-3.0 gdk-pixbuf-2.0 gtksourceview-4 gobject-introspection-1.0 libgvc")]
end

if MINILANG_USECBOR or defined("USECBOR") then
	var Dir := PATH / "minicbor"
	Dir:exists or execute("git clone -b dev https://github.com/rajamukherji/minicbor.git", Dir)

	CFLAGS := old + [
		'-DMINICBOR_PREFIX=ml_cbor_',
		'-DMINICBOR_READ_FN_PREFIX=ml_cbor_read_',
		'-DMINICBOR_READDATA_TYPE=\"struct ml_cbor_reader_t *\"',
		 "-DUSE_ML_CBOR"
	]
	Objects:put(
		file("ml_cbor.o"),
		file("minicbor/minicbor_reader.o"),
		file("minicbor/minicbor_writer.o")
	)
end

if MINILANG_USEMPC or defined("USEMPC") then
	var Dir := PATH / "mpc"
	Dir:exists or do
		execute("git clone https://github.com/orangeduck/mpc.git", Dir)
		execute("cat", PATH / "mpc_extra.c", " >> ", Dir/"mpc.c")
	end
	Objects:put(file("ml_mpc.o"), Dir/"mpc.o")
	CFLAGS := old + ["-DUSE_ML_MPC"]
end

if MINILANG_DEBUGGER or defined("DEBUGGER") then
	Objects:put(file("ml_debugger.o"))
	CFLAGS := old + ["-DUSE_ML_DEBUGGER"]
end

if MINILANG_MODULES or defined("MODULES") then
	Objects:put(file("ml_module.o"), file("ml_library.o"))
	CFLAGS := old + ["-DUSE_ML_MODULES"]
	if PLATFORM = "Linux" then
		LDFLAGS := old + ["-ldl", '-Wl,--dynamic-list={file("exports.lst")}']
		subdir("lib")
	end
	
end

if PLATFORM = "Linux" then
	Objects := old + [file("linenoise.o")]
	LDFLAGS := old + ["-lgc"]
elseif PLATFORM = "FreeBSD" then
	Objects := old + [file("linenoise.o")]
	CFLAGS := old + ["-I/usr/local/include"]
	LDFLAGS := old + ["-L/usr/local/lib", "-lgc-threaded"]
elseif PLATFORM = "Darwin" then
	Objects := old + [file("linenoise.o")]
	LDFLAGS := old + ["-lgc"]
elseif PLATFORM = "Mingw" then
end

LIBMINILANG := c_library(LIB_DIR / "libminilang.a", Objects, Libraries)
MINILANG := c_program(BIN_DIR /"minilang", [file("minilang.o")], [LIBMINILANG])
MINIPP := c_program(BIN_DIR / "minipp", [file("minipp.o")], [LIBMINILANG])
MINIXE := c_program(BIN_DIR/"minixe", [file("minixe.o")], [LIBMINILANG])

DEFAULT[LIBMINILANG, MINILANG, MINIPP, MINIXE]

var InstallBin := PREFIX / "bin"
var InstallInclude := PREFIX / "include/minilang"
var InstallLib := PREFIX / "lib"

install(MINILANG, InstallBin / "minilang", "+x")

var InstallHeaders := [
	"minilang.h",
	"ml_console.h",
	"ml_file.h",
	"ml_iterfns.h",
	"ml_macros.h",
	"ml_types.h",
	"ml_object.h",
	"ml_compiler.h",
	"ml_runtime.h",
	"stringmap.h"
]

if MINILANG_USEMATH or defined("USEMATH") then
	InstallHeaders:put("ml_array.h")
end

if MINILANG_USECBOR or defined("USECBOR") then
	InstallHeaders:put("ml_cbor.h")
end

if MINILANG_USEGTK or defined("USEGTK") then
	InstallHeaders:put("ml_gir.h")
	InstallHeaders:put("gtk_console.h")
end

for Header in InstallHeaders do
	install(file(Header), InstallInclude / Header)
end

install(LIBMINILANG, InstallLib / "libminilang.a")

subdir("test")
