if PLATFORM = "Darwin" then
	setenv("LDFLAGS", '-L/usr/local/opt/libffi/lib')
	setenv("PKG_CONFIG_PATH", '/usr/local/opt/libffi/lib/pkgconfig')
end

CFLAGS := old + [
	"-march=native",
	"-std=gnu11", :>'--save-temps',
	"-fstrict-aliasing",
	"-foptimize-sibling-calls",
	"-Wall", "-Wstrict-aliasing",
	"-Wno-deprecated-declarations",
	"-Wno-unused-function",
	"-Werror=cast-function-type",
	:>"-Wsuggest-attribute=pure",
	:>"-Wsuggest-attribute=const",
	:>"-Wsuggest-attribute=noreturn",
	:>"-Wsuggest-attribute=malloc",
	"-I.", "-pthread",
	"-DGC_THREADS",
	"-D_GNU_SOURCE",
	'-D{PLATFORM}'
]
LDFLAGS := old + ["-lm"]

if defined("ANALYZER") then
	CFLAGS:put("-fanalyzer")
end

if DEBUG then
	CFLAGS := old + ["-g", "-DGC_DEBUG", "-DDEBUG"]
	LDFLAGS := old + ["-g"]
else
	CFLAGS := old + ["-O3", "-fexpensive-optimizations", "-g"]
	LDFLAGS := old + ["-g"]
end

fun generate_init_file(Source) do
	let InitFile := Source:basename:replace(".c", "_init.c")
	let Target := file(InitFile)[Source] => fun() do
		Target:open("w"):close
		let Init := shell("cc", CFLAGS, "-E -P -DGENERATE_INIT", Source)
		let Out := Target:open("w")
		for Line in Init / "\n" do
			loop
				let I := while Line:find("INIT_CODE ")
				Line := Line[I + 10, 0]
				let J := while Line:find(");")
				Out:write(Line[1, J + 2])
				Out:write("\n")
				Line := Line[J + 2, 0]
			end
		end
		Out:close
	end
end

PARENT."generate_init_file" := generate_init_file

fun generate_init_files() do
	for Source in PATH:ls(".*\\.c") do
		Source:basename:find("_init") and next
		generate_init_file(Source)
	end
end

PARENT."generate_init_files" := generate_init_files

generate_init_files()

var Objects := [
	file("ml_compiler.o"),
	file("ml_bytecode.o"),
	file("ml_runtime.o"),
	file("ml_types.o"),
	file("ml_string.o"),
	file("ml_method.o"),
	file("ml_list.o"),
	file("ml_map.o"),
	file("ml_file.o"),
	file("ml_iterfns.o"),
	file("sha256.o"),
	file("stringmap.o"),
	file("inthash.o"),
	file("ml_console.o"),
	file("ml_debugger.o"),
	file("ml_object.o")
]

var Libraries := []

var InstallHeaders := [
	"minilang.h",
	"ml_console.h",
	"ml_file.h",
	"ml_iterfns.h",
	"ml_macros.h",
	"ml_types.h",
	"ml_object.h",
	"ml_compiler.h",
	"ml_runtime.h",
	"ml_bytecode.h",
	"stringmap.h",
	"inthash.h"
]

if MINILANG_TABLES or defined("TABLES") then
	Objects:put(file("ml_table.o"))
	CFLAGS := old + ["-DUSE_ML_TABLES"]
	InstallHeaders:put("ml_table.h")
	MINILANG_USEMATH := 1
end

if MINILANG_USEMATH or defined("MATH") then
	file("array"):mkdir
	Objects:put(
		file("ml_math.o"),
		file("ml_array.o"),
		file("array/update_set.o"),
		file("array/update_add.o"),
		file("array/update_sub.o"),
		file("array/update_mul.o"),
		file("array/update_div.o"),
		file("array/compare_eq.o"),
		file("array/compare_ne.o"),
		file("array/compare_lt.o"),
		file("array/compare_gt.o"),
		file("array/compare_le.o"),
		file("array/compare_ge.o")
	)
	CFLAGS := old + ["-DUSE_ML_MATH"]
	InstallHeaders:put("ml_array.h")
	InstallHeaders:put("ml_math.h")
end

if MINILANG_LIBIO or defined("IO") then
	Objects:put(file("ml_io.o"))
	CFLAGS := old + ["-DUSE_ML_IO"]
end

if MINILANG_USEGTK or defined("GTK") then
	Objects:put(file("ml_gir.o"), file("gtk_console.o"))
	CFLAGS := old + ["-DUSE_ML_GIR", pkgconfig("--cflags gtk+-3.0 gdk-pixbuf-2.0 gtksourceview-4 gobject-introspection-1.0 libgvc")]
	LDFLAGS := old + [pkgconfig("--libs gtk+-3.0 gdk-pixbuf-2.0 gtksourceview-4 gobject-introspection-1.0 libgvc")]
	InstallHeaders:put("ml_gir.h")
	InstallHeaders:put("gtk_console.h")
end

if MINILANG_USECBOR or defined("CBOR") then
	var Dir := PATH/"minicbor"
	Dir:exists or execute("git clone -b dev https://github.com/rajamukherji/minicbor.git", Dir)

	CFLAGS := old + [
		'-DMINICBOR_PREFIX=ml_cbor_',
		'-DMINICBOR_READ_FN_PREFIX=ml_cbor_read_',
		'-DMINICBOR_READDATA_TYPE=\"struct ml_cbor_reader_t *\"',
		 "-DUSE_ML_CBOR"
	]
	Objects:put(
		file("ml_cbor.o"),
		file("minicbor/minicbor_reader.o"),
		file("minicbor/minicbor_writer.o")
	)
	InstallHeaders:put("ml_cbor.h")
end

if MINILANG_MODULES or defined("MODULES") then
	Objects:put(file("ml_module.o"), file("ml_library.o"))
	CFLAGS := old + ["-DUSE_ML_MODULES"]
	if PLATFORM = "Linux" then
		LDFLAGS := old + ["-ldl", '-Wl,--dynamic-list={file("exports.lst")}']
		subdir("lib")
	end
	MINILANG_SCHEDULER := 1
	InstallHeaders:put("ml_module.h")
end

if MINILANG_SCHEDULER or defined("SCHEDULER") then
	CFLAGS := old + ["-DUSE_ML_SCHEDULER"]
end

if MINILANG_THREADSAFE or defined("THREADSAFE") then
	CFLAGS := old + ["-DUSE_ML_THREADSAFE"]
end

if MINILANG_INST_FNS or defined("INST_FNS") then
	CFLAGS := old + ["-DML_USE_INST_FNS"]
	Objects:put(file("ml_bytecode_fns.o"))
end

if MINILANG_JIT or defined("JIT") then
	let Source := file("ml_bytecode_x64.dasc")
	file("ml_bytecode_x64.c")[Source] => fun(Target) do
		execute("lua5.2", file("dynasm/dynasm.lua"), "-o", Target, Source)
	end
	Objects:put(file("ml_bytecode_x64.o"))
	CFLAGS := old + ["-DUSE_ML_JIT", "-I", Source:dirname]
	LDFLAGS := old + ["-lZydis"]
end

if PLATFORM = "Linux" and MACHINE = "x86_64" then
	MINILANG_USE_ASM := 1
end

if MINILANG_USE_ASM or defined("ASM") then
	if MACHINE = "x86_64" and PLATFORM = "Linux" then
		Objects:put(file("inthash_x64.o"))
		CFLAGS := old + ["-DASM_INTHASH_SEARCH"]
	end
end

if MINILANG_USE_NANBOXING or defined("NANBOXING") then
	CFLAGS := old + ["-DUSE_NANBOXING"]
end

if MINILANG_USE_TRE or defined("TRE") then
	CFLAGS := old + ["-DUSE_TRE"]
	LDFLAGS := old + ["-ltre"]
end

if MINILANG_USE_GENERICS or defined("GENERICS") then
	CFLAGS := old + ["-DUSE_GENERICS"]
end

if MINILANG_QUEUES or defined("QUEUES") then
	Objects:put(file("ml_queue.o"))
	CFLAGS := old + ["-DUSE_ML_QUEUES"]
	InstallHeaders:put("ml_queue.h")
end

if PLATFORM = "Linux" then
	Objects:put(file("linenoise.o"))
	LDFLAGS := old + ["-lgc"]
elseif PLATFORM = "FreeBSD" then
	Objects:put(file("linenoise.o"))
	CFLAGS := old + ["-I/usr/local/include"]
	LDFLAGS := old + ["-L/usr/local/lib", "-lgc-threaded"]
elseif PLATFORM = "Darwin" then
	Objects:put(file("linenoise.o"))
	LDFLAGS := old + ["-lgc"]
elseif PLATFORM = "Mingw" then
end

LIBMINILANG := c_library(LIB_DIR/"libminilang.a", Objects, Libraries)
MINILANG := c_program(BIN_DIR/"minilang", [file("minilang.o")], [LIBMINILANG])
MINIPP := c_program(BIN_DIR/"minipp", [file("minipp.o")], [LIBMINILANG])
MINIXE := c_program(BIN_DIR/"minixe", [file("minixe.o")], [LIBMINILANG])

DEFAULT[LIBMINILANG, MINILANG, MINIPP, MINIXE]

PARENT."LIBMINILANG" := LIBMINILANG

var InstallBin := PREFIX/"bin"
var InstallInclude := PREFIX/"include/minilang"
var InstallLib := PREFIX/"lib"

install(MINILANG, InstallBin/"minilang", "+x")

for Header in InstallHeaders do
	install(file(Header), InstallInclude / Header)
end

install(LIBMINILANG, InstallLib/"libminilang.a")

subdir("test")
